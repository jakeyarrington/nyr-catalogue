/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 76);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var _$ =  true ? window.jQuery : require('jquery'),
    _html2canvas =  true ? window.html2canvas : require('html2canvas'),
    _THREE =  true ? window.THREE : require('three'),
    _React =  true ? window.React : require('react'),
    _ReactDOM =  true ? window.ReactDOM : require('react-dom'),
    _PDFJS =  true ? window.pdfjsLib : require('pdfjs'),
    _tr = function _tr(s) {
  return (window.iberezansky || {}).tr && window.iberezansky.tr(s) || s;
};

exports.$ = _$;
exports.html2canvas = _html2canvas;
exports.THREE = _THREE;
exports.React = _React;
exports.ReactDOM = _ReactDOM;
exports.PDFJS = _PDFJS;
exports.tr = _tr;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _$ =  true ? window.jQuery : require('jquery'),
    _html2canvas =  true ? window.html2canvas : require('html2canvas'),
    _THREE =  true ? window.THREE : require('three'),
    _PDFJS =  true ? window.PDFJS : require('pdfjs'),
    _tr = function _tr(s) {
  return (window.iberezansky || {}).tr && window.iberezansky.tr(s) || s;
};

if (window.FB3D_LOCALE) {
  window.iberezansky = _extends({}, window.iberezansky, {
    tr: function tr(s) {
      return (FB3D_LOCALE.dictionary || {})[s] || s;
    }
  });
}

exports.$ = _$;
exports.html2canvas = _html2canvas;
exports.THREE = _THREE;
exports.PDFJS = _PDFJS;
exports.tr = _tr;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseMathUtils = function () {
  function BaseMathUtils() {
    _classCallCheck(this, BaseMathUtils);
  }

  BaseMathUtils.sum1 = function sum1(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0]];
  };

  BaseMathUtils.sum2 = function sum2(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1]];
  };

  BaseMathUtils.sum3 = function sum3(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2]];
  };

  BaseMathUtils.sum4 = function sum4(ka, a, kb, b) {
    return [ka * a[0] + kb * b[0], ka * a[1] + kb * b[1], ka * a[2] + kb * b[2], ka * a[3] + kb * b[3]];
  };

  BaseMathUtils.rk4 = function rk4(dy, t, dt, y) {
    var sum = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : BaseMathUtils.sum[y.length - 1];

    var k1 = dy(t, y),
        k2 = dy(t + dt / 2, sum(1, y, dt / 2, k1)),
        k3 = dy(t + dt / 2, sum(1, y, dt / 2, k2)),
        k4 = dy(t + dt, sum(1, y, dt, k3));
    return sum(1, y, dt / 6, sum(1, sum(1, k1, 2, k2), 1, sum(2, k3, 1, k4)));
  };

  BaseMathUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
    return y[0] + (y[1] - y[0]) / (x[1] - x[0]) * (xi - x[0]);
  };

  BaseMathUtils.interpolateLinear = function interpolateLinear(x, y, xi) {
    var yi = void 0;
    if (x[0] > x[1]) {
      x = x.reverse();
      y = y.reverse();
    }
    if (xi < x[0]) {
      yi = y[0];
    } else if (xi > x[1]) {
      yi = y[1];
    } else {
      yi = BaseMathUtils.extrapolateLinear(x, y, xi);
    }
    return yi;
  };

  BaseMathUtils.calcScale = function calcScale(srcW, srcH, dstW, dstH) {
    return dstW / srcW; // Math.min(dstW/srcW, dstH/srcH)
  };

  BaseMathUtils.mulM = function mulM(a, b) {
    var r = [];
    for (var i = 0; i < a.length; ++i) {
      r.push([]);
      for (var j = 0; j < b[0].length; ++j) {
        r[i][j] = 0;
        for (var k = 0; k < b.length; ++k) {
          r[i][j] += a[i][k] * b[k][j];
        }
      }
    }
    return r;
  };

  BaseMathUtils.transM = function transM(m) {
    var r = [];
    for (var i = 0; i < m.length; ++i) {
      for (var j = 0; j < m[0].length; ++j) {
        if (!r[j]) {
          r[j] = [];
        }
        r[j][i] = m[i][j];
      }
    }
    return r;
  };

  BaseMathUtils.mat = function mat(data) {
    var s = 0;
    for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var x = _ref;

      s += x;
    }
    return s / data.length;
  };

  BaseMathUtils.disp = function disp(data) {
    var M = BaseMathUtils.mat(data);
    var s = 0;
    for (var _iterator2 = data, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var x = _ref2;

      s += (x - M) * (x - M);
    }
    return s / data.length;
  };

  BaseMathUtils.predict1 = function predict1(data, num) {
    var r = [],
        l = data.length,
        D = BaseMathUtils.disp(data);
    if (D < l && l > 1) {
      var am = [],
          bm = [];
      for (var i = 0; i < l; ++i) {
        am.push([i, 1]);
        bm.push([data[i]]);
      }
      var ta = BaseMathUtils.transM(am),
          a = BaseMathUtils.mulM(ta, am),
          b = BaseMathUtils.mulM(ta, bm),
          d = a[0][0] * a[1][1] - a[1][0] * a[0][1],
          p = [-(a[0][1] * b[1][0] - b[0][0] * a[1][1]) / d, (a[0][0] * b[1][0] - a[1][0] * b[0][0]) / d];
      for (var _i3 = 0; _i3 < num; ++_i3) {
        var v = Math.round(p[0] * (_i3 + l) + p[1]);
        if (r.indexOf(v) === -1) {
          r.push(v);
        }
      }
    }
    return r;
  };

  BaseMathUtils.predict = function predict(data, num) {
    var r = [],
        l = data.length;
    var sgns = 0;
    for (var i = 0; i < l - 1; ++i) {
      sgns += Math.sign(data[i + 1] - data[i]);
    }
    if (Math.abs(sgns) <= (l - 1) % 2) {
      sgns = -1;
    } else {
      sgns = Math.sign(sgns);
    }
    for (var _i4 = 0, cur = data[l - 1]; _i4 < num && cur > 0; ++_i4) {
      cur += sgns;
      r.push(cur);
    }
    return r;
  };

  BaseMathUtils.getUnique = function getUnique() {
    return Math.ceil(1e9 * Math.random());
  };

  BaseMathUtils.setSplinePoints = function setSplinePoints(spline, ps) {
    if (spline.points.length !== ps.x.length) {
      console.warn('setSplinePoints: bad points');
    }
    for (var i = 0; i < spline.points.length; ++i) {
      spline.points[i].set(ps.x[i], ps.y[i], ps.z ? ps.z[i] : 0);
    }
  };

  BaseMathUtils.mapl2L = function mapl2L(ls, len, n, f) {
    var dL = len / (n - 1);
    var L = 0;
    for (var i = 0, d = ls[0]; i < ls.length - 1 && L < len + 0.1 * dL; ++i, d += ls[i]) {
      if (Math.abs(L - d) < Math.abs(L - d - ls[i + 1])) {
        f(i, L);
        L += dL;
      }
    }
    if (L < len + 0.1 * dL) {
      console.warn('mapl2L: ls is not enought');
    }
  };

  BaseMathUtils.det2 = function det2(a, b, c, d) {
    return a * d - b * c;
  };

  BaseMathUtils.solve2Lin = function solve2Lin(a1, b1, a2, b2) {
    var res = void 0;
    var d = BaseMathUtils.det2(a1[0], a1[1], a2[0], a2[1]);
    if (Math.abs(d) > BaseMathUtils.eps) {
      var dx = BaseMathUtils.det2(b1, a1[1], b2, a2[1]),
          dy = BaseMathUtils.det2(a1[0], b1, a2[0], b2);
      res = {
        x: dx / d,
        y: dy / d
      };
    }
    return res;
  };

  BaseMathUtils.isInsidePoly = function isInsidePoly(ps, p) {
    var done = false,
        ct = void 0;
    for (var i = 0; i < ps.length; ++i) {
      if (BaseMathUtils.v2dist(p, ps[i]) < BaseMathUtils.eps) {
        ct = 1;
        done = true;
        break;
      }
    }
    while (!done) {
      done = true;
      ct = 0;
      var np = { x: p.x + Math.random() - 0.5, y: p.y + Math.random() - 0.5 },
          rn = { x: np.x - p.x, y: np.y - p.y },
          a1 = [rn.y, -rn.x],
          b1 = p.x * rn.y - p.y * rn.x;
      for (var _i5 = 0; _i5 < ps.length; ++_i5) {
        var p0 = ps[_i5],
            p1 = ps[(_i5 + 1) % ps.length],
            n = { x: p1.x - p0.x, y: p1.y - p0.y },
            a2 = [n.y, -n.x],
            b2 = p0.x * n.y - p0.y * n.x,
            ip = BaseMathUtils.solve2Lin(a1, b1, a2, b2);
        if (ip) {
          if (BaseMathUtils.v2dist(ip, p0) < BaseMathUtils.eps || BaseMathUtils.v2dist(ip, p1) < BaseMathUtils.eps) {
            done = false;
            break;
          } else if (ip.x > Math.min(p0.x, p1.x) - BaseMathUtils.eps && ip.x < Math.max(p0.x, p1.x) + BaseMathUtils.eps && ip.y > Math.min(p0.y, p1.y) - BaseMathUtils.eps && ip.y < Math.max(p0.y, p1.y) + BaseMathUtils.eps) {
            if (BaseMathUtils.v2dist(ip, p) < BaseMathUtils.eps) {
              ct = 1;
              break;
            } else {
              var tn = { x: ip.x - p.x, y: ip.y - p.y };
              ct += tn.x * rn.x + tn.y * rn.y > 0;
            }
          }
        }
      }
    }
    return ct % 2;
  };

  BaseMathUtils.isInsideConvPoly = function isInsideConvPoly(ps, p) {
    var sg = [0, 0];
    for (var i = 0; i < ps.length; ++i) {
      var p0 = ps[i],
          p1 = ps[(i + 1) % ps.length],
          a = { x: p0.x - p.x, y: p0.y - p.y },
          b = { x: p1.x - p.x, y: p1.y - p.y };
      ++sg[(a.x * b.y - a.y * b.x < 0) + 0];
    }
    return ~sg.indexOf(ps.length);
  };

  BaseMathUtils.v2len = function v2len(v2) {
    return Math.sqrt(v2.x * v2.x + v2.y * v2.y);
  };

  BaseMathUtils.v2dist = function v2dist(v21, v22) {
    return BaseMathUtils.v2len({
      x: v22.x - v21.x,
      y: v22.y - v21.y
    });
  };

  BaseMathUtils.computeSquare = function computeSquare(ps) {
    var a = [];
    var p = 0;
    for (var i = 0; i < ps.length; ++i) {
      a.push(BaseMathUtils.v2dist(ps[i], ps[(i + 1) % ps.length]));
      p += 0.5 * a[i];
    }
    return Math.sqrt(p * (p - a[0]) * (p - a[1]) * (p - a[2]));
  };

  BaseMathUtils.computeInterpCoefs = function computeInterpCoefs(tri, p) {
    var s = BaseMathUtils.computeSquare(tri),
        coefs = [],
        l = tri.length;
    for (var i = 0; i < l; ++i) {
      coefs[i] = BaseMathUtils.computeSquare([p, tri[(i + 1) % l], tri[(i + 2) % l]]) / s;
    }
    return coefs;
  };

  return BaseMathUtils;
}();

BaseMathUtils.sum = [BaseMathUtils.sum1, BaseMathUtils.sum2, BaseMathUtils.sum3, BaseMathUtils.sum4];
BaseMathUtils.eps = 1e-4;
exports.default = BaseMathUtils;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Utils = function () {
  function Utils() {
    _classCallCheck(this, Utils);
  }

  Utils.normalizeUrl = function normalizeUrl(url) {
    function split(s) {
      return s.replace(/\\/g, '/').split('/');
    }
    var base = split(window.location.href);
    url = split(url);
    if (base[2] === url[2]) {
      url[0] = base[0];
    }
    return url.join('/');
  };

  Utils.extends = function _extends(der, base) {
    for (var name in base) {
      if (!der.hasOwnProperty(name)) {
        der[name] = base[name];
      }
    }
  };

  Utils.defaultCmp = function defaultCmp(a, b) {
    return a - b;
  };

  Utils.lowerBound = function lowerBound(a, x, cmp) {
    cmp = cmp || Utils.defaultCmp;
    var l = 0,
        h = a.length - 1;
    while (h - l > 1) {
      var mid = Math.floor((l + h) / 2);
      if (cmp(x, a[mid]) < 0) {
        h = mid;
      } else {
        l = mid;
      }
    }
    return cmp(x, a[h]) >= 0 ? h : l;
  };

  return Utils;
}();

Utils.MOBILE_DIAG = 11;
exports.default = Utils;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GraphUtils = function () {
  function GraphUtils() {
    _classCallCheck(this, GraphUtils);
  }

  GraphUtils.createCanvas = function createCanvas(width, height) {
    var c = document.createElement('canvas');
    if (width) {
      c.width = width;
    }
    if (height) {
      c.height = height;
    }
    return c;
  };

  GraphUtils.extrapolateLinear = function extrapolateLinear(x, y, xi) {
    return y[0] + (y[1] - y[0]) / (x[1] - x[0]) * (xi - x[0]);
  };

  GraphUtils.interpolate01 = function interpolate01(y1, y2, t) {
    return GraphUtils.extrapolateLinear([0, 1], [y1, y2], t);
  };

  GraphUtils.getColorBytes = function getColorBytes(color) {
    return [color >> 16 & 0xFF, color >> 8 & 0xFF, color & 0xFF];
  };

  GraphUtils.inverseColor = function inverseColor(color) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    var bs = GraphUtils.getColorBytes(color),
        ibs = [0xFF - bs[0], 0xFF - bs[1], 0xFF - bs[2]],
        nbs = [Math.round(GraphUtils.interpolate01(bs[0], ibs[0], t)), Math.round(GraphUtils.interpolate01(bs[1], ibs[1], t)), Math.round(GraphUtils.interpolate01(bs[2], ibs[2], t))];
    return GraphUtils.bytes2Color(nbs);
  };

  GraphUtils.color2Rgba = function color2Rgba(color, a) {
    return GraphUtils.bytes2Rgba(GraphUtils.getColorBytes(color), a);
  };

  GraphUtils.bytes2Rgba = function bytes2Rgba(bs, a) {
    return 'rgba(' + bs.join(',') + ',' + a + ')';
  };

  GraphUtils.bytes2Color = function bytes2Color(bs) {
    return bs[2] | bs[1] << 8 | bs[0] << 16;
  };

  return GraphUtils;
}();

exports.default = GraphUtils;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _BaseMathUtils2 = __webpack_require__(2);

var _BaseMathUtils3 = _interopRequireDefault(_BaseMathUtils2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MathUtils = function (_BaseMathUtils) {
  _inherits(MathUtils, _BaseMathUtils);

  function MathUtils() {
    _classCallCheck(this, MathUtils);

    return _possibleConstructorReturn(this, _BaseMathUtils.apply(this, arguments));
  }

  MathUtils.splitSpline = function splitSpline(spline, N) {
    var o = { len: 0, ls: [0] },
        dl = 1 / N;
    for (var i = 0; i <= N; ++i) {
      var p = spline.getPoint(i * dl);
      if (i) {
        var d = MathUtils.v1.distanceTo(p);
        o.len += d;
        o.ls.push(d);
      }
      MathUtils.v1.copy(p);
    }
    return o;
  };

  MathUtils.getLinearIndeces = function getLinearIndeces(spline, n) {
    var del = 5000,
        dDel = 1 / del;
    var ls = [0];
    var l = 0;
    for (var i = 0; i <= del; ++i) {
      var p = spline.getPoint(i * dDel);
      if (i) {
        var d = MathUtils.v1.distanceTo(p);
        l += d;
        ls.push(d);
      }
      MathUtils.v1.copy(p);
    }
    ls.push(1e7);

    var res = [],
        dl = l / (n - 1);
    for (var _i = 0, L = 0, _d = ls[0]; _i < ls.length - 1; ++_i, _d += ls[_i]) {
      if (Math.abs(L - _d) < Math.abs(L - _d - ls[_i + 1])) {
        res.push(_i * dDel);
        L += dl;
      }
    }

    return res;
  };

  MathUtils.refinePoly = function refinePoly(poly, maxDl) {
    var res = [];
    for (var i = 0; i < poly.length; ++i) {
      var p0 = poly[i],
          p1 = poly[(i + 1) % poly.length],
          l = _BaseMathUtils3.default.v2dist(p0, p1),
          n = Math.ceil(l / maxDl),
          dl = l / n;
      res.push(p0);
      for (var j = 1; j < n; ++j) {
        res.push(new _libs.THREE.Vector2(p0.x + j * dl * (p1.x - p0.x) / l, p0.y + j * dl * (p1.y - p0.y) / l));
      }
    }
    return res;
  };

  return MathUtils;
}(_BaseMathUtils3.default);

MathUtils.v1 = new _libs.THREE.Vector3();
exports.default = MathUtils;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageBase = function () {
  function ImageBase(context, width, height, color) {
    _classCallCheck(this, ImageBase);

    this.context = context;
    this.wnd = context.wnd;
    this.doc = context.doc;
    this.element = context.element || context.doc.body;
    this.c = context.renderCanvas || ImageBase.renderCanvas;
    this.ctx = context.renderCanvasCtx || ImageBase.renderCanvasCtx;
    this.resW = this.width = width;
    this.resH = this.height = height;
    this.color = color;
  }

  ImageBase.prototype.setRenderCanvas = function setRenderCanvas(c, ctx) {
    this.c = c;
    this.ctx = ctx;
  };

  ImageBase.prototype.setResolution = function setResolution(res) {
    var k = res.width / this.resW;
    this.resW = res.width;
    this.resH = k * this.resH; // res.height;
  };

  ImageBase.prototype.dispose = function dispose() {};

  ImageBase.prototype.renderBlankPage = function renderBlankPage() {
    this.ctx.beginPath();
    this.ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.color, 1);
    this.ctx.rect(0, 0, this.c.width, this.c.height);
    this.ctx.fill();
  };

  ImageBase.prototype.renderImage = function renderImage(image) {
    this.pushCtx();
    this.ctx.clearRect(0, 0, this.c.width, this.c.height);
    this.ctx.drawImage(image, 0, 0);
    this.popCtx();
  };

  ImageBase.prototype.normToConv = function normToConv(p) {
    return {
      x: p.x * this.c.width,
      y: (1 - p.y) * this.c.height
    };
  };

  ImageBase.prototype.renderHit = function renderHit(poly) {
    var ctx = this.ctx;
    ctx.fillStyle = 'rgba(255,255,0,0.4)';
    ctx.beginPath();
    var p = this.normToConv(poly[0]);
    ctx.moveTo(p.x, p.y);
    for (var i = 1; i < poly.length; ++i) {
      p = this.normToConv(poly[i]);
      ctx.lineTo(p.x, p.y);
    }
    ctx.closePath();
    ctx.fill();
  };

  ImageBase.prototype.pushCtx = function pushCtx() {
    if (Math.abs(this.resW - this.c.width) >= 1) {
      this.c.width = this.resW;
    }
    if (Math.abs(this.resH - this.c.height) >= 1) {
      this.c.height = this.resH;
    }
    this.ctx.save();
    this.ctx.scale(this.c.width / this.width, this.c.height / this.height);
    return this.ctx;
  };

  ImageBase.prototype.popCtx = function popCtx() {
    this.ctx.restore();
  };

  ImageBase.prototype.renderNotFoundPage = function renderNotFoundPage() {
    this.renderBlankPage();
  };

  ImageBase.prototype.finishRender = function finishRender() {
    if (this.onChange) {
      this.onChange(this.c);
    }
  };

  ImageBase.prototype.finishLoad = function finishLoad() {
    if (this.onLoad) {
      this.onLoad();
    } else {
      this.startRender();
    }
  };

  ImageBase.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return undefined;
  };

  return ImageBase;
}();

ImageBase.renderCanvas = _GraphUtils2.default.createCanvas();
ImageBase.renderCanvasCtx = ImageBase.renderCanvas.getContext('2d');
exports.default = ImageBase;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var EventConverter = function () {

  // virtuals
  // getObject(e, data);
  // getCallback(object);
  // test(object1, object1);

  function EventConverter(wnd, doc) {
    _classCallCheck(this, EventConverter);

    this.wnd = wnd;
    this.doc = doc;
    this.enabled = true;
  }

  EventConverter.prototype.setEnable = function setEnable(vl) {
    if (!vl) {
      if (this.mCapObject) {
        this.notify(this.mCapObject, _libs.$.Event('mouseup'), 'mouseup');
        this.mCapObject = undefined;
      }
      if (this.mHovObject) {
        this.notify(this.mHovObject, _libs.$.Event('mouseout'), 'mouseout');
        this.mHovObject = undefined;
      }
    }
    this.enabled = vl;
  };

  EventConverter.prototype.getCallback = function getCallback(object) {
    return undefined;
  };

  EventConverter.prototype.notify = function notify(object, e, type) {
    var callback = this.getCallback(object);
    if (callback) {
      var props = _extends({}, e, {
        type: type,
        view: this.wnd
      });
      var jE = _libs.$.Event(type, props);
      callback(jE, object);
    }
  };

  EventConverter.prototype.convert = function convert(e, data) {
    if (!this.enabled) return;

    if (this.filter) {
      e = this.filter(this.element, e);
    }

    var object = this.getObject(e, data),
        notify = ~e.type.indexOf('touch') ? this.convertTouch(e, data, object) : this.convertMouse(e, data, object);
    if (notify && object) {
      this.notify(object, e, e.type);
    }
  };

  EventConverter.prototype.convertTouch = function convertTouch(e, data, object) {
    var notify = true;
    switch (e.type) {
      case 'touchstart':
        {
          if (this.tCapObject) {
            this.notify(this.tCapObject, e, 'touchend');
          }
          this.tCapObject = object;
          break;
        }
      case 'touchend':
        {
          if (this.tCapObject && !this.test(this.tCapObject, object)) {
            this.notify(this.tCapObject, e, 'touchend');
            notify = false;
          } else if (object && this.test(this.tCapObject, object)) {
            this.notify(object, e, 'touchtap');
          }
          this.tCapObject = undefined;
          break;
        }
      case 'touchtap':
        {
          notify = false;
          break;
        }
    }
    return notify;
  };

  EventConverter.prototype.convertMouse = function convertMouse(e, data, object) {
    var notify = true;
    switch (e.type) {
      case 'mousedown':
        {
          if (this.mCapObject) {
            this.notify(this.mCapObject, e, 'mouseup');
          }
          this.mCapObject = object;
          break;
        }
      case 'mouseup':
        {
          if (this.mCapObject && !this.test(this.mCapObject, object)) {
            this.notify(this.mCapObject, e, 'mouseup');
            notify = false;
          }
          break;
        }
      case 'click':
        {
          notify = this.test(this.mCapObject, object);
          this.mCapObject = undefined;
          break;
        }
      case 'mouseenter':
      case 'mouseover':
      case 'mousemove':
        {
          if (!this.test(this.mHovObject, object) && this.mHovObject) {
            this.notify(this.mHovObject, e, 'mouseout');
            this.mHovObject = undefined;
          }
          if (!this.mHovObject && object) {
            this.notify(object, e, 'mouseover');
            this.mHovObject = object;
          }
          notify = e.type === 'mousemove';
          break;
        }
      case 'mouseleave':
      case 'mouseout':
        {
          if (this.mHovObject) {
            this.notify(this.mHovObject, e, 'mouseout');
            this.mHovObject = undefined;
          }
          notify = false;
          break;
        }
    }
    return notify;
  };

  return EventConverter;
}();

exports.default = EventConverter;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Cache = __webpack_require__(14);

var _Cache2 = _interopRequireDefault(_Cache);

var _BlankImage = __webpack_require__(46);

var _BlankImage2 = _interopRequireDefault(_BlankImage);

var _StaticImage = __webpack_require__(62);

var _StaticImage2 = _interopRequireDefault(_StaticImage);

var _PdfImage = __webpack_require__(60);

var _PdfImage2 = _interopRequireDefault(_PdfImage);

var _InteractiveImage = __webpack_require__(54);

var _InteractiveImage2 = _interopRequireDefault(_InteractiveImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ImageFactory = function () {
  function ImageFactory(context, cache) {
    _classCallCheck(this, ImageFactory);

    this.context = context;
    this.cache = cache || new _Cache2.default();
  }

  ImageFactory.prototype.build = function build(info) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var widthTexels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 210;
    var heightTexels = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 297;
    var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0xFFFFFF;
    var injector = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;

    var image = void 0;
    switch (info.type) {
      case 'html':
        {
          image = new _InteractiveImage2.default(this.context, widthTexels, heightTexels, color, info.src, this.cache, injector);
          break;
        }
      case 'image':
        {
          image = new _StaticImage2.default(this.context, widthTexels, heightTexels, color, info.src);
          break;
        }
      case 'pdf':
        {
          image = new _PdfImage2.default(this.context, widthTexels, heightTexels, color, info.src, n);
          break;
        }
      case 'blank':
      default:
        {
          image = new _BlankImage2.default(this.context, widthTexels, heightTexels, color);
          break;
        }
    }
    return image;
  };

  return ImageFactory;
}();

exports.default = ImageFactory;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _book = __webpack_require__(11);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BookPropsBuilder = function () {
  function BookPropsBuilder(onReady, style) {
    _classCallCheck(this, BookPropsBuilder);

    this.onReady = onReady;
    this.defaults = (0, _book.props)(style);
  }

  BookPropsBuilder.prototype.dispose = function dispose() {};

  BookPropsBuilder.prototype.calcSize = function calcSize(width, height) {
    var scale = _BaseMathUtils2.default.calcScale(width, height, this.defaults.width, this.defaults.height);
    return {
      width: scale * width,
      height: scale * height
    };
  };

  BookPropsBuilder.prototype.calcTexels = function calcTexels(width, height) {
    var sheet = this.defaults.sheet,
        scale = _BaseMathUtils2.default.calcScale(width, height, sheet.widthTexels, sheet.heightTexels);
    return {
      widthTexels: scale * width,
      heightTexels: scale * height
    };
  };

  BookPropsBuilder.prototype.calcProps = function calcProps(width, height) {
    this.props = _extends({}, this.defaults, {
      pages: this.pages
    }, this.calcSize(width, height), {
      sheet: _extends({}, this.defaults.sheet, this.calcTexels(width, height)),
      cover: _extends({}, this.defaults.cover),
      page: _extends({}, this.defaults.page)
    });
  };

  BookPropsBuilder.prototype.calcSheets = function calcSheets(pages) {
    return this.sheets = Math.ceil(Math.max(0, pages - 4) / 2);
  };

  BookPropsBuilder.prototype.getSheets = function getSheets() {
    return this.sheets;
  };

  BookPropsBuilder.prototype.getProps = function getProps() {
    return this.props;
  };

  BookPropsBuilder.prototype.getPageCallback = function getPageCallback() {
    return this.binds.pageCallback;
  };

  BookPropsBuilder.prototype.ready = function ready() {
    if (this.onReady) {
      this.onReady(this.getProps(), this.getSheets(), this.getPageCallback());
    }
  };

  return BookPropsBuilder;
}();

exports.default = BookPropsBuilder;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _sheetBlock = __webpack_require__(44);

var _sheetBlock2 = _interopRequireDefault(_sheetBlock);

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

var _ThreeUtils = __webpack_require__(21);

var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// import ThreeMarkup from './ThreeMarkup';

var SheetBlock = function () {
  function SheetBlock(visual, p, first, last) {
    var angle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

    var _this = this;

    var state = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'closed';
    var height = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;

    _classCallCheck(this, SheetBlock);

    this.visual = visual;
    this.p = _extends({}, p, {
      first: first,
      last: last
    });
    var props = this.getProps();

    var loadedPoints = this.loadPoints();
    Object.keys(loadedPoints).map(function (k) {
      _this[k] = loadedPoints[k][props.shape] || loadedPoints[k][0];
    });

    this.pSpline = new _libs.THREE.CatmullRomCurve3([]);
    for (var i = 0; i < this.interpolationPoints.x[0].length; ++i) {
      this.pSpline.points.push(new _libs.THREE.Vector3());
    }

    this.iSpline = new _libs.THREE.CatmullRomCurve3([]);
    for (var _i = 0; _i < _sheetBlock2.default.resX; ++_i) {
      this.iSpline.points.push(new _libs.THREE.Vector3());
    }

    this.aSplines = [];

    //this.three = new THREE.Object3D();

    this.geometry = _sheetBlock2.default.geometry.clone();

    this.p.sideFaces = [{
      first: 0,
      last: _sheetBlock2.default.faces[0]
    }, {
      first: _sheetBlock2.default.faces[0],
      last: _sheetBlock2.default.faces[1]
    }];

    this.sideTexture = new _libs.THREE.Texture();
    this.sideTexture.wrapT = _libs.THREE.RepeatWrapping;
    this.sideTexture.repeat.set(0, last - first);
    this.sideTexture.image = props.sideTexture;
    this.sideTexture.needsUpdate = true;

    this.materials = [new _libs.THREE.MeshPhongMaterial(), new _libs.THREE.MeshPhongMaterial(), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture }), new _libs.THREE.MeshPhongMaterial({ map: this.sideTexture })];

    this.p.setTexture(this.materials[0], 2 * first);
    this.p.setTexture(this.materials[1], 2 * last - 1);

    this.mesh = new _libs.THREE.Mesh(this.geometry, this.materials);
    this.mesh.castShadow = false;
    this.mesh.receiveShadow = false;
    // this.mesh.frustumCulled = true;

    //this.three.add(this.mesh);
    this.three = this.mesh;
    this.three.userData.self = this;

    this.markers = [];
    if (this.p.marker.use) {
      var l = this.geometry.vertices.length;
      var is = void 0;
      // is = [0, sheetBlock.resX-1, (sheetBlock.resZ-1)*sheetBlock.resX, sheetBlock.resZ*sheetBlock.resX-1];
      is = Array.apply(0, Array(l)).map(function (_, i) {
        return i;
      });

      for (var _iterator = is, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i2 >= _iterator.length) break;
          _ref = _iterator[_i2++];
        } else {
          _i2 = _iterator.next();
          if (_i2.done) break;
          _ref = _i2.value;
        }

        var _i3 = _ref;

        var marker = _ThreeUtils2.default.createMarker(this.geometry.vertices[_i3], _i3 < l / 2 ? 0xFF0000 : 0x00FF00, this.p.marker.size);
        this.markers.push({
          marker: marker,
          vertex: _i3
        });
        this.three.add(marker);
      }
    }

    this.corner = {
      use: true,
      height: 0,
      maxDistance: 0,
      points: [],
      OZ: new _libs.THREE.Vector3(0, 0, 1),
      axis: new _libs.THREE.Vector3()
    };
    this.set(0, 'closed', height, first, last); // calculate corner points

    this.set(angle, state, height, first, last); // init position

    // if(!SheetBlock.markup) {
    //   SheetBlock.markup=true;
    //   this.markup = new ThreeMarkup(this, 0, [{
    //     x: 0,
    //     y: 0,
    //   }, {
    //     x: 0.5,
    //     y: 1
    //   }, {
    //     x: 1,
    //     y: 0
    //   }].map((p)=>new THREE.Vector2(p.x, p.y)), {});
    // }
  }

  SheetBlock.prototype.dispose = function dispose() {
    for (var _iterator2 = this.materials, _isArray2 = Array.isArray(_iterator2), _i4 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i4 >= _iterator2.length) break;
        _ref2 = _iterator2[_i4++];
      } else {
        _i4 = _iterator2.next();
        if (_i4.done) break;
        _ref2 = _i4.value;
      }

      var m = _ref2;

      if (m.map) {
        m.map = null;
        m.needsUpdate = true;
      }
      m.dispose();
    }
    delete this.materials;
    this.geometry.dispose();
  };

  SheetBlock.prototype.getSize = function getSize() {
    return this.p.last - this.p.first;
  };

  SheetBlock.prototype.getProps = function getProps() {
    return _extends({}, this.p.page, {
      sheets: this.p.sheets
    });
  };

  SheetBlock.prototype.getTopCerners = function getTopCerners() {
    var off = this.angle > Math.PI / 2 ? this.geometry.vertices.length / 2 : 0;
    return [this.geometry.vertices[off], this.geometry.vertices[_sheetBlock2.default.resX - 1 + off], this.geometry.vertices[(_sheetBlock2.default.resZ - 1) * _sheetBlock2.default.resX + off], this.geometry.vertices[_sheetBlock2.default.resZ * _sheetBlock2.default.resX - 1 + off]];
  };

  SheetBlock.prototype.getTopSize = function getTopSize() {
    // const l=this.geometry.vertices.length, off = this.angle>Math.PI/2? l/2: 0,
    //   v0 = this.geometry.vertices[off], v1 = this.geometry.vertices[sheetBlock.resZ*sheetBlock.resX-1+off];
    // // is = [0, sheetBlock.resX-1, (sheetBlock.resZ-1)*sheetBlock.resX, sheetBlock.resZ*sheetBlock.resX-1];
    // return {
    //   width: Math.abs(v1.x-v0.x),
    //   height: Math.abs(v1.z-v0.z)
    // };
    var vs = this.getTopCerners();
    return {
      width: vs[0].distanceTo(vs[1]),
      height: vs[0].distanceTo(vs[2])
    };
  };

  SheetBlock.prototype.getTopWorldRotation = function getTopWorldRotation(q) {
    q.x = -Math.PI / 2;
    return q;
  };

  SheetBlock.prototype.getTopWorldPosition = function getTopWorldPosition(v) {
    var l = this.geometry.vertices.length,
        off = this.angle > Math.PI / 2 ? l / 2 : 0,
        vs = [this.geometry.vertices[off], this.geometry.vertices[_sheetBlock2.default.resX - 1 + off], this.geometry.vertices[(_sheetBlock2.default.resZ - 1) * _sheetBlock2.default.resX + off], this.geometry.vertices[_sheetBlock2.default.resZ * _sheetBlock2.default.resX - 1 + off]];
    v.set(0, 0, 0);
    for (var _iterator3 = vs, _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i5 >= _iterator3.length) break;
        _ref3 = _iterator3[_i5++];
      } else {
        _i5 = _iterator3.next();
        if (_i5.done) break;
        _ref3 = _i5.value;
      }

      var vi = _ref3;

      v.x += 0.25 * vi.x;
      v.y += 0.25 * vi.y;
      v.z += 0.25 * vi.z;
    }
    this.three.localToWorld(v);
    return v;
  };

  SheetBlock.prototype.getInterpolationPoints = function getInterpolationPoints(inds, mod) {
    var ps = { x: [], y: [] },
        K = this.getProps().wave;
    for (var _iterator4 = inds, _isArray4 = Array.isArray(_iterator4), _i6 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i6 >= _iterator4.length) break;
        _ref4 = _iterator4[_i6++];
      } else {
        _i6 = _iterator4.next();
        if (_i6.done) break;
        _ref4 = _i6.value;
      }

      var i = _ref4;

      ps.x.push([].concat(this.interpolationPoints.x[i]));
      ps.y.push(~mod.indexOf(i) ? this.interpolationPoints.y[i].map(function (n) {
        return K * n;
      }) : [].concat(this.interpolationPoints.y[i]));
    }
    return ps;
  };

  SheetBlock.prototype.set = function set(angle) {
    var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
    var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.corner.height;
    var first = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.p.first;
    var last = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.p.last;

    var PI = Math.PI;
    this.state = state;
    var closedAngle = void 0,
        binderTurn = void 0;
    if ((typeof angle === 'undefined' ? 'undefined' : _typeof(angle)) === 'object') {
      this.angle = angle.openedAngle;
      closedAngle = angle.closedAngle;
      binderTurn = angle.binderTurn > PI / 2 ? PI - angle.binderTurn : angle.binderTurn;
    } else {
      this.angle = angle;
    }
    this.corner.height = height;
    if (this.p.first !== first || this.p.last !== last) {
      this.sideTexture.repeat.set(0, last - first);
      this.sideTexture.needsUpdate = true;
      if (this.p.first !== first) {
        this.p.setTexture(this.materials[0], 2 * first);
      }
      if (this.p.last !== last) {
        this.p.setTexture(this.materials[1], 2 * last - 1);
      }
    }
    this.p.first = first;
    this.p.last = last;
    var points = void 0;
    var props = this.getProps();
    if (this.state === 'closed') {
      points = this.getInterpolationPoints(this.closedInterpolationIndeces, this.closedInterpolationIndeces);
    } else if (this.state === 'opened') {
      if (closedAngle !== undefined && Math.abs(closedAngle - PI / 2) > 1e-2) {
        points = this.getInterpolationPoints(this.flatInterpolationIndeces, []);
        var ps = this.getPointsAtAngle(this.getInterpolationPoints(this.closedInterpolationIndeces, this.closedInterpolationIndeces), closedAngle > PI / 2 ? PI - closedAngle : closedAngle);
        points.x = [ps.x].concat(points.x);
        points.y = [ps.y].concat(points.y);
        // console.log(ps);
      } else {
        points = this.getInterpolationPoints(this.openedInterpolationIndeces, this.closedInterpolationIndeces);
      }
    }
    var hl = void 0,
        hr = void 0,
        offset = 0.5 * props.sheets * props.depth;
    if (this.state === 'closed') {
      offset -= 7e-6 * this.p.scale;
    }
    if (this.angle <= PI / 2) {
      hl = (props.sheets - first) * props.depth;
      hr = (props.sheets - last) * props.depth;
    } else {
      hl = first * props.depth;
      hr = last * props.depth;
    }

    var inAngle = this.angle > PI / 2 ? PI - this.angle : this.angle,
        hAngle = this.state === 'closed' ? inAngle : binderTurn === undefined ? PI / 2 : binderTurn;

    var _getPointsAtAngleAndH = this.getPointsAtAngleAndHs(points, inAngle, hAngle, [hl / props.width, hr / props.width]),
        left = _getPointsAtAngleAndH[0],
        right = _getPointsAtAngleAndH[1];

    if (this.angle > PI / 2) {
      this.inverse(left);
      this.inverse(right);
      offset = -offset;
    }
    this.setPoints(left, right, offset);
  };

  SheetBlock.prototype.setPoints = function setPoints(left, right, offset) {
    var _this2 = this;

    var p = this.getProps();
    var i = 0;

    var ys = [right, left];
    for (var y = 0; y < _sheetBlock2.default.resY; ++y) {
      for (var z = 0; z < _sheetBlock2.default.resZ; ++z) {
        for (var x = 0; x < _sheetBlock2.default.resX; ++x) {
          this.geometry.vertices[i++].set(ys[y].x[x] * p.width + offset, ys[y].y[x] * p.width, z * p.height / (_sheetBlock2.default.resZ - 1) - 0.5 * p.height);
        }
      }
    }
    if (i !== this.geometry.vertices.length) {
      console.warn('setPoints: bad mapping!');
    }

    if (this.corner.use && !this.corner.points.length) {
      var plane = new _libs.THREE.Plane(),
          normal = plane.normal,
          planeOffset = (1 - this.getProps().flexibleCorner) * Math.min(p.width, p.height),
          proj = new _libs.THREE.Vector3();
      plane.setFromNormalAndCoplanarPoint(new _libs.THREE.Vector3(-1, 0, -1).normalize(), new _libs.THREE.Vector3(planeOffset + offset, 0, 0.5 * p.height));
      for (var _i7 = 0, l = this.geometry.vertices.length; _i7 < l; ++_i7) {
        plane.projectPoint(this.geometry.vertices[_i7], proj);
        proj.sub(this.geometry.vertices[_i7]);
        if (proj.x * normal.x + proj.y * normal.y + proj.z * normal.z > 0) {
          var d = proj.length() / planeOffset;
          this.corner.maxDistance = Math.max(this.corner.maxDistance, d);
          this.corner.points.push({ vertex: _i7, distance: d });
        }
      }
    }

    if (this.corner.use && Math.abs(this.corner.height) > 1e-3) {
      var d2Angle = function d2Angle(d) {
        return p.cornerDeviation * _this2.corner.height / (1 + Math.exp(-p.bending * (d - 0.5 * _this2.corner.maxDistance)));
      };
      this.corner.axis.set(-1, 0, 1).normalize();
      this.corner.axis.applyAxisAngle(this.corner.OZ, this.angle);
      for (var _iterator5 = this.corner.points, _isArray5 = Array.isArray(_iterator5), _i8 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
        var _ref5;

        if (_isArray5) {
          if (_i8 >= _iterator5.length) break;
          _ref5 = _iterator5[_i8++];
        } else {
          _i8 = _iterator5.next();
          if (_i8.done) break;
          _ref5 = _i8.value;
        }

        var point = _ref5;

        this.geometry.vertices[point.vertex].applyAxisAngle(this.corner.axis, d2Angle(point.distance));
      }
    }

    for (var _iterator6 = this.markers, _isArray6 = Array.isArray(_iterator6), _i9 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i9 >= _iterator6.length) break;
        _ref6 = _iterator6[_i9++];
      } else {
        _i9 = _iterator6.next();
        if (_i9.done) break;
        _ref6 = _i9.value;
      }

      var m = _ref6;

      m.marker.position.copy(this.geometry.vertices[m.vertex]);
    }

    this.geometry.computeVertexNormals();
    //this.geometry.computeFaceNormals();
    this.geometry.computeBoundingSphere();
    //this.geometry.computeBoundingBox();
    this.geometry.verticesNeedUpdate = true;

    if (this.markup) {
      this.markup.computeVertices();
    }
  };

  SheetBlock.prototype.inverse = function inverse(ps) {
    for (var i = 0; i < ps.x.length; ++i) {
      ps.x[i] = -ps.x[i];
    }
    return ps;
  };

  SheetBlock.prototype.getPointsAtHs = function getPointsAtHs(ps, angle, hs) {
    var _this3 = this;

    var N = 1000;
    _MathUtils2.default.setSplinePoints(this.pSpline, ps);
    var bl = _MathUtils2.default.splitSpline(this.pSpline, N),
        r = [];
    {
      var p1 = _extends({}, this.pSpline.getPoint((N - 1) / N)),
          p2 = _extends({}, this.pSpline.getPoint(1)),
          dp = { x: p2.x - p1.x, y: p2.y - p1.y },
          ln = Math.sqrt(dp.x * dp.x + dp.y * dp.y),
          sp = this.pSpline.points[this.pSpline.points.length - 1];
      sp.set(sp.x + 0.1 * dp.x / ln, sp.y + 0.1 * dp.y / ln, 0);
      bl = _MathUtils2.default.splitSpline(this.pSpline, N);
    }
    bl.ls.push(1e7);
    _MathUtils2.default.mapl2L(bl.ls, bl.len, _sheetBlock2.default.resX, function (i) {
      for (var j = 0; j < hs.length; ++j) {
        if (!i) {
          r[j] = { x: [-hs[j] * Math.sin(angle)], y: [hs[j] * Math.cos(angle)] };
        } else {
          var p0 = _extends({}, _this3.pSpline.getPoint((i - 1) / N)),
              _p = _this3.pSpline.getPoint(i / N),
              x = -(_p.y - p0.y),
              y = _p.x - p0.x,
              l = Math.sqrt(x * x + y * y);
          r[j].x.push(_p.x + x / l * hs[j]);
          r[j].y.push(_p.y + y / l * hs[j]);
        }
      }
    });

    var nps = [];

    var _loop = function _loop(j) {
      nps[j] = { x: [], y: [] };
      _MathUtils2.default.setSplinePoints(_this3.iSpline, r[j]);
      var l = _MathUtils2.default.splitSpline(_this3.iSpline, N);
      l.ls.push(1e7);
      _MathUtils2.default.mapl2L(l.ls, 1, _sheetBlock2.default.resX, function (i) {
        var p = _this3.iSpline.getPoint(i / N);
        nps[j].x.push(p.x);
        nps[j].y.push(p.y);
      });
    };

    for (var j = 0; j < hs.length; ++j) {
      _loop(j);
    }
    return nps;
  };

  SheetBlock.prototype.getPointsAtAngleAndHs = function getPointsAtAngleAndHs(points, angle, hAngle, hs) {
    var ps = this.getPointsAtAngle(points, angle);
    return this.getPointsAtHs(ps, hAngle, hs);
  };

  SheetBlock.prototype.getPointsAtAngle = function getPointsAtAngle(points, angle) {
    var ps = { x: [], y: [] },
        angles = [];
    angle /= Math.PI / 2;
    for (var j = 0; j < points.x.length; ++j) {
      angles.push(j / (points.x.length - 1));
    }
    for (var i = 0; i < points.x[0].length; ++i) {
      var xps = [],
          yps = [];
      for (var _j = 0; _j < points.x.length; ++_j) {
        xps.push(points.x[_j][i]);
        yps.push(points.y[_j][i]);
      }
      ps.x.push(this.interpolate(angles, xps, angle));
      ps.y.push(this.interpolate(angles, yps, angle));
    }
    return ps;
  };

  SheetBlock.prototype.interpolate = function interpolate(x, y, xi) {
    if (!this.aSplines[x.length]) {
      this.aSplines[x.length] = new _libs.THREE.CatmullRomCurve3([]);
      var ps = this.aSplines[x.length].points;
      for (var i = 0; i < x.length; ++i) {
        ps.push(new _libs.THREE.Vector3());
      }
    }
    var spline = this.aSplines[x.length];
    for (var _i10 = 0; _i10 < x.length; ++_i10) {
      spline.points[_i10].set(x[_i10], y[_i10], 0);
    }
    return spline.getPoint(Math.min(1, Math.max(xi, 0))).y;
  };

  SheetBlock.prototype.loadPoints = function loadPoints() {
    var x = [],
        y = [];
    var _arr = [0, 0.2877, 0.6347, 0.8174, 1.0000];
    for (var _i11 = 0; _i11 < _arr.length; _i11++) {
      var r = _arr[_i11];
      x.push(r * Math.cos(0.9 * Math.PI / 4));
      y.push(r * Math.sin(0.9 * Math.PI / 4));
    }

    var openedInterpolationIndeces = [[2, 3, 4], [2, 3, 4, 5, 6]],
        closedInterpolationIndeces = [[0, 1, 2], [0, 1, 2]],
        flatInterpolationIndeces = [[5, 4], [7, 6]],
        interpolationPoints = [{
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0.000, 0.286, 0.632, 0.815, 0.997], [0.000, 0.279, 0.623, 0.806, 0.988], [0.000, 0.126, 0.411, 0.593, 0.774], [0, 0, 0, 0, 0], x],
      y: [[0, 0, 0, 0, 0], [0.000, 0.030, 0.010, 0.002, 0.000], [0.000, 0.060, 0.017, 0.004, 0.000], [0.000, 0.259, 0.440, 0.446, 0.429], [0, 0.2877, 0.6347, 0.8174, 1.0000], y]
    }, {
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0.000, 0.286, 0.632, 0.815, 0.997], [0.000, 0.279, 0.623, 0.806, 0.988], [0.000, 0.233, 0.563, 0.746, 0.927], [0.000, 0.144, 0.433, 0.613, 0.796], [0.000, 0.070, 0.288, 0.455, 0.626], [0, 0, 0, 0, 0], x],
      y: [[0, 0, 0, 0, 0], [0.000, 0.030, 0.010, 0.002, 0.000], [0.000, 0.060, 0.017, 0.004, 0.000], [0.000, 0.168, 0.269, 0.270, 0.255], [0.000, 0.245, 0.435, 0.458, 0.460], [0.000, 0.278, 0.544, 0.614, 0.673], [0, 0.2877, 0.6347, 0.8174, 1.0000], y]
    }];

    return {
      interpolationPoints: interpolationPoints,
      openedInterpolationIndeces: openedInterpolationIndeces,
      closedInterpolationIndeces: closedInterpolationIndeces,
      flatInterpolationIndeces: flatInterpolationIndeces
    };
  };

  return SheetBlock;
}();

exports.default = SheetBlock;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.props = props;
function props() {
  var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'volume';

  // const props = {
  //   height,
  //   width,
  //   gravity,
  //   injector,
  //   cachedPages,
  //   renderInactivePages,
  //   renderWhileFlipping,
  //   pagesForPredicting,
  //   preloadPages,
  //   sheet: {
  //     startVelocity,
  //     cornerDeviation,
  //     flexibility,
  //     flexibleCorner,
  //     bending,
  //     wave,
  //     shape,
  //     widthTexels,
  //     heightTexels,
  //     color,
  //     sideTexture
  //   },
  //   cover: {
  //     ...sheet,
  //     padding,
  //     binderTexture,
  //     depth,
  //     mass
  //   },
  //   page: {
  //     ...sheet,
  //     depth,
  //     mass
  //   }
  // };

  var def = {
    height: 0.297,
    width: 0.21,
    gravity: 1,
    cachedPages: 50,
    renderInactivePages: true,
    renderInactivePagesOnMobile: true,
    renderWhileFlipping: false,
    pagesForPredicting: 5,
    preloadPages: 5,
    rtl: false,
    interactiveCorners: true,
    sheet: {
      startVelocity: 1.1,
      cornerDeviation: 0.25,
      flexibility: 10,
      flexibleCorner: 0.5,
      bending: 11,
      wave: 0.5,
      shape: 0,
      widthTexels: 5 * 210,
      heightTexels: 5 * 297,
      color: 0xFFFFFF,
      side: 'color'
    },
    cover: {
      binderTexture: '',
      depth: 0.0003,
      padding: 0,
      mass: 0.001
    },
    page: {
      depth: 0.0001,
      mass: 0.001
    },
    cssLayerProps: {
      width: 1024
    }
  },
      styles = {
    volume: def,
    flat: _extends({}, def, {
      sheet: _extends({}, def.sheet, {
        wave: 0.05,
        side: 'transparent'
      }),
      cover: _extends({}, def.cover, {
        depth: 0.00002
      }),
      page: _extends({}, def.page, {
        depth: 0.00001
      })
    }),
    'volume-paddings': _extends({}, def, {
      cover: _extends({}, def.cover, {
        padding: 0.0025
      })
    })
  };
  return styles[style] || def;
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CSS3DSprite = exports.CSS3DObject = undefined;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

_libs.THREE.CSS3DObject = function (_THREE$Object3D) {
  _inherits(CSS3DObject, _THREE$Object3D);

  function CSS3DObject() {
    var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    _classCallCheck(this, CSS3DObject);

    var _this = _possibleConstructorReturn(this, _THREE$Object3D.call(this));

    if (element) {
      _this.set(element);
    }
    return _this;
  }

  CSS3DObject.prototype.set = function set(element) {
    this.element = element;
    this.element.style.position = 'absolute';

    this.addEventListener('removed', function () {
      if (this.element.parentNode !== null) {
        this.element.parentNode.removeChild(this.element);
      }
    });
  };

  return CSS3DObject;
}(_libs.THREE.Object3D);

_libs.THREE.CSS3DSprite = function (_THREE$CSS3DObject) {
  _inherits(CSS3DSprite, _THREE$CSS3DObject);

  function CSS3DSprite(element) {
    _classCallCheck(this, CSS3DSprite);

    return _possibleConstructorReturn(this, _THREE$CSS3DObject.call(this, element));
  }

  return CSS3DSprite;
}(_libs.THREE.CSS3DObject);

_libs.THREE.CSS3DRenderer = function CSS3DRenderer() {
  _classCallCheck(this, CSS3DRenderer);

  var _width, _height;
  var _widthHalf, _heightHalf;

  var matrix = new _libs.THREE.Matrix4();

  var cache = {
    camera: { fov: 0, style: '' },
    objects: {}
  };

  var domElement = document.createElement('div');
  domElement.style.overflow = 'hidden';

  this.domElement = domElement;

  var cameraElement = document.createElement('div');

  cameraElement.style.WebkitTransformStyle = 'preserve-3d';
  cameraElement.style.MozTransformStyle = 'preserve-3d';
  cameraElement.style.transformStyle = 'preserve-3d';

  domElement.appendChild(cameraElement);

  var isIE = /Trident/i.test(navigator.userAgent);

  this.setClearColor = function () {};

  this.getSize = function () {

    return {
      width: _width,
      height: _height
    };
  };

  this.setSize = function (width, height) {

    _width = width;
    _height = height;
    _widthHalf = _width / 2;
    _heightHalf = _height / 2;

    domElement.style.width = width + 'px';
    domElement.style.height = height + 'px';

    cameraElement.style.width = width + 'px';
    cameraElement.style.height = height + 'px';
  };

  function epsilon(value) {
    return Math.abs(value) < 1e-6 ? 0 : value;
  }

  function getCameraCSSMatrix(matrix) {

    var elements = matrix.elements;

    return 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(-elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(elements[6]) + ',' + epsilon(elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(-elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(-elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';
  }

  function getObjectCSSMatrix(matrix, cameraCSSMatrix) {

    var elements = matrix.elements;
    var matrix3d = 'matrix3d(' + epsilon(elements[0]) + ',' + epsilon(elements[1]) + ',' + epsilon(elements[2]) + ',' + epsilon(elements[3]) + ',' + epsilon(-elements[4]) + ',' + epsilon(-elements[5]) + ',' + epsilon(-elements[6]) + ',' + epsilon(-elements[7]) + ',' + epsilon(elements[8]) + ',' + epsilon(elements[9]) + ',' + epsilon(elements[10]) + ',' + epsilon(elements[11]) + ',' + epsilon(elements[12]) + ',' + epsilon(elements[13]) + ',' + epsilon(elements[14]) + ',' + epsilon(elements[15]) + ')';

    if (isIE) {

      return 'translate(-50%,-50%)' + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)' + cameraCSSMatrix + matrix3d;
    }

    return 'translate(-50%,-50%)' + matrix3d;
  }

  function renderObject(object, camera, cameraCSSMatrix) {

    if (object instanceof _libs.THREE.CSS3DObject) {

      var style;

      if (object instanceof _libs.THREE.CSS3DSprite) {
        matrix.copy(camera.matrixWorldInverse);
        matrix.transpose();
        matrix.copyPosition(object.matrixWorld);
        matrix.scale(object.scale);

        matrix.elements[3] = 0;
        matrix.elements[7] = 0;
        matrix.elements[11] = 0;
        matrix.elements[15] = 1;

        style = getObjectCSSMatrix(matrix, cameraCSSMatrix);
      } else {

        style = getObjectCSSMatrix(object.matrixWorld, cameraCSSMatrix);
      }

      var element = object.element;
      var cachedStyle = cache.objects[object.id] && cache.objects[object.id].style;

      if (cachedStyle === undefined || cachedStyle !== style) {
        element.style.WebkitTransform = style;
        element.style.MozTransform = style;
        element.style.transform = style;

        cache.objects[object.id] = { style: style };
        if (isIE) {
          cache.objects[object.id].distanceToCameraSquared = getDistanceToSquared(camera, object);
        }
      }

      if (element.parentNode !== cameraElement) {
        cameraElement.appendChild(element);
      }
    }

    for (var i = 0, l = object.children.length; i < l; i++) {

      renderObject(object.children[i], camera, cameraCSSMatrix);
    }
  }

  var getDistanceToSquared = function () {

    var a = new _libs.THREE.Vector3();
    var b = new _libs.THREE.Vector3();

    return function (object1, object2) {

      a.setFromMatrixPosition(object1.matrixWorld);
      b.setFromMatrixPosition(object2.matrixWorld);

      return a.distanceToSquared(b);
    };
  }();

  function zOrder(scene) {

    var order = Object.keys(cache.objects).sort(function (a, b) {

      return cache.objects[a].distanceToCameraSquared - cache.objects[b].distanceToCameraSquared;
    });
    var zMax = order.length;

    scene.traverse(function (object) {

      var index = order.indexOf(object.id + '');

      if (index !== -1) {

        object.element.style.zIndex = zMax - index;
      }
    });
  }

  this.render = function (scene, camera) {

    var fov = camera.projectionMatrix.elements[5] * _heightHalf;

    if (cache.camera.fov !== fov) {

      domElement.style.WebkitPerspective = fov + 'px';
      domElement.style.MozPerspective = fov + 'px';
      domElement.style.perspective = fov + 'px';

      cache.camera.fov = fov;
    }

    scene.updateMatrixWorld();

    if (camera.parent === null) camera.updateMatrixWorld();

    var cameraCSSMatrix = 'translateZ(' + fov + 'px)' + getCameraCSSMatrix(camera.matrixWorldInverse);

    var style = cameraCSSMatrix + 'translate(' + _widthHalf + 'px,' + _heightHalf + 'px)';

    if (cache.camera.style !== style && !isIE) {

      cameraElement.style.WebkitTransform = style;
      cameraElement.style.MozTransform = style;
      cameraElement.style.transform = style;

      cache.camera.style = style;
    }

    renderObject(scene, camera, cameraCSSMatrix);

    if (isIE) {

      // IE10 and 11 does not support 'preserve-3d'.
      // Thus, z-order in 3D will not work.
      // We have to calc z-order manually and set CSS z-index for IE.
      // FYI: z-index can't handle object intersection
      zOrder(scene);
    }
  };
};

exports.default = _libs.THREE.CSS3DRenderer;


var _CSS3DObject = _libs.THREE.CSS3DObject,
    _CSS3DSprite = _libs.THREE.CSS3DSprite;
exports.CSS3DObject = _CSS3DObject;
exports.CSS3DSprite = _CSS3DSprite;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _CSS3DRenderer = __webpack_require__(12);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CSSLayer = function (_CSS3DObject) {
  _inherits(CSSLayer, _CSS3DObject);

  CSSLayer.init = function init(doc) {
    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 150;

    CSSLayer.delay = delay;
    CSSLayer.style = (0, _libs.$)(('<style type=text/css>\n      .css-layer {\n    \t\topacity: 1;\n    \t\ttransition: opacity ' + delay + 'ms ease-out;\n        visibility: visible;\n        overflow: hidden;\n    \t}\n    \t.css-layer.hidden {\n    \t\ttransition: opacity ' + delay + 'ms ease-in, visibility ' + delay + 'ms step-end;\n    \t\topacity: 0;\n        visibility: hidden;\n      }\n    </style>').fb3dQFilter()).appendTo(doc.head);
  };

  CSSLayer.dispose = function dispose() {
    CSSLayer.style.remove();
  };

  function CSSLayer(width, height, props) {
    _classCallCheck(this, CSSLayer);

    var _this = _possibleConstructorReturn(this, _CSS3DObject.call(this));

    _this.props = props;
    _this.jContainer = (0, _libs.$)('<div class="hidden css-layer"></div>');
    var widthPxs = props.width,
        heightPxs = height / width * widthPxs;
    _this.jContainer.width(widthPxs).height(heightPxs);
    _this.scale.x /= widthPxs / width;
    _this.scale.y /= widthPxs / width;

    _this.setData();
    _this.set(_this.jContainer[0]);
    return _this;
  }

  CSSLayer.prototype.callInternal = function callInternal(name) {
    if (this.object && this.object[name]) {
      try {
        this.object[name]();
      } catch (e) {
        console.error(e);
      }
    }
  };

  CSSLayer.prototype.dispose = function dispose() {
    this.clearInternals();
  };

  CSSLayer.prototype.clearInternals = function clearInternals() {
    this.callInternal('dispose');
    !this.css || this.css.remove();
    !this.html || this.html.remove();
  };

  CSSLayer.prototype.setData = function setData() {
    var css = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var html = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var js = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

    this.clearInternals();

    this.css = (0, _libs.$)('<style type="text/css">' + css + '</style>').appendTo(this.jContainer);
    this.html = (0, _libs.$)(html).appendTo(this.jContainer);
    var init = eval(js);
    if (init) {
      this.object = init(this.jContainer, this.props) || {};
    }
  };

  CSSLayer.prototype.pendedCall = function pendedCall(clb) {
    var _this2 = this;

    var timestamp = this.timestamp = Date.now();
    setTimeout(function () {
      if (timestamp === _this2.timestamp) {
        clb();
      }
    }, CSSLayer.delay);
  };

  CSSLayer.prototype.isHidden = function isHidden() {
    return this.jContainer.hasClass('hidden');
  };

  CSSLayer.prototype.hide = function hide() {
    var _this3 = this;

    var res = void 0;
    if (!this.isHidden()) {
      this.jContainer.addClass('hidden');
      this.callInternal('hide');
      res = new Promise(function (resolve) {
        _this3.pendedCall(function () {
          _this3.callInternal('hidden');
          resolve();
        });
      });
    } else {
      res = Promise.resolve();
    }
    return res;
  };

  CSSLayer.prototype.show = function show() {
    var _this4 = this;

    var res = void 0;
    if (this.isHidden()) {
      this.jContainer.removeClass('hidden');
      this.callInternal('show');
      res = new Promise(function (resolve) {
        _this4.pendedCall(function () {
          _this4.callInternal('shown');
          resolve();
        });
      });
    } else {
      res = Promise.resolve();
    }
    return res;
  };

  return CSSLayer;
}(_CSS3DRenderer.CSS3DObject);

exports.default = CSSLayer;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cache = function () {
  function Cache() {
    var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
    var sizeof = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Cache.countSizeof;

    _classCallCheck(this, Cache);

    this.os = new Map();
    this.sizeof = sizeof;
    this.maxSize = maxSize;
    this.size = 0;
  }

  Cache.prototype.forEach = function forEach(clb) {
    this.os.forEach(function (v, k) {
      return clb([k, v]);
    });
  };

  Cache.countSizeof = function countSizeof(value) {
    return 1;
  };

  Cache.prototype.remove = function remove(k) {
    var res = false;
    var v = this.os.get(k);
    if (!v.locked || !v.locked(k)) {
      this.size -= this.sizeof(v);
      if (v.dispose) {
        v.dispose();
      }
      this.os.delete(k);
      res = true;
    }
    return res;
  };

  Cache.prototype.freeSpace = function freeSpace() {
    var arr = [];
    for (var _iterator = this.os, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      arr.push({ timestamp: p[1].timestamp, key: p[0] });
    }
    arr.sort(function (a, b) {
      return a.timestamp - b.timestamp;
    });
    for (var i = 0; i < arr.length && this.size > 3 * this.maxSize / 4; ++i) {
      this.remove(arr[i].key);
    }
  };

  Cache.prototype.dispose = function dispose() {
    var arr = [];
    for (var _iterator2 = this.os, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var p = _ref2;

      arr.push({ v: p[1], k: p[0] });
    }
    for (var _iterator3 = arr, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var o = _ref3;

      if (o.v.dispose) {
        o.v.dispose();
      }
      this.os.delete(o.k);
    }
  };

  Cache.recursionSizeof = function recursionSizeof(value) {
    var size = 0;
    if (value) {
      ++size;
      var len = value.length;
      if (len === undefined) {
        for (var p in value) {
          if (value.hasOwnProperty(p)) {
            size += Cache.recursionSizeof(value[p]);
          }
        }
      } else {
        size += len;
      }
    }
    return size;
  };

  Cache.prototype.getTimestamp = function getTimestamp() {
    return Date.now();
  };

  Cache.prototype.get = function get(key) {
    var value = this.os.get(key);
    if (value) {
      value.timestamp = this.getTimestamp();
    }
    return value;
  };

  Cache.prototype.put = function put(key, value) {
    value.timestamp = this.getTimestamp();
    this.os.set(key, value);
    this.size += this.sizeof(value);
    if (this.size > this.maxSize) {
      this.freeSpace();
    }
    return value;
  };

  return Cache;
}();

exports.default = Cache;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Controller = function (_THREE$EventDispatche) {
  _inherits(Controller, _THREE$EventDispatche);

  function Controller() {
    _classCallCheck(this, Controller);

    return _possibleConstructorReturn(this, _THREE$EventDispatche.apply(this, arguments));
  }

  Controller.prototype.handleDefault = function handleDefault(id, e, data) {
    //console.log(id+'-'+e.type+'-'+data);
  };

  Controller.prototype.dispatchAsync = function dispatchAsync(e) {
    var _this2 = this;

    Promise.resolve().then(function () {
      return _this2.dispatchEvent(e);
    });
  };

  Controller.prototype.dispose = function dispose() {};

  return Controller;
}(_libs.THREE.EventDispatcher);

exports.default = Controller;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _EventConverter2 = __webpack_require__(7);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CustomEventConverter = function (_EventConverter) {
  _inherits(CustomEventConverter, _EventConverter);

  // custom
  // testIntersection(e, data);
  // custom.object
  // test(object);

  function CustomEventConverter(wnd, doc) {
    var customTest = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {
      return false;
    };
    var eDoc = arguments[3];

    _classCallCheck(this, CustomEventConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.eDoc = eDoc;
    _this.customTest = customTest;
    _this.customs = [];
    return _this;
  }

  CustomEventConverter.prototype.test = function test(object1, object2) {
    return object1 && object2 ? this.customTest(object1, object2) : false;
  };

  CustomEventConverter.prototype.getCallback = function getCallback(object) {
    return object.target.callback;
  };

  CustomEventConverter.prototype.addCustom = function addCustom(custom) {
    this.customs.push(custom);
  };

  CustomEventConverter.prototype.getObject = function getObject(e, data) {
    var object = void 0;
    if (data.doc === this.eDoc) {
      for (var _iterator = this.customs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var custom = _ref;

        object = custom.testIntersection(e, data);
        if (object) {
          break;
        }
      }
    }
    return object;
  };

  return CustomEventConverter;
}(_EventConverter3.default);

exports.default = CustomEventConverter;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Finder = function () {
  Finder.isDelimetr = function isDelimetr(s) {
    return s === Finder.DELIMITER;
  };

  Finder.prototype.merge = function merge() {
    var as = [],
        map = [],
        strs = this.strs;
    var p = 0;
    for (var i = 0; i < strs.length; ++i) {
      if (strs[i].length) {
        map.push({
          base: i,
          offset: p
        });
        as.push(strs[i]);
        p += strs[i].length;
        if (i < strs.length - 1 && !Finder.isDelimetr(strs[i].charAt(strs[i].length - 1)) && !Finder.isDelimetr(strs[i + 1].charAt(0))) {
          as.push(Finder.DELIMITER);
          ++p;
        }
      }
    }
    this.map = map;
    this.str = as.join('');
  };

  Finder.prototype.addHits = function addHits(p) {
    var info = this.map[_Utils2.default.lowerBound(this.map, { offset: p }, function (a, b) {
      return a.offset - b.offset;
    })];
    var chars = this.pattern.length,
        i = info.base;
    p -= info.offset;
    while (chars) {
      if (this.strs[i].length) {
        var delimeter = i < this.strs.length - 1 && !Finder.isDelimetr(this.strs[i].charAt(this.strs[i].length - 1)) && !Finder.isDelimetr(this.strs[i + 1].charAt(0)),
            length = Math.min(this.strs[i].length + (delimeter ? 1 : 0) - p, chars);
        if (p < this.strs[i].length) {
          this.hits.push({
            index: i,
            offset: p,
            length: Math.min(length, this.strs[i].length - p)
          });
        }
        chars -= length;
        ++i;
        p = 0;
      }
    }
  };

  Finder.prototype.addContext = function addContext(p) {
    var f = p,
        l = p + this.pattern.length - 1,
        dels = this.props.contextLength,
        prevDels = dels + 1;
    while (dels && prevDels - dels) {
      prevDels = dels;
      if (dels % 2) {
        for (var i = f - 2; i >= 0; --i) {
          if (Finder.isDelimetr(this.str[i]) || i === 0) {
            f = i === 0 ? 0 : i + 1;
            --dels;
            break;
          }
        }
      } else {
        for (var _i = l + 2; _i < this.str.length; ++_i) {
          if (Finder.isDelimetr(this.str[_i]) || _i === this.str.length - 1) {
            l = _i === this.str.length - 1 ? _i === this.str.length - 1 : _i - 1;
            --dels;
            break;
          }
        }
      }
    }
    this.contexts.push(this.str.substr(f, l - f + 1));
  };

  Finder.prototype.getHits = function getHits() {
    return this.hits;
  };

  Finder.prototype.getContexts = function getContexts() {
    return this.contexts;
  };

  function Finder(strs, pattern, props) {
    _classCallCheck(this, Finder);

    this.props = _extends({}, Finder.defaults, props);
    this.strs = strs;
    var data = this.merge(strs);
    this.hits = [];
    this.contexts = [];
    this.pattern = pattern.toLowerCase();
    this.lstr = this.str.toLowerCase();
    var p = 0;
    while (true) {
      p = this.lstr.indexOf(this.pattern, p);
      if (p === -1) {
        break;
      } else {
        this.addHits(p);
        this.addContext(p);
        p += this.pattern.length;
      }
    }
  }

  return Finder;
}();

Finder.DELIMITER = ' ';
Finder.defaults = {
  contextLength: 7,
  hits: true,
  contexts: true
};
exports.default = Finder;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _FullScreen2 = __webpack_require__(53);

var _FullScreen3 = _interopRequireDefault(_FullScreen2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FullScreenX = function (_FullScreen) {
	_inherits(FullScreenX, _FullScreen);

	function FullScreenX() {
		_classCallCheck(this, FullScreenX);

		return _possibleConstructorReturn(this, _FullScreen.apply(this, arguments));
	}

	FullScreenX.available = function available() {
		return true;
	};

	FullScreenX.activated = function activated() {
		return _FullScreen.available.call(this) ? _FullScreen.activated.call(this) : FullScreenX.node.hasClass(FullScreenX.classX);
	};

	FullScreenX.addEventListener = function addEventListener(element, handler) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.addEventListener.call(this, element, handler);
		} else {
			FullScreenX.handler = handler;
		}
	};

	FullScreenX.removeEventListener = function removeEventListener(element, handler) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.removeEventListener.call(this, element, handler);
		} else {
			FullScreenX.handler = FullScreenX.defHandler;
		}
	};

	FullScreenX.request = function request(element) {
		if (_FullScreen.available.call(this)) {
			_FullScreen.request.call(this, element);
		} else {
			if (!FullScreenX.node.hasClass(FullScreenX.classX)) {
				FullScreenX.node = (0, _libs.$)(element || document.body);
				FullScreenX.node.addClass(FullScreenX.classX);
				Promise.resolve().then(FullScreenX.handler);
			}
		}
	};

	FullScreenX.cancel = function cancel() {
		if (_FullScreen.available.call(this)) {
			_FullScreen.cancel.call(this);
		} else {
			if (FullScreenX.node.hasClass(FullScreenX.classX)) {
				FullScreenX.node.removeClass(FullScreenX.classX);
				FullScreenX.node = FullScreenX.defNode;
				Promise.resolve().then(FullScreenX.handler);
			}
		}
	};

	return FullScreenX;
}(_FullScreen3.default);

FullScreenX.defNode = (0, _libs.$)();
FullScreenX.node = FullScreenX.defNode;

FullScreenX.defHandler = function () {
	return undefined;
};

FullScreenX.handler = FullScreenX.defHandler;
FullScreenX.classX = 'fb3d-fullscreenx';
FullScreenX.style = (0, _libs.$)(('\n\t\t<style type="text/css">\n      .' + FullScreenX.classX + ' {\n        position: fixed !important;\n\t\t\t\tleft: 0 !important;\n        top: 0 !important;\n        width: 100% !important;\n        height: 100% !important;\n\t\t\t\tz-index: 2147483647 !important;\n\t\t\t\tmargin: 0 !important;\n\t\t\t\tbox-sizing: border-box !important;\n        background-color: #333;\n      }\n    </style>\n\t').fb3dQFilter()).appendTo('head');
exports.default = FullScreenX;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

_libs.PDFJS.GlobalWorkerOptions.workerSrc = (window.PDFJS_LOCALE ? PDFJS_LOCALE : __webpack_require__.i({"pdfJsWorker":"dist/js/3d-flip-book/js/libs/pdf.worker.js","pdfJsCMapUrl":"dist/js/3d-flip-book/cmaps/"})).pdfJsWorker;
_libs.PDFJS.cMapUrl = (window.PDFJS_LOCALE ? PDFJS_LOCALE : __webpack_require__.i({"pdfJsWorker":"dist/js/3d-flip-book/js/libs/pdf.worker.js","pdfJsCMapUrl":"dist/js/3d-flip-book/cmaps/"})).pdfJsCMapUrl;
_libs.PDFJS.cMapPacked = true;
_libs.PDFJS.disableAutoFetch = true;
_libs.PDFJS.disableStream = true;
_libs.PDFJS.imageResourcesPath = 'dist/js/3d-flip-book/images/pdfjs/';
_libs.PDFJS.externalLinkTarget = _libs.PDFJS.LinkTarget.BLANK;
// PDFJS.disableFontFace = true;

var Pdf = function () {
  function Pdf(src, loadingProgress) {
    var _this = this;

    _classCallCheck(this, Pdf);

    this.src = _Utils2.default.normalizeUrl(src);
    this.handlerQueue = [];
    this.progresData = { loaded: -1, total: 1 };
    this.loadingProgress = loadingProgress;

    this.task = _libs.PDFJS.getDocument({
      url: this.src,
      rangeChunkSize: 512 * 1024,
      cMapUrl: _libs.PDFJS.cMapUrl,
      cMapPacked: _libs.PDFJS.cMapPacked,
      disableAutoFetch: _libs.PDFJS.disableAutoFetch,
      disableStream: _libs.PDFJS.disableStream,
      imageResourcesPath: _libs.PDFJS.imageResourcesPath,
      externalLinkTarget: _libs.PDFJS.externalLinkTarget
      // disableFontFace: PDFJS.disableFontFace
    });
    this.task.onProgress = function (data) {
      if (_this.loadingProgress) {
        var cur = Math.floor(100 * data.loaded / data.total),
            old = Math.floor(100 * _this.progresData.loaded / _this.progresData.total);
        if (cur !== old) {
          cur = isNaN(cur) ? 0 : cur;
          cur = cur > 100 ? 100 : cur;
          Promise.resolve().then(function () {
            _this.loadingProgress(cur);
          });
        }
      }
      _this.progresData = data;
    };
    this.task.promise.then(function (handler) {
      if (handler.numPages > 1) {
        Promise.all([handler.getPage(1), handler.getPage(2)]).then(function (pages) {
          _this.init(handler, pages);
        });
      } else {
        _this.init(handler);
      }
    }).catch(function (e) {
      console.error(e);
      if (_this.errorHandler) {
        _this.errorHandler(e);
      }
    });
  }

  Pdf.prototype.init = function init(handler, pages) {
    this.handler = handler;
    this.doubledPages = pages ? Math.abs(2 * Pdf.getPageSize(pages[0]).width - Pdf.getPageSize(pages[1]).width) / Pdf.getPageSize(pages[0]).width < 0.05 : false;
    var done = Promise.resolve(handler);

    var _loop = function _loop() {
      if (_isArray) {
        if (_i >= _iterator.length) return 'break';
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) return 'break';
        _ref = _i.value;
      }

      var clb = _ref;

      done = done.then(function (handler) {
        clb(handler);
        return handler;
      });
    };

    for (var _iterator = this.handlerQueue.reverse(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
  };

  Pdf.prototype.getPageType = function getPageType(n) {
    return !this.doubledPages || n === 0 || n === this.getPagesNum() - 1 ? 'full' : n & 1 ? 'left' : 'right';
  };

  Pdf.prototype.getPage = function getPage(n) {
    return this.handler.getPage(this.doubledPages ? Math.ceil(n / 2) + 1 : n + 1);
  };

  Pdf.prototype.getDestination = function getDestination(dest) {
    var _this2 = this;

    var destPromise = void 0;
    if (typeof dest === 'string') {
      destPromise = this.handler.getDestination(dest);
    } else {
      destPromise = Promise.resolve(dest);
    }
    destPromise = destPromise.then(function (dest) {
      return _this2.handler.getPageIndex(dest[0]);
    }).then(function (number) {
      return _this2.doubledPages ? number < 1 ? number : 1 + 2 * (number - 1) : number;
    }).catch(function () {
      return console.error('Bad bookmark');
    });
    return destPromise;
  };

  Pdf.prototype.dispose = function dispose() {
    this.handlerQueue.splice(0, this.handlerQueue.length);
    delete this.handler;
  };

  Pdf.prototype.setLoadingProgressClb = function setLoadingProgressClb(clb) {
    this.loadingProgress = clb;
  };

  Pdf.prototype.setErrorHandler = function setErrorHandler(eh) {
    this.errorHandler = eh;
  };

  Pdf.prototype.getPagesNum = function getPagesNum() {
    return this.handler ? this.doubledPages ? 2 * (this.handler.numPages - 1) : this.handler.numPages : undefined;
  };

  Pdf.getPageSize = function getPageSize(page) {
    var x = page.view[2] - page.view[0],
        y = page.view[3] - page.view[1],
        a = page.rotate * Math.PI / 180;
    return {
      width: Math.abs(x * Math.cos(a) - y * Math.sin(a)),
      height: Math.abs(x * Math.sin(a) + y * Math.cos(a))
    };
  };

  //   if(pages>1) {
  //   handler.getPage(2).
  //   then((page)=> {
  //     const size1 = Pdf.getPageSize(page);
  //     this.props.doubledPages = 2*size0.width===size1.width;
  //     this.ready();
  //   }).
  //   catch(()=> this.ready());
  // }
  // else {

  Pdf.prototype.getHandler = function getHandler(clb) {
    if (this.handler) {
      clb(this.handler);
    } else {
      this.handlerQueue.push(clb);
    }
  };

  return Pdf;
}();

exports.default = Pdf;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ThreeEventConverterFs = function () {
  ThreeEventConverterFs.objectsTest = function objectsTest(object1, object2) {
    return object1 && object2 ? object1.object === object2.object : false;
  };

  ThreeEventConverterFs.objectsAndFacesTest = function objectsAndFacesTest(object1, object2) {
    return object1 && object2 ? object1.object === object2.object && object1.face.materialIndex === object2.face.materialIndex : false;
  };

  function ThreeEventConverterFs(visualWorld) {
    var test = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ThreeEventConverterFs.objectsAndFacesTest;

    _classCallCheck(this, ThreeEventConverterFs);

    this.visual = visualWorld;
    this.coords = new _libs.THREE.Vector2();
    this.raycaster = this.visual.raycaster;
    this.camera = this.visual.camera;
    this.threes = [];
    this.test = test;
  }

  ThreeEventConverterFs.prototype.addThree = function addThree(three) {
    this.threes.push(three);
  };

  ThreeEventConverterFs.prototype.removeThree = function removeThree(three) {
    var i = this.threes.indexOf(three);
    if (~i) {
      this.threes.splice(i, 1);
    }
  };

  ThreeEventConverterFs.prototype.getObject = function getObject(e) {
    this.setCoordsFromEvent(e);
    this.raycaster.setFromCamera(this.coords, this.camera);
    var intersects = this.raycaster.intersectObjects(this.threes);
    return intersects[0];
  };

  return ThreeEventConverterFs;
}();

exports.default = ThreeEventConverterFs;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ThreeUtils = function () {
  function ThreeUtils() {
    _classCallCheck(this, ThreeUtils);
  }

  ThreeUtils.vertices2UVs = function vertices2UVs(vertices, indeces, first, last, converClb) {
    var r = [];
    for (var i = first; i < last; ++i) {
      var vis = [indeces[i].a, indeces[i].b, indeces[i].c];
      for (var j = 0; j < vis.length; ++j) {
        if (!r[vis[j]]) {
          r[vis[j]] = converClb(vertices[vis[j]]);
        }
      }
    }
    return r;
  };

  ThreeUtils.computeFaceVertexUvs = function computeFaceVertexUvs(geometry, faces) {
    var uvs = [ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, 0, faces[0], function (p) {
      return new THREE.Vector2(p.x, 1 - p.z);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[0], faces[1], function (p) {
      return new THREE.Vector2(1 - p.x, 1 - p.z);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[1], faces[2], function (p) {
      return new THREE.Vector2(p.x, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[2], faces[3], function (p) {
      return new THREE.Vector2(1 - p.x, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[3], faces[4], function (p) {
      return new THREE.Vector2(p.z, p.y);
    }), ThreeUtils.vertices2UVs(geometry.vertices, geometry.faces, faces[4], geometry.faces.length, function (p) {
      return new THREE.Vector2(1 - p.z, p.y);
    })];

    var uvsi = 0;
    for (var i = 0; i < geometry.faces.length; ++i) {
      uvsi += faces[uvsi] === i;
      var f = geometry.faces[i];
      f.materialIndex = uvsi;
      geometry.faceVertexUvs[0][i] = [uvs[uvsi][f.a], uvs[uvsi][f.b], uvs[uvsi][f.c]];
    }
  };

  ThreeUtils.createMarker = function createMarker(p, c, size) {
    var marker = new THREE.Mesh(new THREE.SphereGeometry(size), new THREE.MeshPhongMaterial({ color: c }));
    marker.position.set(p.x, p.y, p.z);
    return marker;
  };

  ThreeUtils.findUvTris = function findUvTris(geometry, ps, first, last) {
    var res = [];
    for (var _iterator = ps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      var found = false;
      for (var i = first; i < last && !found; ++i) {
        var tri = geometry.faceVertexUvs[0][i];
        if (_BaseMathUtils2.default.isInsideConvPoly(tri, p)) {
          res.push({
            coefs: _BaseMathUtils2.default.computeInterpCoefs(tri, p),
            i: i
          });
          found = true;
        }
      }
      if (!found) {
        console.error('Bad point');
        res.push(undefined);
      }
    }
    return res;
  };

  ThreeUtils.findInternalVertices = function findInternalVertices(geometry, ps, first, last) {
    var res = {};
    for (var i = first; i < last; ++i) {
      var tri = geometry.faceVertexUvs[0][i],
          f = geometry.faces[i],
          vs = [f.a, f.b, f.c];
      for (var j = 0; j < tri.length; ++j) {
        if (res[vs[j]] === undefined && _BaseMathUtils2.default.isInsidePoly(ps, tri[j])) {
          res[vs[j]] = {
            p: tri[j],
            i: vs[j],
            n: f.vertexNormals[j]
          };
        }
      }
    }
    return Object.values(res);
  };

  return ThreeUtils;
}();

exports.default = ThreeUtils;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Controller2 = __webpack_require__(15);

var _Controller3 = _interopRequireDefault(_Controller2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var WidgetController = function (_Controller) {
  _inherits(WidgetController, _Controller);

  function WidgetController(view, name) {
    _classCallCheck(this, WidgetController);

    var _this = _possibleConstructorReturn(this, _Controller.call(this));

    _this.name = name;
    _this.view = view;
    _this.visible = false;
    return _this;
  }

  WidgetController.prototype.togle = function togle() {
    this.visible = !this.visible;
    this.fireChange();
  };

  WidgetController.prototype.hide = function hide() {
    this.visible = false;
    this.fireChange();
  };

  WidgetController.prototype.fireChange = function fireChange() {
    if (this.onChange) {
      this.onChange();
    }
    this.updateView();
  };

  WidgetController.prototype.updateView = function updateView() {
    if (this.view) {
      this.view.setState(this.name, {
        enable: true,
        visible: this.visible,
        active: false
      });
    }
  };

  return WidgetController;
}(_Controller3.default);

exports.default = WidgetController;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Target = function () {
  function Target() {
    _classCallCheck(this, Target);
  }

  Target.test = function test(object1, object2) {
    return object1.target === object2.target;
  };

  return Target;
}();

exports.default = Target;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Detector = __webpack_require__(48);

var _Detector2 = _interopRequireDefault(_Detector);

var _VisualWorld = __webpack_require__(70);

var _VisualWorld2 = _interopRequireDefault(_VisualWorld);

var _PdfLinksHandler = __webpack_require__(37);

var _PdfLinksHandler2 = _interopRequireDefault(_PdfLinksHandler);

var _Book = __webpack_require__(28);

var _Book2 = _interopRequireDefault(_Book);

var _BookView = __webpack_require__(31);

var _BookView2 = _interopRequireDefault(_BookView);

var _BookController = __webpack_require__(29);

var _BookController2 = _interopRequireDefault(_BookController);

var _PdfBookPropsBuilder = __webpack_require__(36);

var _PdfBookPropsBuilder2 = _interopRequireDefault(_PdfBookPropsBuilder);

var _ClbBookPropsBuilder = __webpack_require__(32);

var _ClbBookPropsBuilder2 = _interopRequireDefault(_ClbBookPropsBuilder);

var _LoadingController = __webpack_require__(56);

var _LoadingController2 = _interopRequireDefault(_LoadingController);

var _UserMessageController = __webpack_require__(68);

var _UserMessageController2 = _interopRequireDefault(_UserMessageController);

var _Search = __webpack_require__(61);

var _Search2 = _interopRequireDefault(_Search);

var _Bookmarks = __webpack_require__(47);

var _Bookmarks2 = _interopRequireDefault(_Bookmarks);

var _Thumbnails = __webpack_require__(66);

var _Thumbnails2 = _interopRequireDefault(_Thumbnails);

var _TocController = __webpack_require__(43);

var _TocController2 = _interopRequireDefault(_TocController);

var _ShareController = __webpack_require__(39);

var _ShareController2 = _interopRequireDefault(_ShareController);

var _BookPrinter = __webpack_require__(30);

var _BookPrinter2 = _interopRequireDefault(_BookPrinter);

var _AutoNavigator = __webpack_require__(26);

var _AutoNavigator2 = _interopRequireDefault(_AutoNavigator);

var _SoundsEnviroment = __webpack_require__(42);

var _SoundsEnviroment2 = _interopRequireDefault(_SoundsEnviroment);

var _FullScreenX = __webpack_require__(18);

var _FullScreenX2 = _interopRequireDefault(_FullScreenX);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_libs.$.fn.FlipBook = function (options) {
  var scene = {
    dispose: function dispose() {
      if (this.ready) {
        !scene.pdfLinksHandler || scene.pdfLinksHandler.dispose();
        delete scene.pdfLinksHandler;
        scene.sounds.dispose();
        delete scene.sounds;
        scene.userMessageCtrl.dispose();
        delete scene.userMessageCtrl;
        scene.tocCtrl.dispose();
        delete scene.tocCtrl;
        scene.thumbnails.dispose();
        delete scene.thumbnails;
        !scene.bookmarks || scene.bookmarks.dispose();
        delete scene.bookmarks;
        scene.shareCtrl.dispose();
        delete scene.shareCtrl;
        scene.ctrl.dispose();
        delete scene.ctrl;
        scene.bookPrinter.dispose();
        delete scene.bookPrinter;
        scene.book.dispose();
        delete scene.book;
        scene.propsBuilder.dispose();
        delete scene.propsBuilder;
        delete scene.bookBuilder;
        scene.visual.dispose();
        delete scene.visual;
        scene.view.dispose();
        delete scene.view;
        delete scene.dispose;
      } else {
        this.pendingDispose = true;
      }
    }
  };
  options = _extends({}, options);
  var parentContainer = this.length ? this[0] : (0, _libs.$)('<div>').appendTo('body');
  if (options.activateFullScreen) {
    _FullScreenX2.default.request(parentContainer);
  }
  scene.view = new _BookView2.default(parentContainer, function () {
    if (!_Detector2.default.webgl) {
      _Detector2.default.addGetWebGLMessage({ parent: scene.view.getView() });
    } else {
      scene.loadingCtrl = new _LoadingController2.default(scene.view, true, function (progress) {
        return progress === 0 ? (0, _libs.tr)('Please wait... the Application is Loading') : (0, _libs.tr)('PDF is Loading:') + ' ' + progress + '%';
      });
      scene.userMessageCtrl = new _UserMessageController2.default(scene.view);
      scene.visual = new _VisualWorld2.default(scene.view.getContainer().ownerDocument.defaultView, scene.view.getContainer().ownerDocument, scene.view.getView());
      scene.bookBuilder = function (props, sheets, pageCallback) {
        props.cssLayerProps = _extends({}, props.cssLayerProps, {
          scene: scene
        });
        if (options.propertiesCallback) {
          props = options.propertiesCallback(props);
        }
        scene.book = new _Book2.default(scene.visual, sheets, pageCallback, props);
        scene.bookPrinter = new _BookPrinter2.default(scene.visual, scene.book, (options.template || {}).printStyle);
        scene.loadingCtrl.dispose();
        delete scene.loadingCtrl;
        scene.ctrl = new _BookController2.default(scene.book, scene.view, options.controlsProps);
        scene.book.setInjector(function (w) {
          w.jQuery = w.$ = _libs.$;
          w.book = scene.book;
          w.bookCtrl = scene.ctrl;
          if (props.injector) {
            props.injector(w);
          }
        });
        scene.view.addHandler(scene.ctrl);
        scene.ctrl.setPrinter(scene.bookPrinter);
        var test = pageCallback(0);

        scene.search = new _Search2.default(scene.view.getSearchView(), scene.book.getPages());
        scene.search.onQuery = scene.book.setQuery.bind(scene.book);
        scene.book.addEventListener('searchResults', function (e) {
          scene.search.setResults(e.results, e.lastPage);
        });

        scene.thumbnails = new _Thumbnails2.default(scene.visual, scene.view.getThumbnailsView(), pageCallback, scene.book.getPages(), { kWtoH: props.width / props.height });
        scene.tocCtrl = new _TocController2.default(scene.view, scene.ctrl);
        scene.tocCtrl.setThumbnails(scene.thumbnails);
        scene.tocCtrl.setSearch(scene.search);
        scene.ctrl.setTocCtrl(scene.tocCtrl);
        scene.view.addHandler(scene.tocCtrl);

        if (test.type === 'pdf') {
          scene.pdfLinksHandler = new _PdfLinksHandler2.default(test.src, scene.ctrl, scene.visual.element);
          scene.book.addEventListener('pdfAnnotation', scene.pdfLinksHandler.handleEvent.bind(scene.pdfLinksHandler));
          test.src.getHandler(function (handler) {
            handler.getOutline().then(function (outline) {
              scene.bookmarks = new _Bookmarks2.default(scene.view.getBookmarksView(), outline);
              scene.tocCtrl.setBookmarks(scene.bookmarks, test.src);
            });
          });
          if (options.pdfLinks && options.pdfLinks.handler) {
            scene.pdfLinksHandler.setHandler(options.pdfLinks.handler);
          }
        }

        scene.sounds = new _SoundsEnviroment2.default(options.template);
        scene.ctrl.setSounds(scene.sounds);
        scene.sounds.subscribeFlips(scene.ctrl);

        scene.ready = true;
        var autoNavigator = new _AutoNavigator2.default(scene.visual, scene.ctrl, options.autoNavigation);
        scene.shareCtrl = new _ShareController2.default(scene.view, scene.ctrl, options.shareLinkBuilder ? options.shareLinkBuilder : function (page) {
          var u = void 0;
          if (new RegExp('([?&])' + autoNavigator.urlParam + '=[0-9]+').test(location.href)) {
            u = location.href.replace(new RegExp('([?&])' + autoNavigator.urlParam + '=[0-9]+'), '$1' + autoNavigator.urlParam + '=' + page);
          } else {
            u = location.href.split('#')[0] + (~location.href.indexOf('?') ? '&' : '?') + autoNavigator.urlParam + '=' + page + location.hash;
          }
          return u;
        });
        scene.ctrl.setShareCtrl(scene.shareCtrl);
        scene.view.addHandler(scene.shareCtrl);
        autoNavigator.dispose();
        if (options.ready) {
          options.ready(scene);
        }
        scene.ctrl.ready(scene);
        if (scene.pendingDispose) {
          scene.dispose();
        }
      };
      var onError = function onError(e) {
        !scene.loadingCtrl || scene.loadingCtrl.dispose();
        delete scene.loadingCtrl;
        scene.userMessageCtrl.setError(e.message);
      };
      if (options.pdf) {
        scene.propsBuilder = new _PdfBookPropsBuilder2.default(options.pdf, scene.bookBuilder, options.bookStyle);
        scene.propsBuilder.pdf.setLoadingProgressClb(scene.loadingCtrl.setProgress.bind(scene.loadingCtrl));
        scene.propsBuilder.pdf.setErrorHandler(options.error || onError);
      } else if (options.pageCallback) {
        if (options.onPageCallbackError) {
          options.onPageCallbackError.push(options.error || onError);
        }
        scene.propsBuilder = new _ClbBookPropsBuilder2.default(scene.visual, options.pageCallback, options.pages, scene.bookBuilder, options.bookStyle);
      } else {
        scene.propsBuilder = new _ClbBookPropsBuilder2.default(scene.visual, _Book2.default.pageCallback, 6, scene.bookBuilder, options.bookStyle);
      }
    }
  }, options.template);
  return scene;
};

(0, _libs.$)(function () {
  var containers = (0, _libs.$)('.flip-book-container');
  for (var i = 0; i < containers.length; ++i) {
    var jContainer = (0, _libs.$)(containers[i]),
        src = jContainer.attr('src');
    if (!!src) {
      jContainer.FlipBook({ pdf: src });
    }
  }
});

window.jQuery = window.$ = _libs.$;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (!Array.prototype.fill) {
  Array.prototype.fill = function (value) {

    // Шаги 1-2.
    if (this == null) {
      throw new TypeError('this is null or not defined');
    }

    var O = Object(this);

    // Шаги 3-5.
    var len = O.length >>> 0;

    // Шаги 6-7.
    var start = arguments[1];
    var relativeStart = start >> 0;

    // Шаг 8.
    var k = relativeStart < 0 ? Math.max(len + relativeStart, 0) : Math.min(relativeStart, len);

    // Шаги 9-10.
    var end = arguments[2];
    var relativeEnd = end === undefined ? len : end >> 0;

    // Шаг 11.
    var final = relativeEnd < 0 ? Math.max(len + relativeEnd, 0) : Math.min(relativeEnd, len);

    // Шаг 12.
    while (k < final) {
      O[k] = value;
      k++;
    }

    // Шаг 13.
    return O;
  };
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function value(predicate) {
      'use strict';

      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }
      var list = Object(this);
      var length = list.length >>> 0;
      var thisArg = arguments[1];
      var value;

      for (var i = 0; i < length; i++) {
        value = list[i];
        if (predicate.call(thisArg, value, i, list)) {
          return value;
        }
      }
      return undefined;
    }
  });
}

if (!Array.prototype.findIndex) {
  Array.prototype.findIndex = function (predicate) {
    if (this == null) {
      throw new TypeError('Array.prototype.findIndex called on null or undefined');
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function');
    }
    var list = Object(this);
    var length = list.length >>> 0;
    var thisArg = arguments[1];
    var value;

    for (var i = 0; i < length; i++) {
      value = list[i];
      if (predicate.call(thisArg, value, i, list)) {
        return i;
      }
    }
    return -1;
  };
}

if (!Object.values) {
  Object.values = function values(O) {
    return Object.keys(O).map(function (name) {
      return O[name];
    }) || [];
  };
}

if (!RegExp.escape) {
  RegExp.escape = function (s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };
}

if (!String.prototype.replaceAll) {
  String.prototype.replaceAll = function (search, replace) {
    return this.replace(new RegExp(RegExp.escape(search), 'g'), replace);
  };
}

if (!String.prototype.fb3dQFilter) {
  String.prototype.fb3dQFilter = function () {
    return this.replace(/(\n|\t|  )/g, '');
  };
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AutoNavigator = function () {
  function AutoNavigator(context, bookCtrl) {
    var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, AutoNavigator);

    props = _extends({}, props, {
      urlParam: props.urlParam || 'fb3d-page',
      navigates: props.navigates === undefined ? 1 : props.navigates,
      pageN: props.pageN || 0
    });
    this.props = props;
    this.context = context;
    this.bookCtrl = bookCtrl;
    this.urlParam = props.urlParam;
    this.pageN = props.pageN;
    this.wnd = context.wnd;

    this.wnd.fb3d = _extends({}, this.wnd.fb3d);
    this.wnd.fb3d.navigator = _extends({}, this.wnd.fb3d.navigator);
    this.navigator = this.wnd.fb3d.navigator[this.urlParam] = _extends({}, this.wnd.fb3d.navigator[this.urlParam]);
    this.navigator.instances = (this.navigator.instances || 0) + 1;

    if (this.navigator.instances <= this.props.navigates) {
      this.bookCtrl.goToPage(this.getPageNumber());
    }
  }

  AutoNavigator.prototype.dispose = function dispose() {};

  AutoNavigator.prototype.getParameterByName = function getParameterByName(name, url) {
    if (!url) {
      url = window.location.href;
    }
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  };

  AutoNavigator.prototype.getPageNumber = function getPageNumber() {
    var number = parseInt(this.pageN);
    if (isNaN(number) || number === 0) {
      number = this.getParameterByName(this.urlParam);
      number = parseInt(number);
      if (isNaN(number)) {
        number = 1;
      }
    }
    return number - 1;
  };

  return AutoNavigator;
}();

exports.default = AutoNavigator;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Binder = function () {
  function Binder(visual, p) {
    var _this = this;

    var hidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, Binder);

    this.visual = visual;
    this.p = _extends({}, p, {
      backSize: 2 * p.cover.depth + p.sheets * p.page.depth
    });
    this.OZ = new _libs.THREE.Vector3(0, 0, 1);

    this.backG = new _libs.THREE.BoxGeometry(p.cover.depth, this.p.backSize, p.cover.height);

    var color = this.p.cover.side === 'color' ? { color: p.cover.color } : {
      color: p.cover.color,
      opacity: 0,
      transparent: true
    };

    this.materials = [new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color), new _libs.THREE.MeshPhongMaterial(color)];

    var backM = new _libs.THREE.Mesh(this.backG, this.materials);

    if (p.cover.binderTexture !== '') {
      this.visual.textureLoader.load(p.cover.binderTexture, function (texture) {
        _this.materials[1].color.setHex(0xFFFFFF);
        _this.materials[1].map = texture;
        texture.minFilter = _libs.THREE.LinearFilter;
        texture.needsUpdate = true;
        _this.materials[1].needsUpdate = true;
      });
    }

    this.three = new _libs.THREE.Object3D();
    this.back = new _libs.THREE.Object3D();
    this.backRT = new _libs.THREE.Object3D();
    this.backRR = new _libs.THREE.Object3D();
    this.backLT = new _libs.THREE.Object3D();
    this.backLR = new _libs.THREE.Object3D();
    this.leftPivot = new _libs.THREE.Object3D();
    this.rightPivot = new _libs.THREE.Object3D();

    if (!hidden) {
      this.back.add(backM);
    }
    this.back.add(this.leftPivot);
    this.back.add(this.rightPivot);
    this.backRT.add(this.back);
    this.backRR.add(this.backRT);
    this.backLT.add(this.backRR);
    this.backLR.add(this.backLT);
    this.three.add(this.backLR);
  }

  Binder.prototype.dispose = function dispose() {
    for (var _iterator = this.materials, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var m = _ref;

      if (m.map) {
        m.map = null;
        m.needsUpdate = true;
      }
      m.dispose();
    }
    delete this.materials;
    this.backG.dispose();
  };

  Binder.prototype.set = function set(angle) {
    var right = void 0,
        left = void 0;
    if (angle > Math.PI / 2) {
      right = Math.PI / 2;
      left = angle - Math.PI / 2;
    } else {
      right = angle;
      left = 0;
    }
    var p = this.p,
        tr1 = { x: -0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
    this.backRT.position.set(tr1.x, tr1.y, 0);
    this.backRR.position.set(-tr1.x, -tr1.y, 0);
    this.backRR.quaternion.setFromAxisAngle(this.OZ, right);

    var tr2 = { x: p.backSize - 2 * p.cover.depth - 0.5 * p.cover.depth, y: 0.5 * p.backSize - p.cover.depth };
    this.backLT.position.set(tr2.x, tr2.y, 0);
    this.backLR.position.set(-tr2.x, -tr2.y, 0);
    this.backLR.quaternion.setFromAxisAngle(this.OZ, left);
  };

  Binder.prototype.setLeft = function setLeft(angle) {
    var PI = Math.PI;
    this.leftPivot.position.set(_MathUtils2.default.interpolateLinear([-PI, -PI / 2], [0, this.p.cover.depth], angle), 0.5 * this.p.backSize - 0.5 * this.p.cover.depth, 0);
    this.leftPivot.quaternion.setFromAxisAngle(this.OZ, angle);
  };

  Binder.prototype.setRight = function setRight(angle) {
    var PI = Math.PI;
    this.rightPivot.position.set(_MathUtils2.default.interpolateLinear([-PI / 2, 0], [this.p.cover.depth, 0], angle), -0.5 * this.p.backSize + 0.5 * this.p.cover.depth, 0);
    this.rightPivot.quaternion.setFromAxisAngle(this.OZ, angle);
  };

  Binder.prototype.joinLeftCover = function joinLeftCover(cover) {
    cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
    this.leftPivot.add(cover.three);
  };

  Binder.prototype.disconnectLeftCover = function disconnectLeftCover(cover) {
    this.leftPivot.remove(cover.three);
  };

  Binder.prototype.joinRightCover = function joinRightCover(cover) {
    cover.three.position.set(0, -0.5 * this.p.cover.depth, 0);
    this.rightPivot.add(cover.three);
  };

  Binder.prototype.disconnectRightCover = function disconnectRightCover(cover) {
    this.rightPivot.remove(cover.three);
  };

  return Binder;
}();

exports.default = Binder;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _book = __webpack_require__(11);

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

var _Binder = __webpack_require__(27);

var _Binder2 = _interopRequireDefault(_Binder);

var _Cover = __webpack_require__(33);

var _Cover2 = _interopRequireDefault(_Cover);

var _SheetBlock = __webpack_require__(10);

var _SheetBlock2 = _interopRequireDefault(_SheetBlock);

var _SheetPhysics = __webpack_require__(41);

var _SheetPhysics2 = _interopRequireDefault(_SheetPhysics);

var _PageManager = __webpack_require__(35);

var _PageManager2 = _interopRequireDefault(_PageManager);

var _CSSLayer = __webpack_require__(13);

var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

var _CssLayersManager = __webpack_require__(34);

var _CssLayersManager2 = _interopRequireDefault(_CssLayersManager);

var _SearchEngine = __webpack_require__(38);

var _SearchEngine2 = _interopRequireDefault(_SearchEngine);

var _CustomEventConverter = __webpack_require__(16);

var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

var _CircleTarget = __webpack_require__(72);

var _CircleTarget2 = _interopRequireDefault(_CircleTarget);

var _YouTubeApi = __webpack_require__(71);

var _YouTubeApi2 = _interopRequireDefault(_YouTubeApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Book = function (_THREE$EventDispatche) {
  _inherits(Book, _THREE$EventDispatche);

  // pageCallback samples

  // (n)=> ({
  //   type: 'image',
  //   src: 'sample.png',
  //   interactive: false
  // });
  //
  // (n)=> ({
  //   type: 'html',
  //   src: 'sample.html',
  //   interactive: true
  // });
  //
  // const pdf = new Pdf('sample.pdf');
  // (n)=> ({
  //   type: 'pdf',
  //   src: pdf,
  //   interactive: false
  // });

  function Book(visual, sheets, pageCallback, props) {
    _classCallCheck(this, Book);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.cssFs = {
      play: function play(player) {
        if (player.play) {
          player.fb3dNoPlay = false;
          (player.play() || { catch: function _catch() {
              return undefined;
            } }).catch(function (e) {
            if (!player.fb3dNoPlay && e.name === 'NotAllowedError') {
              _this.pendingPlayers.push(player);
              _this.dispatchEvent({
                type: 'pendingPlayers'
              });
            }
          });
        } else if ((0, _libs.$)(player).hasClass('youtube')) {
          var p = player.player;
          player.fb3dNoPlay = false;
          if (p && p.playVideo) {
            p.playVideo();
          } else {
            setTimeout(function () {
              if (!player.fb3dNoPlay) {
                _this.cssFs.play(player);
              }
            }, 200);
          }
        }
      },
      pause: function pause(player) {
        if (player.pause) {
          player.fb3dNoPlay = true;
          player.pause();
        } else if ((0, _libs.$)(player).hasClass('youtube')) {
          var p = player.player;
          player.fb3dNoPlay = true;
          if (p && p.pauseVideo) {
            p.pauseVideo();
          }
        }
      }
    };

    _this.visual = visual;
    _this.mouseController = true;
    _this.p = _extends({}, _this.prepareProps(props), {
      sheets: sheets,
      pageCallback: pageCallback,
      zoom: 1,
      singlePage: false,
      autoResolution: {
        enable: false,
        k: 1.5
      }
    });
    _this.userDirection = {
      lastTopPage: 0,
      direction: 1
    };
    _this.pageManager = new _PageManager2.default(visual, _this, _this.p);
    _CSSLayer2.default.init(visual.doc);
    _this.layerManager = new _CssLayersManager2.default(_this);
    _this.searchEngine = new _SearchEngine2.default(pageCallback, 2 * (sheets + 2));
    _this.searchEngine.onPageHitsChanged = function (page, query) {
      _this.pageManager.refreshPageQuery(page, query);
      _this.dispatchEvent({
        type: 'searchResults',
        results: _this.searchEngine.results,
        lastPage: page,
        query: query
      });
    };

    _this.three = new _libs.THREE.Object3D();

    _this.binder = new _Binder2.default(visual, _this.p, _this.getPages() < 3);
    _this.three.add(_this.binder.three);

    var coverP = {
      left: _this.p.cover,
      right: _this.p.cover
    };
    _this.enableMouse(_this.p.interactiveCorners);
    if (_this.getPages() === 2) {
      _this.enableMouse(false);
      coverP[_this.p.rtl ? 'left' : 'right'] = _extends({}, _this.p.cover, {
        width: 1e-6,
        height: 1e-6
      });
    }
    _this.leftCover = new _Cover2.default(visual, _extends({}, _this.p, { cover: coverP.left, setTexture: _this.setLeftCoverTexture.bind(_this) }), Math.PI / 2, 'opened');
    _this.binder.joinLeftCover(_this.leftCover);
    _this.subscribeSheetBlock(_this.leftCover, 0);
    _this.rightCover = new _Cover2.default(visual, _extends({}, _this.p, { cover: coverP.right, setTexture: _this.setRightCoverTexture.bind(_this) }), 0, 'closed');
    _this.binder.joinRightCover(_this.rightCover);
    _this.subscribeSheetBlock(_this.rightCover, 2 * (_this.p.sheets + 1));

    _this.threeSheetBlocks = new _libs.THREE.Object3D();
    _this.three.add(_this.threeSheetBlocks);
    _this.threeSheetBlocks.position.set(0.5 * _this.p.cover.depth - 0.5 * sheets * _this.p.page.depth, -0.5 * sheets * _this.p.page.depth, 0);

    _this.sheetBlocks = [];
    if (sheets > 0) {
      _this.addSheetBlock(0, new _SheetBlock2.default(visual, _extends({}, _this.p, { setTexture: _this.setPageTexture.bind(_this) }), 0, sheets, 0, 'closed'));
    }

    _this.set(Math.PI / 2);
    _this.openedBox = new _libs.THREE.Box3().setFromObject(_this.leftCover.three);
    _this.openedBox.union(new _libs.THREE.Box3().setFromObject(_this.rightCover.three));

    _this.angle = _this.p.rtl ? Math.PI : 0;
    _this.closedAngle = 0;
    _this.set(_this.angle, 0);
    _this.lastMousePos = {
      t: 0
    };

    _this.pendingPlayers = [];

    _this.three.position.set(-0.5 * _this.p.cover.depth + 0.5 * sheets * _this.p.page.depth, 0, 0);
    _this.sheetPhysics = new _SheetPhysics2.default(_this.p.page.width / _this.p.scale, _this.p.gravity, _this.p.page.cornerDeviation);

    _this.binds = {
      update: _this.update.bind(_this),
      lastMousePos: function lastMousePos(e) {
        _this.lastMousePos = _extends({}, _this.lastMousePos, {
          pageX: e.pageX,
          pageY: e.pageY
        });
      }
    };
    _this.visual.addRenderCallback(_this.binds.update);
    (0, _libs.$)(_this.visual.element).on('mousemove', _this.binds.lastMousePos);

    _this.binds.onPickCallback = _this.onPickCallback.bind(_this);
    _this.visual.drag.onPickCallback = _this.binds.onPickCallback;
    _this.binds.onDragCallback = _this.onDragCallback.bind(_this);
    _this.visual.drag.onDragCallback = _this.binds.onDragCallback;
    _this.binds.onReleaseCallback = _this.onReleaseCallback.bind(_this);
    _this.visual.drag.onReleaseCallback = _this.binds.onReleaseCallback;

    _this.dragAngle = 0.05;
    _this.tmp = {
      boxs: [new _libs.THREE.Box3(), new _libs.THREE.Box3()]
    };

    _this.visual.addObject(_this.three);
    _this.visual.addEventListener('resize', _this.pageManager.refreshZoom.bind(_this.pageManager));

    setTimeout(function () {
      if (!_this.isProcessing()) {
        _this.notifyBeforeAnimation();
        _this.notifyAfterAnimation();
      }
    }, 100);

    _this.updateThree();
    return _this;
  }

  Book.prototype.dispose = function dispose() {
    this.visual.removeObject(this.three);
    this.sheetPhysics.dispose();
    delete this.visual.drag.onPickCallback;
    delete this.visual.drag.onDragCallback;
    delete this.visual.drag.onReleaseCallback;
    (0, _libs.$)(this.visual.element).off('mousemove', this.binds.lastMousePos);
    this.visual.removeRenderCallback(this.binds.update);
    this.removeSheetBlocks(0, this.sheetBlocks.length);
    this.binder.disconnectLeftCover(this.leftCover);
    this.removeSheetBlock(this.leftCover);
    this.binder.disconnectRightCover(this.rightCover);
    this.removeSheetBlock(this.rightCover);
    this.binder.dispose();
    this.layerManager.dispose();
    _CSSLayer2.default.dispose();
    this.pageManager.dispose();
  };

  // publics {

  Book.prototype.hasPendingPlayers = function hasPendingPlayers() {
    return this.pendingPlayers.length > 0;
  };

  Book.prototype.resolvePendingPlayers = function resolvePendingPlayers() {
    for (var _iterator = this.pendingPlayers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var p = _ref;

      p.play();
    }
    this.pendingPlayers = [];
    this.dispatchEvent({
      type: 'pendingPlayers'
    });
  };

  Book.prototype.updateThree = function updateThree() {
    this.three.userData.needsUpdate = true;
  };

  Book.prototype.setAutoResolution = function setAutoResolution(enable) {
    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.5;

    this.p.autoResolution = _extends({}, this.p.autoResolution, {
      enable: enable,
      k: k
    });
  };

  Book.prototype.setZoom = function setZoom(zoom, singlePage) {
    if (Math.abs(this.p.zoom - zoom) > 1e-3 || singlePage !== this.p.singlePage) {
      this.p.zoom = zoom;
      this.p.singlePage = singlePage;
      this.pageManager.refreshZoom();
    }
  };

  Book.prototype.getPageCallback = function getPageCallback() {
    return this.p.pageCallback;
  };

  Book.prototype.setQuery = function setQuery(query) {
    this.searchEngine.setQuery(query);
  };

  Book.prototype.isProcessing = function isProcessing() {
    return this.sheetPhysics.getSize() !== 0;
  };

  Book.prototype.getPages = function getPages() {
    return this.p.pages;
  };

  Book.prototype.getBookPages = function getBookPages() {
    return 4 + 2 * this.p.sheets;
  };

  Book.prototype.setFlipProgressClb = function setFlipProgressClb(clb) {
    this.p.flipProgressClb = clb;
  };

  Book.prototype.setInjector = function setInjector(injector) {
    this.p.injector = injector;
  };

  Book.prototype.isActivePage = function isActivePage(n) {
    var res = true;
    if (n > 1 && n < this.getBookPages() - 2) {
      for (var _iterator2 = this.sheetBlocks, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var b = _ref2;

        if (n - 2 > 2 * b.p.first && n - 2 < 2 * b.p.last - 1) {
          res = false;
          break;
        }
      }
    }
    return res;
  };

  Book.prototype.getBlockByPage = function getBlockByPage(n) {
    var block = void 0;
    if (n < 2) {
      block = this.leftCover;
    } else if (n < 2 * (this.p.sheets + 1)) {
      for (var _iterator3 = this.sheetBlocks, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var b = _ref3;

        if (n - 2 >= 2 * b.p.first && n - 2 < 2 * b.p.last) {
          block = b;
          break;
        }
      }
    } else {
      block = this.rightCover;
    }
    return block;
  };

  Book.prototype.getBlockPages = function getBlockPages(block) {
    var range = void 0;
    switch (block) {
      case this.leftCover:
        {
          range = [0, 1];
          break;
        }
      case this.rightCover:
        {
          range = [2 * (this.p.sheets + 1), 2 * (this.p.sheets + 1) + 1];
          break;
        }
      default:
        {
          range = block ? [2 * (block.p.first + 1), 2 * (block.p.last + 1) - 1] : undefined;
        }
    }
    return range;
  };

  Book.prototype.getPage = function getPage() {
    var PI = Math.PI;
    var p = void 0;
    if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
      for (var _iterator4 = this.sheetBlocks, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var block = _ref4;

        if (block.angle <= PI / 2) {
          p = this.getBlockPages(block)[0] - 1;
          break;
        }
      }
      if (!p) {
        p = this.getBookPages() - 3;
      }
    } else if (this.angle < PI / 2) {
      p = 0;
    } else if (this.angle > 3 * PI / 2) {
      p = 1;
    } else if (this.angle < PI) {
      p = this.getBookPages() - 3;
    } else if (this.angle >= PI) {
      p = this.getBookPages() - 1;
    }
    return p;
  };

  Book.prototype.getTopPages = function getTopPages() {
    var p = this.getPage();
    return p === 0 || p === this.getBookPages() - 1 ? [p] : [p, p + 1];
  };

  Book.prototype.getPageState = function getPageState(n) {
    return this.pageManager.getPageState(n);
  };

  Book.prototype.enableLoadingAnimation = function enableLoadingAnimation(enable) {
    this.pageManager.enableLoadingAnimation(enable);
  };

  Book.prototype.getLeftFlipping = function getLeftFlipping() {
    var block = void 0;
    var left = this.sheetBlocks[0],
        PI = Math.PI;
    if (this.angle === PI) {
      if (this.getPages() > 1) {
        block = this.rightCover;
      }
    } else {
      if (left && left.state === 'closed' && left.angle > PI / 2) {
        block = left;
      } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
        if (!this.p.rtl || this.getPages() === this.getBookPages()) {
          block = this.leftCover;
        }
      }
    }
    return block;
  };

  Book.prototype.getRightFlipping = function getRightFlipping() {
    var block = void 0;
    var right = this.sheetBlocks[this.sheetBlocks.length - 1],
        PI = Math.PI;
    if (this.angle === 0) {
      if (this.getPages() > 1) {
        block = this.leftCover;
      }
    } else {
      if (right && right.state === 'closed' && right.angle <= PI / 2) {
        block = right;
      } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
        if (this.p.rtl || this.getPages() === this.getBookPages()) {
          block = this.rightCover;
        }
      }
    }
    return block;
  };

  Book.prototype.getClosedBlockAngle = function getClosedBlockAngle(angle) {
    var closedAngle = void 0,
        PI = Math.PI;

    if (this.leftCover.physicId) {
      var test = void 0;
      try {
        test = Math.abs(this.sheetPhysics.getParametr(this.leftCover.physicId, 'angle') - angle);
      } catch (e) {
        test = 0;
      }
      closedAngle = angle > PI / 2 || test > PI / 6 ? PI / 2 : this.closedAngle;
    } else if (this.rightCover.physicId) {
      var _test = void 0;
      try {
        _test = Math.abs(this.sheetPhysics.getParametr(this.rightCover.physicId, 'angle') - angle);
      } catch (e) {
        _test = 0;
      }
      closedAngle = angle < PI / 2 || _test > PI / 6 ? PI / 2 + 1e-7 : this.closedAngle;
    } else {
      closedAngle = PI / 2 + (angle !== 0) * 1e-7;
    }

    return {
      openedAngle: angle,
      closedAngle: closedAngle,
      binderTurn: this.closedAngle
    };
  };

  Book.prototype.flipLeft = function flipLeft() {
    var _this2 = this;

    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var progressClb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

    var block = void 0,
        res = void 0;
    if (this.sheetPhysics.getSize() < 25) {
      var left = this.sheetBlocks[0],
          PI = Math.PI;
      if (this.angle === PI) {
        res = this.connectPhysics(block = this.rightCover, this.p.cover.mass, PI, -this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
          return _this2.set(3 * PI / 2 - angle / 2, height);
        }, function (angle, height) {
          _this2.set(3 * PI / 2 - angle / 2, 0);
          _this2.setSheetBlocks(angle ? PI : PI / 2 + 1e-7, 'closed');
        }, progressClb);
      } else {
        if (left && left.state === 'closed' && left.angle > PI / 2) {
          block = size < left.getSize() ? this.splitSheetBlock(0, left.getSize() - size)[1] : left;
          res = this.connectPhysics(block, this.p.page.mass * block.getSize(), PI, -this.p.page.startVelocity, this.p.page.flexibility, 0, function (angle, height) {
            return block.set(_this2.getClosedBlockAngle(angle), 'opened', height);
          }, Book.finishAnimationClb.bind({ book: this, block: block }), progressClb);
        } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
          res = this.connectPhysics(block = this.leftCover, this.p.cover.mass, PI, -this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
            _this2.set(2 * PI - angle / 2, height);
            if (angle > PI / 2) {
              _this2.setSheetBlocks(angle ? PI / 2 : 0, 'closed');
            }
          }, function (angle, height) {
            return _this2.set(angle === 0 ? 0 : 2 * PI - angle / 2, 0);
          }, progressClb);
        }
      }
    }
    return res;
  };

  Book.prototype.flipRight = function flipRight() {
    var _this3 = this;

    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var progressClb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.p.flipProgressClb;

    var block = void 0,
        res = void 0;
    if (this.sheetPhysics.getSize() < 25) {
      var right = this.sheetBlocks[this.sheetBlocks.length - 1],
          PI = Math.PI;
      if (this.angle === 0) {
        res = this.connectPhysics(block = this.leftCover, this.p.cover.mass, 0, this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
          return _this3.set(angle / 2, height);
        }, function (angle, height) {
          _this3.set(angle / 2, 0);
          _this3.setSheetBlocks(angle ? PI / 2 : 0, 'closed');
        }, progressClb);
      } else {
        if (right && right.state === 'closed' && right.angle <= PI / 2) {
          block = size < right.getSize() ? this.splitSheetBlock(this.sheetBlocks.length - 1, size)[0] : right;
          res = this.connectPhysics(block, this.p.page.mass * block.getSize(), 0, this.p.page.startVelocity, this.p.page.flexibility, 0, function (angle, height) {
            return block.set(_this3.getClosedBlockAngle(angle), 'opened', height);
          }, Book.finishAnimationClb.bind({ book: this, block: block }), progressClb);
        } else if (this.angle === PI / 2 || this.angle === 3 * PI / 2) {
          res = this.connectPhysics(block = this.rightCover, this.p.cover.mass, 0, this.p.cover.startVelocity, this.p.cover.flexibility, 0, function (angle, height) {
            _this3.set(PI / 2 + angle / 2, height);
            if (angle < PI / 2) {
              _this3.setSheetBlocks(PI / 2 + 1e-7, 'closed');
            }
          }, function (angle, height) {
            return _this3.set(PI / 2 + angle / 2, 0);
          }, progressClb);
        }
      }
    }
    return res;
  };

  // }

  Book.prototype.clearHoverInfo = function clearHoverInfo() {
    this.pageManager.turnOnEvents();
    delete this.hoverInfo.block.force;
    delete this.hoverInfo.block.cornerForce;
    delete this.hoverInfo;
  };

  Book.prototype.xSegment = function xSegment() {
    var boxs = this.tmp.boxs,
        res = {};
    if (this.leftCover.physicId) {
      boxs[0].setFromObject(this.rightCover.three);
      res.min = -(res.max = boxs[0].max.x);
    } else if (this.rightCover.physicId) {
      boxs[0].setFromObject(this.leftCover.three);
      res.max = -(res.min = boxs[0].min.x);
    } else {
      boxs[0].setFromObject(this.leftCover.three);
      boxs[1].setFromObject(this.rightCover.three);
      boxs[0].union(boxs[1]);
      res.min = boxs[0].min.x;
      res.max = boxs[0].max.x;
    }
    return res;
  };

  Book.prototype.computeTarget = function computeTarget(point) {
    var x = point.x,
        y = point.y,
        seg = this.xSegment(),
        angle = void 0;

    angle = (seg.max - x) / (seg.max - seg.min) * Math.PI;
    // angle = Math.acos(x/Math.sqrt(x*x+y*y));
    return Math.max(this.dragAngle, Math.min(Math.PI - this.dragAngle, angle));
  };

  Book.prototype.onPickCallback = function onPickCallback(object) {
    var res = false;
    var block = object.object.userData.self,
        p = _extends({}, object.uv),
        i = object.face.materialIndex;
    if (i < 2) {
      p.x = i === 0 ? p.x : 1 - p.x;
      if (block.cornerTarget.testIntersection(null, p) && block.physicId) {
        if (this.hoverInfo) {
          this.clearHoverInfo();
        }
        block.force = _SheetPhysics2.default.dragForceClb;
        block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(object.point));
        this.dragInfo = {
          object: object,
          block: block
        };
        res = true;
        this.pageManager.turnOffEvents();
      }
    }
    return res;
  };

  Book.prototype.onDragCallback = function onDragCallback(point) {
    var block = this.dragInfo.block,
        p = block.getProps();
    block.force = _SheetPhysics2.default.dragForceClb;
    block.cornerForce = _SheetPhysics2.default.getDragCornerForceClb(this.computeTarget(point));
    return true;
  };

  Book.prototype.onReleaseCallback = function onReleaseCallback() {
    delete this.dragInfo.block.force;
    delete this.dragInfo.block.cornerForce;
    delete this.dragInfo;
    this.pageManager.turnOnEvents();
  };

  Book.prototype.getFlipping = function getFlipping(i) {
    return i ? this.getLeftFlipping() : this.getRightFlipping();
  };

  Book.prototype.flip = function flip(i) {
    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    return i ? this.flipLeft(size) : this.flipRight(size);
  };

  Book.prototype.enableMouse = function enableMouse(enable) {
    this.mouseController = enable;
  };

  Book.prototype.cornerCallback = function cornerCallback(e, data) {
    var _this4 = this;

    if (this.mouseController) {
      var _data$data = data.data,
          i = _data$data.i,
          n = _data$data.n;

      if (e.type === 'mouseover') {
        if (this.hoverInfo && this.hoverInfo.pendings !== undefined) {
          ++this.hoverInfo.pendings;
        } else {
          if (this.hoverInfo) {
            console.warn('Wrong state: element is already hover');
            if (this.hoverInfo.n !== n) {
              this.clearHoverInfo();
            }
          }
          if (!this.hoverInfo && !this.dragInfo) {
            var res = Promise.resolve(undefined);
            var hoverAngle = 0.02,
                hover = this.getBlockByPage(n),
                possible = this.getFlipping(i);
            if (n > 1 && n < 2 * (this.p.sheets + 1) && hover.physicId && (hover.angle < hoverAngle || hover.angle > Math.PI - hoverAngle)) {
              res = Promise.resolve(hover);
            } else if (hover === possible) {
              var sheetBlocks = [this.leftCover].concat(this.sheetBlocks, [this.rightCover]);
              var j = sheetBlocks.indexOf(hover),
                  nextBlock = ~j ? sheetBlocks[j + 2 * i - 1] : undefined;
              if (!nextBlock || !nextBlock.physicId || nextBlock.angle > hoverAngle && nextBlock.angle < Math.PI - hoverAngle) {
                res = this.flip(i, 1).then(function (block) {
                  if (!block) {
                    delete _this4.hoverInfo;
                  } else {
                    _this4.sheetPhysics.setParametr(block.physicId, 'velocity', 0);
                  }
                  return block;
                });
                this.hoverInfo = {
                  pendings: 1
                };
              }
            }
            res.then(function (block) {
              if (_this4.hoverInfo && _this4.hoverInfo.pendings < 1) {
                block = undefined;
                delete _this4.hoverInfo;
              }
              if (block) {
                _this4.pageManager.turnOffEvents();
                var p = block.getProps();
                block.force = _this4.sheetPhysics.getTargetForceClb(p.mass * block.getSize(), i ? Math.PI - hoverAngle : hoverAngle);
                block.cornerForce = function () {
                  return (i ? -1 : 1) * _SheetPhysics2.default.hoverCornerForceClb();
                };
                _this4.sheetPhysics.setParametr(block.physicId, 'angle', i ? Math.PI - 0.5 * hoverAngle : 0.5 * hoverAngle);
                _this4.hoverInfo = {
                  n: n,
                  block: block
                };
                _this4.update(1 / 30);
              }
            });
          }
        }
      } else if (this.hoverInfo && e.type === 'mouseout') {
        if (this.hoverInfo.pendings !== undefined) {
          --this.hoverInfo.pendings;
        } else if (n === this.hoverInfo.n) {
          this.clearHoverInfo();
        }
      } else if (e.type === 'mousedown') {
        this.cornerClickData = {
          x: e.pageX,
          y: e.pageY
        };
      } else if (e.type === 'click') {
        if (Math.sqrt(Math.pow(this.cornerClickData.x - e.pageX, 2) + Math.pow(this.cornerClickData.y - e.pageY, 2)) < 5) {
          var _hover = this.getBlockByPage(n);
          if (_hover.physicId) {
            var id = _hover.physicId,
                props = _hover.getProps();
            this.sheetPhysics.setParametr(id, 'velocity', (i ? -1 : 1) * props.startVelocity);
          }
        }
        delete this.cornerClickData;
      }
    }
  };

  Book.prototype.addSheetBlock = function addSheetBlock(p, block) {
    this.sheetBlocks.splice(p, 0, block);
    this.subscribeSheetBlock(block, 2);
    this.threeSheetBlocks.add(block.three);
  };

  Book.prototype.subscribeSheetBlock = function subscribeSheetBlock(block, offset) {
    var _this5 = this;

    var eventConverter = new _CustomEventConverter2.default(this.visual.wnd, this.visual.doc, _CircleTarget2.default.test),
        r = 0.15,
        target = new _CircleTarget2.default(1 - 0.5 * r, 0.5 * r, r);
    target.block = block;
    target.callback = this.cornerCallback.bind(this);
    eventConverter.addCustom(target);
    block.cornerTarget = target;
    block.three.userData.mouseCallback = function (e, data) {
      var i = data.face.materialIndex;
      if (i < 2) {
        var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
        eventConverter.convert(e, { x: i === 0 ? data.uv.x : 1 - data.uv.x, y: data.uv.y, i: i, n: n });
        _this5.pageManager.transferEventToTexture(n, e, data);
      }
    };
    block.three.userData.touchCallback = function (e, data) {
      var i = data.face.materialIndex;
      if (i < 2) {
        var n = i === 0 ? offset + 2 * block.p.first : offset + 2 * block.p.last - 1;
        _this5.pageManager.transferEventToTexture(n, e, data);
      }
    };
    this.visual.drag.addThree(block.three);
    this.visual.mouseEvents.addThree(block.three);
    this.visual.touchEvents.addThree(block.three);
  };

  Book.prototype.removeSheetBlock = function removeSheetBlock(block) {
    this.visual.mouseEvents.removeThree(block.three);
    this.visual.touchEvents.removeThree(block.three);
    this.visual.drag.removeThree(block.three);
    this.threeSheetBlocks.remove(block.three);
    block.dispose();
  };

  Book.prototype.removeSheetBlocks = function removeSheetBlocks(first, size) {
    var blocks = this.sheetBlocks.splice(first, size);
    for (var _iterator5 = blocks, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var block = _ref5;

      this.removeSheetBlock(block);
    }
  };

  Book.prototype.setTexture = function setTexture(material, n) {
    this.pageManager.setTexture(material, n);
  };

  Book.prototype.setPageTexture = function setPageTexture(material, n) {
    this.setTexture(material, n + 2);
  };

  Book.prototype.setLeftCoverTexture = function setLeftCoverTexture(material, n) {
    this.setTexture(material, n);
  };

  Book.prototype.setRightCoverTexture = function setRightCoverTexture(material, n) {
    this.setTexture(material, n + 2 * (this.p.sheets + 1));
  };

  Book.finishAnimationClb = function finishAnimationClb(angle) {
    this.block.set(this.book.getClosedBlockAngle(angle).closedAngle, 'closed', 0);
    var i = this.book.sheetBlocks.indexOf(this.block);
    if (~i) {
      if (angle === 0) {
        this.book.mergeSheetBlocks(i, this.book.sheetBlocks.length - i);
      } else {
        this.book.mergeSheetBlocks(0, i + 1);
      }
    }
  };

  Book.prototype.calcBlockForce = function calcBlockForce(block, object, angle, velocity, cornerHeight) {
    return block.force ? block.force(object, angle, velocity, cornerHeight) : 0;
  };

  Book.prototype.calcBlockCornerForce = function calcBlockCornerForce(block, object, angle, velocity, cornerHeight) {
    return block.cornerForce ? block.cornerForce(object, angle, velocity, cornerHeight) : 0;
  };

  Book.prototype.notifyBeforeAnimation = function notifyBeforeAnimation() {
    var res = void 0;
    if (this.animationNotification) {
      res = Promise.reject();
    } else {
      this.animationNotification = true;
      this.dispatchEvent({
        type: 'beforeAnimation'
      });
      res = this.layerManager.hide();
    }
    return res;
  };

  Book.prototype.notifyAfterAnimation = function notifyAfterAnimation() {
    if (this.animationNotification) {
      var p = this.getPage();
      if (this.userDirection.lastTopPage !== p) {
        this.userDirection.direction = Math.sign(p - this.userDirection.lastTopPage);
        this.userDirection.lastTopPage = p;
      }
      delete this.animationNotification;
      this.layerManager.show();
      this.dispatchEvent({
        type: 'afterAnimation'
      });
    }
  };

  Book.prototype.getUserDirection = function getUserDirection() {
    return this.userDirection;
  };

  Book.prototype.connectPhysics = function connectPhysics(block, mass, angle, velocity, flexibility, coverHeight, simulateClb, removeClb, progressClb) {
    var _this6 = this;

    var type = function type() {
      return _this6.hoverInfo ? 'hover' : _this6.dragInfo ? 'drag' : 'free';
    },
        res = this.sheetPhysics.getSize() ? Promise.resolve() : this.notifyBeforeAnimation();
    return res.then(function () {
      block.physicId = _this6.sheetPhysics.addObject(mass, angle, velocity, flexibility, coverHeight, function (angl, ch) {
        simulateClb(angl, ch);
        progressClb(block, Math.abs(angle - angl) / Math.PI, 'process', type());
        _this6.updateThree();
      }, function (angl, ch) {
        removeClb(angl, ch);
        delete block.physicId;
        progressClb(block, Math.abs(angle - angl) / Math.PI, 'finish', type());
        Promise.resolve().then(function () {
          if (!_this6.sheetPhysics.getSize()) {
            _this6.notifyAfterAnimation();
          }
        });
        _this6.updateThree();
      }, function (object, angle, velocity, cornerHeight) {
        return _this6.calcBlockForce(block, object, angle, velocity, cornerHeight);
      }, function (object, angle, velocity, cornerHeight) {
        return _this6.calcBlockCornerForce(block, object, angle, velocity, cornerHeight);
      });
      progressClb(block, 0, 'init', type());
      return block;
    }).catch(function () {
      return undefined;
    });
  };

  Book.prototype.update = function update(dt) {
    var _this7 = this;

    this.lastMousePos.t += dt;
    if (this.isProcessing() && this.lastMousePos.pageX !== undefined && this.lastMousePos.t - (this.lastMousePos.lastT || 0) > 0.25 && !this.hoverInfo && !this.dragInfo) {
      this.lastMousePos.lastT = this.lastMousePos.t;
      Promise.resolve().then(function () {
        (0, _libs.$)(_this7.visual.element).trigger(_libs.$.Event('mousemove', _this7.lastMousePos));
      });
    }
    this.sheetPhysics.simulate(dt);
  };

  Book.prototype.splitSheetBlock = function splitSheetBlock(i, leftSize) {
    var block = this.sheetBlocks[i];
    if (block && leftSize < block.getSize()) {
      var newBlock = new _SheetBlock2.default(this.visual, _extends({}, this.p, { setTexture: this.setPageTexture.bind(this) }), block.p.first, block.p.first + leftSize, block.angle, block.state);
      block.set(block.angle, block.state, block.corner.height, block.p.first + leftSize, block.p.last);
      this.addSheetBlock(i, newBlock);
      return [newBlock, block];
    }
  };

  Book.prototype.mergeSheetBlocks = function mergeSheetBlocks(first, size) {
    if (first < this.sheetBlocks.length) {
      size = Math.min(this.sheetBlocks.length - first, size);
      var firstBlock = this.sheetBlocks[first],
          lastBlock = this.sheetBlocks[first + size - 1];
      firstBlock.set(firstBlock.angle, firstBlock.state, firstBlock.corner.height, firstBlock.p.first, lastBlock.p.last);
      this.removeSheetBlocks(first + 1, size - 1);
    }
  };

  Book.prototype.setSheetBlocks = function setSheetBlocks(angle, state) {
    if (state === 'closed') {
      this.closedAngle = angle;
    }
    this.sheetBlocks.forEach(function (s) {
      if (!s.physicId) {
        s.set(angle, state);
      }
    });
  };

  Book.prototype.set = function set(angle) {
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    this.angle = angle;
    var PI = Math.PI;
    if (angle < PI / 4) {
      this.binder.set(0);

      this.binder.setLeft(-PI / 2 + 2 * angle);
      this.leftCover.set(PI / 2, 'opened', height);

      this.setSheetBlocks(0, 'closed');

      this.binder.setRight(0);
      this.rightCover.set(0, 'closed', 0);
    } else if (angle < 2 * PI / 4) {
      var a = 2 * (angle - PI / 4);
      this.binder.set(a);

      this.binder.setLeft(-a);
      this.leftCover.set(PI / 2 + a, 'opened', height);

      this.setSheetBlocks(a, 'closed');

      this.binder.setRight(-a);
      this.rightCover.set(a, 'closed', 0);
    } else if (angle < 3 * PI / 4) {
      var _a = 2 * (angle - PI / 2);
      this.binder.set(PI / 2);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI, 'opened', 0);

      this.binder.setRight(-PI / 2);
      this.rightCover.set(_a, 'opened', height);
    } else if (angle < 4 * PI / 4) {
      var _a2 = 2 * (angle - 3 * PI / 4) + PI / 2;
      this.binder.set(_a2);

      this.binder.setLeft(-_a2);
      this.leftCover.set(_a2, 'closed', 0);

      this.setSheetBlocks(_a2, 'closed');

      this.binder.setRight(-PI / 2);
      this.rightCover.set(PI / 2, 'opened', height);
    } else if (angle < 5 * PI / 4) {
      this.binder.set(PI);

      this.binder.setLeft(-PI);
      this.leftCover.set(PI, 'closed', 0);

      this.setSheetBlocks(PI, 'closed');

      this.binder.setRight(-PI / 2 - 2 * (angle - PI));
      this.rightCover.set(PI / 2, 'opened', height);
    } else if (angle < 6 * PI / 4) {
      var _a3 = 2 * (angle - 5 * PI / 4);
      this.binder.set(PI - _a3);

      this.binder.setLeft(-PI + _a3);
      this.leftCover.set(PI - _a3, 'closed', 0);

      this.setSheetBlocks(PI - _a3, 'closed');

      this.binder.setRight(-PI + _a3);
      this.rightCover.set(PI / 2 - _a3, 'opened', height);
    } else if (angle < 7 * PI / 4) {
      var _a4 = 2 * (angle - 6 * PI / 4);
      this.binder.set(PI / 2);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI - _a4, 'opened', height);

      this.binder.setRight(-PI / 2);
      this.rightCover.set(0, 'opened', 0);
    } else if (angle < 8 * PI / 4) {
      var _a5 = 2 * (angle - 7 * PI / 4);
      this.binder.set(PI / 2 - _a5);

      this.binder.setLeft(-PI / 2);
      this.leftCover.set(PI / 2, 'opened', height);

      this.setSheetBlocks(PI / 2 - _a5, 'closed');

      this.binder.setRight(-PI / 2 + _a5);
      this.rightCover.set(PI / 2 - _a5, 'closed', 0);
    }
  };

  Book.createSideTexture = function createSideTexture(color, type) {
    var c = _GraphUtils2.default.createCanvas(8, 8);
    if (type === 'color') {
      var ctx = c.getContext('2d');
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(color, 1);
      ctx.rect(0, 0, 8, 7);
      ctx.fill();
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(color, 0.5), 1);
      ctx.rect(0, 7, 8, 1);
      ctx.fill();
    }
    return c;
  };

  Book.prototype.prepareProps = function prepareProps(props) {
    return this.calcProps(Book.mergeProps((0, _book.props)(), props));
  };

  Book.mergeProps = function mergeProps(first, second) {
    second = second || {};
    return _extends({}, first, second, {
      sheet: _extends({}, first.sheet, second.sheet),
      cover: _extends({}, first.cover, second.cover),
      page: _extends({}, first.page, second.page),
      cssLayerProps: _extends({}, first.cssLayerProps, second.cssLayerProps)
    });
  };

  Book.prototype.calcProps = function calcProps(props) {
    var p = _extends({}, props, {
      sheet: _extends({}, props.sheet),
      cover: _extends({}, props.sheet, props.cover),
      page: _extends({}, props.sheet, props.page),
      cssLayerProps: _extends({}, props.cssLayerProps, {
        $: _libs.$
      })
    }),
        scale = 10,
        height = scale * p.height,
        width = scale * p.width,
        flexibleCornerK = Math.min(height, width) / width,
        flipProgressClb = function flipProgressClb() {
      return undefined;
    },
        sheet = {
      sideTexture: p.sheet.sideTexture || Book.createSideTexture(p.sheet.color, p.sheet.side)
    },
        cover = _extends({}, sheet, p.cover, {
      flexibleCorner: flexibleCornerK * p.cover.flexibleCorner,
      depth: scale * p.cover.depth,
      width: width,
      height: height,
      padding: scale * p.cover.padding
    }),
        page = _extends({}, sheet, p.page, {
      flexibleCorner: flexibleCornerK * p.page.flexibleCorner,
      depth: scale * p.page.depth,
      width: cover.width - cover.padding,
      height: cover.height - 2 * cover.padding
    }),
        marker = {
      use: false,
      color: 0XFF0000,
      size: scale * 0.001
    };
    if (cover.color !== sheet.color && !p.cover.sideTexture) {
      cover.sideTexture = Book.createSideTexture(cover.color, cover.side);
    }
    if (page.color !== sheet.color && !p.page.sideTexture) {
      page.sideTexture = Book.createSideTexture(page.color, page.side);
    }
    if (p.cssLayersLoader) {
      p.cssLayersLoader = this.cssLayersLoader(p.cssLayersLoader);
    }
    return _extends({}, p, { scale: scale, height: height, width: width, flipProgressClb: flipProgressClb, cover: cover, page: page, marker: marker });
  };

  Book.prototype.cssLayersLoader = function cssLayersLoader(loader) {
    var _this8 = this;

    return function (n, clb) {
      return loader(n, function (ls) {
        var nls = [];
        for (var _iterator6 = ls, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
          var _ref6;

          if (_isArray6) {
            if (_i6 >= _iterator6.length) break;
            _ref6 = _iterator6[_i6++];
          } else {
            _i6 = _iterator6.next();
            if (_i6.done) break;
            _ref6 = _i6.value;
          }

          var l = _ref6;

          nls.push(_extends({}, l, {
            js: _this8.cssLayerJsObject(l)
          }));
        }
        return clb(nls);
      });
    };
  };

  Book.prototype.cssLayerJsObject = function cssLayerJsObject(l) {
    var _this9 = this;

    var clIfEx = function clIfEx(f) {
      var r = void 0;
      if (f) {
        try {
          r = f();
        } catch (e) {
          console.error(e);
        }
      }
      return r;
    };
    return function (c, p) {
      var o = {};
      try {
        var init = eval(l.js);
        o = init ? init(c, p) || {} : {};
      } catch (e) {
        console.error(e);
      }
      var no = _this9.cssLayerJsObjectInit(c, p),
          ro = {};
      var _arr = ['hide', 'hidden', 'show', 'shown', 'dispose'];

      var _loop = function _loop() {
        var n = _arr[_i7];
        ro[n] = function () {
          clIfEx(no[n]);
          clIfEx(o[n]);
        };
      };

      for (var _i7 = 0; _i7 < _arr.length; _i7++) {
        _loop();
      }
      return ro;
    };
  };

  Book.prototype.cssLayerJsObjectInit = function cssLayerJsObjectInit(c, p) {
    var _this10 = this;

    c.find('.go-to-page').on('click', function (e) {
      var n = (0, _libs.$)(e.target);
      while (n.length && !n.hasClass('go-to-page')) {
        n = (0, _libs.$)(n[0].parentNode);
      }
      n = parseInt(n.attr('data-number'));
      if (!isNaN(n)) {
        e.preventDefault();
        p.scene.ctrl.goToPage(n - 1);
      }
    });
    var ys = c.find('.youtube');
    if (ys.length) {
      ys.html('<div style="width:100%;height:100%;"></div>');
      _YouTubeApi2.default.init().then(function () {
        for (var i = 0; i < ys.length; ++i) {
          var y = ys[i];
          var _n = (0, _libs.$)(y),
              player = new YT.Player(_n.find('div')[0], { videoId: _n.attr('data-id') });
          _n[0].player = player;
        }
      });
    }
    return {
      hide: function hide() {
        if (_this10.pendingPlayers.length) {
          _this10.pendingPlayers = [];
          _this10.dispatchEvent({
            type: 'pendingPlayers'
          });
        }
        c.find('.pause-on-hide').each(function (_, p) {
          return _this10.cssFs.pause(p);
        });
      },
      shown: function shown() {
        return c.find('.play-on-shown').each(function (_, p) {
          return _this10.cssFs.play(p);
        });
      },
      dispose: function dispose() {
        return c.find('.pause-on-hide').each(function (_, p) {
          return _this10.cssFs.pause(p);
        });
      }
    };
  };

  return Book;
}(_libs.THREE.EventDispatcher);

exports.default = Book;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Controller2 = __webpack_require__(15);

var _Controller3 = _interopRequireDefault(_Controller2);

var _bookController = __webpack_require__(45);

var _EventsToActions = __webpack_require__(52);

var _EventsToActions2 = _interopRequireDefault(_EventsToActions);

var _stats = __webpack_require__(75);

var _stats2 = _interopRequireDefault(_stats);

var _Object3DWatcher = __webpack_require__(58);

var _Object3DWatcher2 = _interopRequireDefault(_Object3DWatcher);

var _FullScreenX = __webpack_require__(18);

var _FullScreenX2 = _interopRequireDefault(_FullScreenX);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookController = function (_Controller) {
  _inherits(BookController, _Controller);

  function BookController(book, view, props) {
    _classCallCheck(this, BookController);

    var _this = _possibleConstructorReturn(this, _Controller.call(this));

    _this.navigationControls = true;
    _this.book = book;
    _this.visual = book.visual;
    _this.p = BookController.prepareProps(props);
    _this.p.rtl = book.p.rtl;

    _this.orbit = book.visual.getOrbit();
    book.setFlipProgressClb(_this.updateViewIfState.bind(_this));
    _this.view = view;
    _this.bindActions();

    _this.state = {
      smartPan: !_this.actions['cmdSmartPan'].active,
      singlePage: _this.isSinglePageAvailable() ? _this.actions['cmdSinglePage'].active || _this.actions['cmdSinglePage'].activeForMobile && _this.visual.isMobile() : false,
      stats: _this.actions['cmdStats'].active,
      lighting: _this.p.lighting.default,
      activeSide: 1
    };

    var box0 = new _libs.THREE.Box3(),
        box1 = new _libs.THREE.Box3(),
        bookWidth = book.openedBox.max.x - book.openedBox.min.x;
    _this.bookWatcher = new _Object3DWatcher2.default(_this.visual, function () {
      if (_this.state.singlePage) {
        if (_this.state.activeSide) {
          box0.setFromObject(book.rightCover.three);
        } else {
          box0.setFromObject(book.leftCover.three);
        }
      } else {
        box0.setFromObject(book.leftCover.three);
        box1.setFromObject(book.rightCover.three);
        box0.union(box1);
        var width = Math.max(box0.min.x - box0.min.x, bookWidth),
            x0 = (box0.min.x + box0.max.x) / 2;
        box0.min.x = x0 - 0.5 * width;
        box0.max.x = x0 + 0.5 * width;
      }
      return box0;
    });
    _this.bookWatcher.scale = _this.p.scale.default;
    _this.book.setZoom(_this.bookWatcher.scale, _this.state.singlePage);

    _this.Stats = new _stats2.default();
    _this.Stats.domElement.style.position = 'absolute';
    _this.Stats.domElement.style.top = '0px';

    _this.visual.setExtraLighting(_this.state.lighting);
    _this.binds = {
      onScreenModeChanged: _this.onScreenModeChanged.bind(_this),
      stats: _this.Stats.update.bind(_this.Stats),
      onUpdateView: _this.updateView.bind(_this)
    };
    _FullScreenX2.default.addEventListener(_this.view.getParentContainer().ownerDocument, _this.binds.onScreenModeChanged);

    _this.cmdSmartPan();

    _this.book.enableLoadingAnimation(_this.p.loadingAnimation.book);
    if (_this.p.loadingAnimation.skin) {
      _this.initLoadingAnimation();
    }

    _this.book.enableLoadingAnimation(_this.p.loadingAnimation.book);
    _this.book.setAutoResolution(_this.p.autoResolution.enabled, _this.p.autoResolution.coefficient);

    _this.visual.addEventListener('resize', _this.updateView.bind(_this));
    _this.book.addEventListener('pendingPlayers', _this.updateView.bind(_this));
    return _this;
  }

  BookController.prototype.dispose = function dispose() {
    _FullScreenX2.default.removeEventListener(this.view.getParentContainer().ownerDocument, this.binds.onScreenModeChanged);
    delete this.book;
    delete this.view;
    delete this.visual;
  };

  BookController.prototype.ready = function ready(scene) {
    var _this2 = this;

    if (this.view.templateObject.appLoaded) {
      Promise.resolve().then(function () {
        return _this2.view.templateObject.appLoaded(scene);
      });
    }
  };

  BookController.prototype.initLoadingAnimation = function initLoadingAnimation() {
    var _this3 = this;

    var handler = function handler() {
      var pages = _this3.book.getTopPages();
      var visible = false;
      for (var _iterator = pages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var n = _ref;

        var state = _this3.book.getPageState(n);
        visible = state === undefined || state === 'loading';
        if (visible) {
          break;
        }
      }
      _this3.view.setState('widLoading', {
        visible: visible
      });
    };
    this.book.addEventListener('beforeAnimation', handler);
    this.book.addEventListener('afterAnimation', handler);
    this.book.addEventListener('loadPage', handler);
    this.book.addEventListener('loadedPage', handler);
  };

  BookController.prototype.enableNavigation = function enableNavigation(enable) {
    this.navigationControls = enable;
  };

  BookController.prototype.setTocCtrl = function setTocCtrl(tocCtrl) {
    this.tocCtrl = tocCtrl;
    this.tocCtrl.onChange = this.updateView.bind(this);
    this.updateView();
  };

  BookController.prototype.setShareCtrl = function setShareCtrl(shareCtrl) {
    this.shareCtrl = shareCtrl;
    this.shareCtrl.onChange = this.updateView.bind(this);
    this.updateView();
  };

  BookController.prototype.setPrinter = function setPrinter(printer) {
    this.printer = printer;
    this.updateView();
  };

  BookController.prototype.setSounds = function setSounds(sounds) {
    this.sounds = sounds;
    sounds.setEnabled(this.actions['cmdSounds'].active);
    this.updateView();
  };

  BookController.prototype.onScreenModeChanged = function onScreenModeChanged(e) {
    this.updateView();
  };

  BookController.prototype.canZoomIn = function canZoomIn() {
    return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.max) > this.p.eps;
  };

  BookController.prototype.canZoomOut = function canZoomOut() {
    return !this.state.smartPan || Math.abs(this.bookWatcher.scale - this.p.scale.min) > this.p.eps;
  };

  BookController.prototype.canDefaultZoom = function canDefaultZoom() {
    return this.state.smartPan;
  };

  BookController.prototype.setBookZoom = function setBookZoom(scale) {
    // setTimeout(()=> {
    //   if(Math.abs(this.bookWatcher.scale-scale)<1e-3) {
    this.book.setZoom(scale, this.state.singlePage);
    //   }
    // }, 1000);
  };

  BookController.prototype.cmdZoomIn = function cmdZoomIn() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = Math.min(this.p.scale.max, this.bookWatcher.scale + this.p.scale.delta);
      this.setBookZoom(this.bookWatcher.scale);
    } else {
      this.orbit.zoomIn(6.6 * this.p.scale.delta / 0.32);
    }
    this.updateView();
  };

  BookController.prototype.cmdZoomOut = function cmdZoomOut() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = Math.max(this.p.scale.min, this.bookWatcher.scale - this.p.scale.delta);
      this.setBookZoom(this.bookWatcher.scale);
    } else {
      this.orbit.zoomOut(6.6 * this.p.scale.delta / 0.32);
    }
    this.updateView();
  };

  BookController.prototype.setScale = function setScale(scale) {
    this.bookWatcher.scale = Math.min(this.p.scale.max, Math.max(this.p.scale.min, scale));
    this.setBookZoom(this.bookWatcher.scale);
    this.updateView();
  };

  BookController.prototype.cmdDefaultZoom = function cmdDefaultZoom() {
    if (this.state.smartPan) {
      this.bookWatcher.scale = this.p.scale.default;
      this.setBookZoom(this.bookWatcher.scale);
      this.updateView();
    }
  };

  BookController.prototype.cmdToc = function cmdToc() {
    if (this.tocCtrl) {
      this.tocCtrl.togle();
    }
  };

  BookController.prototype.cmdShare = function cmdShare() {
    if (this.shareCtrl) {
      this.shareCtrl.togle();
    }
  };

  BookController.prototype.cmdFastBackward = function cmdFastBackward() {
    if (!this.canFlipLeft()) return;
    this.startFlip(this.book.flipLeft(5));
  };

  BookController.prototype.cmdBackward = function cmdBackward() {
    var _this4 = this;

    if (!this.canFlipLeft()) return;
    if (this.state.singlePage) {
      this.state.activeSide = (this.getPage() + 1) % 2;
      if (this.state.activeSide) {
        this.state.activeSide = 0;
        this.updateView();
      } else {
        this.startFlip(this.book.flipLeft(1)).then(function (block) {
          if (block) {
            _this4.state.activeSide = 1;
          }
        });
      }
    } else {
      this.startFlip(this.book.flipLeft(1));
    }
  };

  BookController.prototype.cmdBigBackward = function cmdBigBackward() {
    this.cmdBackward();
  };

  BookController.prototype.cmdForward = function cmdForward() {
    var _this5 = this;

    if (!this.canFlipRight()) return;
    if (this.state.singlePage) {
      this.state.activeSide = (this.getPage() + 1) % 2;
      if (!this.state.activeSide) {
        this.state.activeSide = 1;
        this.updateView();
      } else {
        this.startFlip(this.book.flipRight(1)).then(function (block) {
          if (block) {
            _this5.state.activeSide = 0;
          }
        });
      }
    } else {
      this.startFlip(this.book.flipRight(1));
    }
  };

  BookController.prototype.cmdBigForward = function cmdBigForward() {
    this.cmdForward();
  };

  BookController.prototype.cmdFastForward = function cmdFastForward() {
    if (!this.canFlipRight()) return;
    this.startFlip(this.book.flipRight(5));
  };

  BookController.prototype.cmdSave = function cmdSave() {
    var a = (0, _libs.$)('<a href="' + this.p.downloadURL + '" download target="_blank"></a>').appendTo(this.view.getContainer());
    a[0].click();
    a.remove();
  };

  BookController.prototype.cmdPrint = function cmdPrint() {
    this.printer.print();
  };

  BookController.prototype.cmdFullScreen = function cmdFullScreen() {
    if (!_FullScreenX2.default.activated()) {
      _FullScreenX2.default.request(this.view.getParentContainer());
    } else {
      _FullScreenX2.default.cancel();
    }
  };

  BookController.prototype.cmdSmartPan = function cmdSmartPan() {
    this.state.smartPan = !this.state.smartPan;
    if (this.state.smartPan) {
      this.orbit.minAzimuthAngle = 0;
      this.orbit.maxAzimuthAngle = 0;
      this.orbit.minPolarAngle = 0;
      this.orbit.maxPolarAngle = Math.PI / 4;
      this.bookWatcher.enabled = true;
    } else {
      this.orbit.minAzimuthAngle = -Infinity;
      this.orbit.maxAzimuthAngle = Infinity;
      this.orbit.minPolarAngle = 0;
      this.orbit.maxPolarAngle = Math.PI;
      this.bookWatcher.enabled = false;
    }
    this.updateView();
  };

  BookController.prototype.isSinglePageAvailable = function isSinglePageAvailable() {
    return this.book.getPages() !== 2;
  };

  BookController.prototype.cmdSinglePage = function cmdSinglePage() {
    if (this.isSinglePageAvailable()) {
      this.state.singlePage = !this.state.singlePage;
      this.setBookZoom(this.bookWatcher.scale);
      this.updateView();
      this.dispatchAsync({
        type: 'pageMode',
        value: this.state.singlePage ? 'single' : 'double'
      });
    }
  };

  BookController.prototype.cmdSounds = function cmdSounds() {
    if (this.sounds) {
      this.sounds.togle();
    }
    this.updateView();
  };

  BookController.prototype.cmdStats = function cmdStats() {
    this.state.stats = !this.state.stats;
    if (this.state.stats) {
      (0, _libs.$)(this.view.getContainer()).append(this.Stats.domElement);
      this.visual.addRenderCallback(this.binds.stats);
    } else {
      (0, _libs.$)(this.view.getContainer()).find(this.Stats.domElement).remove();
      this.visual.removeRenderCallback(this.binds.stats);
    }
    this.updateView();
  };

  BookController.prototype.cmdLightingUp = function cmdLightingUp() {
    this.state.lighting = Math.min(this.state.lighting + this.p.lighting.delta, this.p.lighting.max);
    this.visual.setExtraLighting(this.state.lighting);
    this.book.updateThree();
    this.updateView();
  };

  BookController.prototype.cmdLightingDown = function cmdLightingDown() {
    this.state.lighting = Math.max(this.state.lighting - this.p.lighting.delta, this.p.lighting.min);
    this.visual.setExtraLighting(this.state.lighting);
    this.book.updateThree();
    this.updateView();
  };

  BookController.prototype.cmdPendingPlay = function cmdPendingPlay() {
    this.book.resolvePendingPlayers();
  };

  BookController.prototype.goToPage = function goToPage(page) {
    var _this6 = this;

    page = Math.max(Math.min(page, this.book.getPages() - 1), 0);
    if (this.p.rtl) {
      page = this.book.getBookPages() - 1 - page;
    }
    var pageNum = Math.max(Math.min(page, this.book.getBookPages() - 1), 0);
    this.state.activeSide = (pageNum + 1) % 2;
    var target = Math.max(Math.min(page - 1 + page % 2, this.book.getBookPages() - 1), 0),
        current = this.book.getPage(),
        flips = [],
        covs = 0;;
    if (target != current) {
      if (current === 0) {
        flips.push(1);
        current += 1;
        ++covs;
      } else if (current === this.book.getBookPages() - 1) {
        flips.push(-1);
        current -= 2;
        ++covs;
      }
      var cv = 0;
      if (target === 0) {
        cv = -1;
        target += 1;
        ++covs;
      } else if (target === this.book.getBookPages() - 1) {
        cv = 1;
        target -= 2;
        ++covs;
      }
      if (target - current) {
        flips.push(Math.ceil((target - current) / 2));
      }
      if (cv) {
        flips.push(cv);
      }
    }

    var setClb = function setClb(fl, time, clb) {
      return new Promise(function (resolve) {
        setTimeout(function () {
          if (fl < 0) {
            _this6.startFlip(_this6.book.flipLeft(-fl, clb));
          } else {
            _this6.startFlip(_this6.book.flipRight(fl, clb));
          }
          resolve();
        }, time);
      });
    };

    if (covs === 2) {
      setClb(flips[0], 0, function (block, progress, state) {
        if (state == 'finish' && progress == 1) {
          setClb(flips[flips.length - 1], 0);
        }
      }).then(function () {
        return setClb(flips[1], 400);
      });
    } else {
      (function () {
        var next = Promise.resolve(),
            time = 0;

        var _loop = function _loop() {
          if (_isArray2) {
            if (_i2 >= _iterator2.length) return 'break';
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) return 'break';
            _ref2 = _i2.value;
          }

          var fl = _ref2;

          next = next.then(function () {
            return setClb(fl, time);
          });
          time = 400;
        };

        for (var _iterator2 = flips, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
          var _ref2;

          var _ret2 = _loop();

          if (_ret2 === 'break') break;
        }
      })();
    }
  };

  BookController.prototype.startFlip = function startFlip(flipRes) {
    var _this7 = this;

    return flipRes ? flipRes.then(function (block) {
      if (block) {
        _this7.dispatchAsync({
          type: 'startFlip'
        });
      }
      return block;
    }) : Promise.resolve(undefined);
  };

  BookController.prototype.endFlip = function endFlip(block) {
    this.dispatchAsync({
      type: 'endFlip'
    });
    return block;
  };

  BookController.prototype.getPage = function getPage() {
    var page = this.book.getPage();
    return page ? Math.min(this.book.getPage() + this.state.activeSide, this.book.getBookPages() - 1) : 0;
  };

  BookController.prototype.getPageForGUI = function getPageForGUI() {
    var n = (this.state.singlePage ? this.getPage() : this.book.getPage()) + 1;
    if (this.p.rtl) {
      n = this.book.getBookPages() - n + 1;
    }
    if (n > this.book.getPages()) {
      n = this.book.getPages();
    }
    return n;
  };

  BookController.prototype.inpPage = function inpPage(e, data) {
    this.goToPage(data - 1);
  };

  BookController.prototype.updateViewIfState = function updateViewIfState(block, progress, state, type) {
    if (state === 'init' || state === 'finish') {
      setTimeout(this.updateView.bind(this), 100);
    }
    if (state === 'finish') {
      this.endFlip(block);
    }
  };

  BookController.prototype.isCmdVisible = function isCmdVisible(name) {
    return (0, _libs.$)(this.visual.element).width() < this.p.narrowView.width ? this.actions[name].enabledInNarrow === undefined ? this.actions[name].enabled : this.actions[name].enabledInNarrow : this.actions[name].enabled;
  };

  BookController.prototype.updateViewState = function updateViewState() {
    this.viewState = {
      'cmdZoomIn': {
        enable: this.canZoomIn(),
        visible: this.isCmdVisible('cmdZoomIn'),
        active: false
      },
      'cmdZoomOut': {
        enable: this.canZoomOut(),
        visible: this.isCmdVisible('cmdZoomOut'),
        active: false
      },
      'cmdDefaultZoom': {
        enable: this.canDefaultZoom(),
        visible: this.isCmdVisible('cmdDefaultZoom'),
        active: this.canDefaultZoom() && Math.abs(this.bookWatcher.scale - this.p.scale.default) < this.p.eps
      },
      'cmdToc': {
        enable: !!this.tocCtrl,
        visible: this.isCmdVisible('cmdToc') && this.tocCtrl,
        active: this.tocCtrl && this.tocCtrl.visible
      },
      'cmdShare': {
        enable: !!this.shareCtrl,
        visible: this.isCmdVisible('cmdShare') && this.shareCtrl,
        active: this.shareCtrl && this.shareCtrl.visible
      },
      'inpPages': {
        visible: true,
        value: this.book.getPages()
      },
      'inpPage': {
        visible: true,
        enable: !this.book.isProcessing() && this.navigationControls,
        value: this.getPageForGUI()
      },
      'cmdSave': {
        enable: true,
        visible: this.isCmdVisible('cmdSave') && !!this.p.downloadURL,
        active: false
      },
      'cmdPrint': {
        enable: true,
        visible: this.isCmdVisible('cmdPrint') && !!this.printer,
        active: false
      },
      'cmdFullScreen': {
        enable: _FullScreenX2.default.available(),
        visible: this.isCmdVisible('cmdFullScreen'),
        active: _FullScreenX2.default.available() && _FullScreenX2.default.activated()
      },
      'widControls': {
        enable: true,
        visible: true,
        active: false
      },
      'widSettings': {
        enable: true,
        visible: this.isCmdVisible('widSettings'),
        active: false
      },
      'cmdSmartPan': {
        enable: true,
        visible: this.isCmdVisible('cmdSmartPan'),
        active: this.state.smartPan
      },
      'cmdSinglePage': {
        enable: this.isSinglePageAvailable(),
        visible: this.isCmdVisible('cmdSinglePage'),
        active: this.state.singlePage
      },
      'cmdSounds': {
        enable: true,
        visible: this.isCmdVisible('cmdSounds') && !!this.sounds,
        active: !!this.sounds && this.sounds.enabled
      },
      'cmdStats': {
        enable: true,
        visible: this.isCmdVisible('cmdStats'),
        active: this.state.stats
      },
      'cmdLightingUp': {
        enable: Math.abs(this.state.lighting - this.p.lighting.max) > this.p.eps,
        visible: this.isCmdVisible('cmdLightingUp'),
        active: false
      },
      'cmdLightingDown': {
        enable: Math.abs(this.state.lighting - this.p.lighting.min) > this.p.eps,
        visible: this.isCmdVisible('cmdLightingDown'),
        active: false
      },
      'cmdPendingPlay': {
        enable: true,
        visible: true,
        active: false
      },
      'widPendingPlay': {
        enable: true,
        visible: this.book.hasPendingPlayers(),
        active: false
      }
    };

    var left = this.canFlipLeft(),
        right = this.canFlipRight();
    var flippersEnable = {
      cmdFastBackward: left,
      cmdBackward: left,
      cmdBigBackward: left,
      cmdForward: right,
      cmdBigForward: right,
      cmdFastForward: right
    };
    for (var _iterator3 = Object.keys(flippersEnable), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var name = _ref3;

      this.viewState[name] = {
        enable: flippersEnable[name],
        visible: this.isCmdVisible(name),
        active: false
      };
    };
  };

  BookController.prototype.canFlipLeft = function canFlipLeft() {
    return this.navigationControls && (!!this.book.getLeftFlipping() || this.state.singlePage && this.p.rtl && this.getPage() === 2);
  };

  BookController.prototype.canFlipRight = function canFlipRight() {
    return this.navigationControls && (!!this.book.getRightFlipping() || this.state.singlePage && !this.p.rtl && this.getPage() === this.book.getPages() - 2);
  };

  BookController.prototype.updateView = function updateView() {
    if (this.view) {
      this.updateViewState();
      for (var _iterator4 = Object.keys(this.viewState), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var name = _ref4;

        this.view.setState(name, this.viewState[name]);
      }
    }
  };

  BookController.prototype.getActions = function getActions() {
    var _this8 = this;

    var isSwipping = function isSwipping(name) {
      return _this8.actions.touchCmdSwipe.enabled && _this8.actions.touchCmdSwipe.code === _this8.actions[name].code && _this8.state.smartPan && _this8.bookWatcher.scale <= 1;
    },
        cmds = {};

    var _loop2 = function _loop2(name) {
      if (name.indexOf('cmd') === 0) {
        cmds[name] = {
          activate: function activate() {
            if (_this8.viewState && _this8.viewState[name].enable) {
              _this8[name].apply(_this8, arguments);
            }
          }
        };
      }
    };

    for (var name in this) {
      _loop2(name);
    }

    return _extends({}, cmds, {
      cmdPanLeft: {
        activate: function activate(e) {
          return _this8.orbit.actions.pan(e, {
            state: 'move',
            dx: -_this8.p.pan.speed,
            dy: 0
          });
        }
      },
      cmdPanRight: {
        activate: function activate(e) {
          return _this8.orbit.actions.pan(e, {
            state: 'move',
            dx: _this8.p.pan.speed,
            dy: 0
          });
        }
      },
      cmdPanUp: {
        activate: function activate(e) {
          return _this8.orbit.actions.pan(e, {
            state: 'move',
            dx: 0,
            dy: -_this8.p.pan.speed
          });
        }
      },
      cmdPanDown: {
        activate: function activate(e) {
          return _this8.orbit.actions.pan(e, {
            state: 'move',
            dx: 0,
            dy: _this8.p.pan.speed
          });
        }
      },
      mouseCmdRotate: {
        activate: this.orbit.actions.rotate
      },
      mouseCmdDragZoom: {
        activate: function activate(e, data) {
          if (data.dy > 0) {
            _this8.cmdZoomOut();
          } else if (data.dy < 0) {
            _this8.cmdZoomIn();
          }
        }
      },
      mouseCmdPan: {
        activate: this.orbit.actions.pan
      },
      mouseCmdWheelZoom: {
        activate: function activate(e) {
          e.preventDefault();
          if (e.deltaY < 0) {
            _this8.cmdZoomOut();
          } else if (e.deltaY > 0) {
            _this8.cmdZoomIn();
          }
        }
      },
      touchCmdRotate: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdRotate')) {
            if (data.state === 'move') {
              e.preventDefault();
            }
            _this8.orbit.actions.rotate(e, data);
          }
        }
      },
      touchCmdZoom: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdZoom')) {
            var l = function l(v) {
              return Math.sqrt(v.x * v.x + v.y * v.y);
            };
            if (data.state === 'start') {
              _this8.touchZoomData = {
                l: l(data),
                scale: _this8.bookWatcher.scale
              };
            } else if (data.state === 'move') {
              e.preventDefault();
              _this8.setScale(l(data) / _this8.touchZoomData.l * _this8.touchZoomData.scale);
            }
          }
        }
      },
      touchCmdPan: {
        activate: function activate(e, data) {
          if (!isSwipping('touchCmdPan')) {
            if (data.state === 'move' && (!_this8.state.smartPan || _this8.bookWatcher.scale > 1)) {
              e.preventDefault();
              _this8.orbit.actions.pan(e, data);
            }
          }
        }
      },
      touchCmdSwipe: {
        activate: function activate(e, data) {
          if (isSwipping('touchCmdSwipe')) {
            if (data.state === 'start') {
              var touch = (e.touches || e.originalEvent.touches)[_this8.actions.touchCmdSwipe.code - 1];
              _this8.swipeData = {
                handled: false,
                x0: touch.pageX,
                y0: touch.pageY,
                x: touch.pageX,
                y: touch.pageY
              };
            } else if (data.state === 'move') {
              e.preventDefault();
              if (!_this8.swipeData.handled) {
                _this8.swipeData = _extends({}, _this8.swipeData, {
                  x: _this8.swipeData.x + data.dx,
                  y: _this8.swipeData.y + data.dy
                });
                if (Math.abs(_this8.swipeData.x0 - _this8.swipeData.x) > 100) {
                  _this8.swipeData.x0 > _this8.swipeData.x ? _this8.cmdForward() : _this8.cmdBackward();
                  _this8.swipeData.handled = true;
                }
              }
            } else {
              delete _this8.swipeData;
            }
          }
        }
      },
      widSettings: {
        activate: function activate() {
          return undefined;
        }
      }
    });
  };

  BookController.prototype.bindActions = function bindActions() {
    this.eToA = new _EventsToActions2.default((0, _libs.$)(this.visual.element));
    this.eToA.addAction(function (e) {
      return e.preventDefault();
    }, 'contextmenu', _EventsToActions2.default.mouseButtons.Right, 0);

    this.actions = this.getActions();
    for (var _iterator5 = Object.keys(this.actions), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var name = _ref5;

      var action = _extends({}, this.actions[name], this.p.actions[name]);
      this.actions[name] = action;
      if (action.enabled) {
        var flags = action.flags || 0;
        if (action.type) {
          this.eToA.addAction(action.activate, action.type, action.code, flags);
        } else if (action.code !== undefined) {
          this.eToA.addAction(action.activate, 'keydown', action.code, flags);
        }
      }
    }
  };

  BookController.prepareProps = function prepareProps(props) {
    return BookController.calcProps(BookController.mergeProps((0, _bookController.props)(), props));
  };

  BookController.setActions = function setActions(props, actions) {
    for (var _iterator6 = Object.keys(actions || {}), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var name = _ref6;

      props.actions[name] = _extends({}, props.actions[name], actions[name]);
    }
  };

  BookController.mergeProps = function mergeProps(first, second) {
    second = second || {};
    function merge(first, second) {
      second = second || {};
      var props = _extends({}, first, second);
      for (var _iterator7 = Object.keys(first), _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
        var _ref7;

        if (_isArray7) {
          if (_i7 >= _iterator7.length) break;
          _ref7 = _iterator7[_i7++];
        } else {
          _i7 = _iterator7.next();
          if (_i7.done) break;
          _ref7 = _i7.value;
        }

        var name = _ref7;

        if (_typeof(first[name]) === 'object') {
          props[name] = merge(first[name], second[name]);
        }
      }
      return props;
    }
    var props = merge(first, second);
    BookController.setActions(props, first.actions);
    BookController.setActions(props, second.actions);
    return props;
  };

  BookController.calcProps = function calcProps(props) {
    props.scale.delta = (props.scale.max - props.scale.min) / props.scale.levels;
    props.lighting.delta = (props.lighting.max - props.lighting.min) / props.lighting.levels;
    return props;
  };

  return BookController;
}(_Controller3.default);

exports.default = BookController;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BookPrinter = function () {
  function BookPrinter(context, book, styleSheet) {
    _classCallCheck(this, BookPrinter);

    this.book = book;
    this.styleSheet = styleSheet;
    this.wnd = context.wnd;
    this.doc = context.doc;
    this.pageCallback = book.getPageCallback();
    var test = this.pageCallback(0);
    this.type = test.type;
    if (this.type === 'pdf') {
      this.pdfSrc = test.src.src;
    }
  }

  BookPrinter.prototype.cancel = function cancel() {
    this.canceled = true;
  };

  BookPrinter.prototype.dispose = function dispose() {
    if (this.frame) {
      this.frame.remove();
      delete this.frame;
    }
  };

  BookPrinter.prototype.print = function print() {
    var _this = this;

    delete this.canceled;
    if (this.type === 'pdf') {
      var printWnd = void 0,
          callManually = false;
      if (this.useIFrame()) {
        callManually = !!this.frame;
        if (!this.frame) {
          this.frame = (0, _libs.$)('<iframe src="' + this.pdfSrc + '" style="display: none;"></iframe>').appendTo(this.doc.body);
        }
        printWnd = this.frame[0].contentWindow;
      } else {
        printWnd = this.wnd.open(this.pdfSrc);
      }
      if (callManually) {
        printWnd.print();
      } else {
        (0, _libs.$)(printWnd).on('load', function () {
          try {
            printWnd.print();
          } catch (e) {
            console.error(e);
          }
        });
      }
    } else {
      this.renderContent().then(function (content) {
        var printWnd = _this.wnd.open(),
            printDoc = printWnd.document,
            html = ('\n            <!DOCTYPE html>\n            <html>\n              <head>\n                <meta charset="utf-8">\n                <title>3D FlipBook - Printing</title>\n                ' + content.head + '\n                <script type="text/javascript">\n                  function printDocument() {\n                    window.print();\n                    window.close();\n                  }\n                  function init() {\n                    setTimeout(printDocument, 100);\n                  }\n                </script>\n              </head>\n              <body onload="init()">\n                ' + content.body + '\n              </body>\n            </html>\n          ').fb3dQFilter();
        printDoc.open();
        printDoc.write(html);
        printDoc.close();
      }).catch(function (e) {
        return console.warn('3D FlipBook - Printing was canceled');
      });
    }
  };

  BookPrinter.prototype.progress = function progress(v) {
    if (this.canceled) {
      throw 'Cancel Printing';
    }
    if (this.onProgress) {
      this.onProgress(Math.floor(v * 100));
    }
  };

  BookPrinter.prototype.renderContent = function renderContent() {
    var _this2 = this;

    var pages = this.book.getPages(),
        head = new Set(),
        body = [];
    var done = Promise.resolve();

    var _loop = function _loop(page) {
      var info = _this2.pageCallback(page);
      if (info.type === 'image') {
        done = done.then(function () {
          _this2.progress(page / pages);
          return _this2.renderImage(head, body, info.src);
        });
      } else if (info.type === 'html') {
        done = done.then(function () {
          _this2.progress(page / pages);
          return _this2.renderHtml(head, body, info.src);
        });
      }
    };

    for (var page = 0; page < pages; ++page) {
      _loop(page);
    }
    return done.then(function () {
      _this2.progress(1);
      return { head: _this2.renderHead(head), body: body.join('\n') };
    });
  };

  BookPrinter.wrap = function wrap(content) {
    return '<div class="fb3d-printer-page">' + content + '</div>';
  };

  BookPrinter.prototype.renderImage = function renderImage(head, body, src) {
    body.push(BookPrinter.wrap('<img src="' + src + '" />'));
  };

  BookPrinter.prototype.renderHtml = function renderHtml(head, body, src) {
    return new Promise(function (resolve, reject) {
      _libs.$.get(src, function (html) {
        var links = html.match(/<link.*?>/ig) || [];
        for (var _iterator = links, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var link = _ref;

          if (link.match(/stylesheet/i)) {
            var href = link.match(/href\s*=\s*['"](.*)['"]/i);
            if (href) {
              head.add(href[1]);
            }
          }
        }
        var content = html.match(/<body.*?>([\S\s]*)<\/body>/i);
        if (content) {
          body.push(BookPrinter.wrap(content[1]));
        }
        resolve();
      }).fail(function (e) {
        console.error(e.responseText);
        reject();
      });
    });
  };

  BookPrinter.prototype.renderHead = function renderHead(head) {
    var content = [];
    head.forEach(function (k) {
      return content.push('<link rel="stylesheet" href="' + k + '">');
    });
    content.push(this.styleSheet ? '<link rel="stylesheet" href="' + this.styleSheet + '">' : BookPrinter.defaultStyleSheet());
    return content.join('\n');
  };

  BookPrinter.prototype.useIFrame = function useIFrame() {
    var isChromium = this.wnd.chrome,
        winNav = this.wnd.navigator,
        vendorName = winNav.vendor,
        isIEedge = winNav.userAgent.indexOf("Edge") > -1,
        isIOSChrome = winNav.userAgent.match("CriOS");
    var use = void 0;
    if (isIOSChrome) {
      use = true;
    } else if (isChromium && vendorName === 'Google Inc.' && !isIEedge) {
      use = true;
    } else {
      use = false;
    }
    return use;
  };

  BookPrinter.defaultStyleSheet = function defaultStyleSheet() {
    return '\n      <style type="text/css">\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        .fb3d-printer-page {\n          page-break-after: always;\n        }\n      </style>\n    '.fb3dQFilter();
  };

  return BookPrinter;
}();

exports.default = BookPrinter;

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

var _View2 = __webpack_require__(69);

var _View3 = _interopRequireDefault(_View2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BookView = function (_View) {
  _inherits(BookView, _View);

  function BookView(container, onLoad, template, handler) {
    _classCallCheck(this, BookView);

    return _possibleConstructorReturn(this, _View.call(this, container, onLoad, template, handler));
  }

  BookView.prototype.initView = function initView() {
    this.view = this.container.find('.view');
    this.bookmarksView = this.container.find('.widBookmarks');
    this.thumbnailsView = this.container.find('.widThumbnails');
    this.searchView = this.container.find('.widSearch');
  };

  BookView.prototype.getHandlers = function getHandlers(id) {
    var _this2 = this;

    var handlers = void 0;
    if (id === 'inpPage') {
      handlers = [{
        inpPage: function inpPage(e, data) {
          return _this2.callLater(_View.prototype.getHandlers.call(_this2, id), id, e, data, BookView.PAGE_HANDLER_DELAY);
        }
      }];
    } else {
      handlers = _View.prototype.getHandlers.call(this, id);
    }
    return handlers;
  };

  BookView.prototype.onItemStateChanged = function onItemStateChanged(id, state) {
    if (id === 'cmdFullScreen') {
      if (state.active) {
        this.parentContainer.addClass('fullscreen');
      } else {
        this.parentContainer.removeClass('fullscreen');
      }
    }
  };

  BookView.prototype.getView = function getView() {
    return this.view;
  };

  BookView.prototype.getBookmarksView = function getBookmarksView() {
    return this.bookmarksView;
  };

  BookView.prototype.getThumbnailsView = function getThumbnailsView() {
    return this.thumbnailsView;
  };

  BookView.prototype.getSearchView = function getSearchView() {
    return this.searchView;
  };

  BookView.prototype.getForms = function getForms() {
    return [];
  };

  BookView.prototype.getLinks = function getLinks() {
    return ['cmdZoomIn', 'cmdZoomOut', 'cmdDefaultZoom', 'cmdToc', 'cmdFastBackward', 'cmdBackward', 'cmdBigBackward', 'cmdForward', 'cmdBigForward', 'cmdFastForward', 'cmdSave', 'cmdPrint', 'cmdFullScreen', 'cmdSmartPan', 'cmdSinglePage', 'cmdSounds', 'cmdStats', 'cmdShare', 'cmdLightingUp', 'cmdLightingDown', 'cmdCloseToc', 'cmdCloseShare', 'cmdBookmarks', 'cmdSearch', 'cmdThumbnails', 'cmdPendingPlay', 'cmdFacebook', 'cmdTwitter', 'cmdEmail'];
  };

  BookView.prototype.getWidgets = function getWidgets() {
    return ['widLoadingProgress', 'widUserMessage', 'widFloatWnd', 'widShare', 'widTocMenu', 'widBookmarks', 'widThumbnails', 'widSearch', 'widControls', 'widSettings', 'widLoading', 'widPendingPlay'];
  };

  BookView.prototype.getInputs = function getInputs() {
    return ['inpPage', 'inpPages'];
  };

  BookView.prototype.getTexts = function getTexts() {
    return ['txtLoadingProgress', 'txtUserMessage', 'txtShareLink'];
  };

  BookView.prototype.getTemplate = function getTemplate() {
    return {
      html: 'dist/js/3d-flip-book/templates/default-book-view.html',
      styles: ['dist/js/3d-flip-book/css/black-book-view.css'],
      links: [{
        rel: 'stylesheet',
        href: 'dist/js/3d-flip-book/css/font-awesome.min.css'
      }],
      script: 'dist/js/3d-flip-book/js/default-book-view.js'
    };
  };

  return BookView;
}(_View3.default);

BookView.PAGE_HANDLER_DELAY = 1000;
exports.default = BookView;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BookPropsBuilder2 = __webpack_require__(9);

var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClbBookPropsBuilder = function (_BookPropsBuilder) {
  _inherits(ClbBookPropsBuilder, _BookPropsBuilder);

  function ClbBookPropsBuilder(context, pageCallback, pages, onReady, style) {
    _classCallCheck(this, ClbBookPropsBuilder);

    var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady, style));

    _this.calcSheets(pages);
    _this.pages = pages;
    _this.pageCallback = pageCallback;
    _this.binds = {
      pageCallback: pageCallback.bind(_this)
    };
    _this.imageFactory = new _ImageFactory2.default(context);

    if (pages > 0) {
      var test = _this.imageFactory.build(pageCallback(0), 0, _this.defaults.sheet.widthTexels, _this.defaults.sheet.heightTexels, _this.defaults.sheet.color);
      test.onLoad = function () {
        _this.calcProps(test.width, test.height);
        test.dispose();
        _this.ready();
      };
    } else {
      _this.props = _this.defaults;
      _this.ready();
    }
    return _this;
  }

  return ClbBookPropsBuilder;
}(_BookPropsBuilder3.default);

exports.default = ClbBookPropsBuilder;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _SheetBlock2 = __webpack_require__(10);

var _SheetBlock3 = _interopRequireDefault(_SheetBlock2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Cover = function (_SheetBlock) {
  _inherits(Cover, _SheetBlock);

  function Cover(visual, p, angle, state) {
    _classCallCheck(this, Cover);

    return _possibleConstructorReturn(this, _SheetBlock.call(this, visual, p, 0, 1, angle, state));
  }

  Cover.prototype.getProps = function getProps() {
    return _extends({}, this.p.cover, {
      sheets: 1
    });
  };

  Cover.prototype.loadPoints = function loadPoints() {
    var openedInterpolationIndeces = [[2, 3, 4], [2, 3, 4, 5, 6]],
        closedInterpolationIndeces = [[0, 1, 2], [0, 1, 2]],
        interpolationPoints = [{
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0, 0.2831, 0.6256, 0.8082, 0.9909], [0, 0.2603, 0.5936, 0.7763, 0.9589], [0, 0.1370, 0.3881, 0.5342, 0.6758], [0, 0, 0, 0, 0]],
      y: [[0, 0, 0, 0, 0], [0, 0.02, 0.005, -0.001, -0.0025], [0, 0.04, 0.01, -0.002, -0.005], [0, 0.2466, 0.4795, 0.5708, 0.6758], [0, 0.2877, 0.6347, 0.8174, 1.0000]]
    }, {
      x: [[0, 0.2877, 0.6347, 0.8174, 1.0000], [0, 0.2831, 0.6256, 0.8082, 0.9909], [0, 0.2603, 0.5936, 0.7763, 0.9589], [0.000, 0.233, 0.563, 0.746, 0.927], [0.000, 0.144, 0.433, 0.613, 0.796], [0.000, 0.070, 0.288, 0.455, 0.626], [0, 0, 0, 0, 0]],
      y: [[0, 0, 0, 0, 0], [0, 0.02, 0.005, -0.001, -0.0025], [0, 0.04, 0.01, -0.002, -0.005], [0.000, 0.168, 0.269, 0.270, 0.255], [0.000, 0.245, 0.435, 0.458, 0.460], [0.000, 0.278, 0.544, 0.614, 0.673], [0, 0.2877, 0.6347, 0.8174, 1.0000]]
    }];
    return {
      interpolationPoints: interpolationPoints,
      openedInterpolationIndeces: openedInterpolationIndeces,
      closedInterpolationIndeces: closedInterpolationIndeces
    };
  };

  return Cover;
}(_SheetBlock3.default);

exports.default = Cover;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _SheetCssLayer = __webpack_require__(40);

var _SheetCssLayer2 = _interopRequireDefault(_SheetCssLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CssLayersManager = function () {
  function CssLayersManager(book) {
    _classCallCheck(this, CssLayersManager);

    this.book = book;
    this.props = book.p.cssLayerProps;
    this.visual = book.visual;
    this.pageManager = book.pageManager;
    this.wrappers = {};
    this.pendings = [];
  }

  CssLayersManager.prototype.getActives = function getActives() {
    var page = this.book.getPage(),
        pages = this.book.getBookPages(),
        acs = page === 0 || page === pages - 1 ? [page] : [page, page + 1];
    if (!this.wrappers[0] && page !== 0) {
      acs = [0].concat(acs);
    }
    return acs;
  };

  CssLayersManager.prototype.dispose = function dispose() {
    for (var _iterator = Object.values(this.wrappers), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var w = _ref;

      w.layers.forEach(function (l) {
        return l.dispose();
      });
    }
    delete this.wrappers;
  };

  CssLayersManager.prototype.show = function show() {
    var _this = this;

    this.hidden = false;

    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return 'break';
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return 'break';
        _ref2 = _i2.value;
      }

      var n = _ref2;

      var w = _this.wrappers[n];
      if (w) {
        if (w.state === 'ready' && w.layers.length) {
          var block = _this.book.getBlockByPage(n);
          w.layers.forEach(function (l) {
            if (l.isHidden()) {
              l.update(block);
              l.show();
            }
          });
        }
      } else {
        var _w = _this.wrappers[n] = {
          state: 'loading',
          layers: []
        };
        Promise.resolve().then(function () {
          _this.pageManager.getLayers(n, function (layers) {
            var finish = function finish() {
              if (layers.length && _this.wrappers) {
                var _block = _this.book.getBlockByPage(n);
                for (var _iterator3 = layers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                  var _ref3;

                  if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    _ref3 = _iterator3[_i3++];
                  } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                  }

                  var l = _ref3;

                  var sl = new _SheetCssLayer2.default(_this.visual, _block, _extends({}, _this.props, { pageNumber: n }));
                  _w.layers.push(sl);
                  sl.set(l.css, l.html, l.js);
                }
                setTimeout(function () {
                  if (!_this.hidden && ~_this.getActives().indexOf(n)) {
                    _w.layers.forEach(function (l) {
                      return l.show();
                    });
                  }
                }, 10);
              }
              _w.state = 'ready';
            };
            if (_this.wrappers && (n === 0 || _this.wrappers[0].state !== 'loading')) {
              finish();
              if (n === 0) {
                for (var _iterator4 = _this.pendings, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                  var _ref4;

                  if (_isArray4) {
                    if (_i4 >= _iterator4.length) break;
                    _ref4 = _iterator4[_i4++];
                  } else {
                    _i4 = _iterator4.next();
                    if (_i4.done) break;
                    _ref4 = _i4.value;
                  }

                  var f = _ref4;

                  f();
                }
                _this.pendings = [];
              }
            } else {
              _this.pendings.push(finish);
            }
          });
        });
      }
    };

    for (var _iterator2 = this.getActives(), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
  };

  CssLayersManager.prototype.hide = function hide() {
    this.hidden = true;
    var wait = [];
    for (var _iterator5 = Object.values(this.wrappers), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _w2 = _ref5;

      _w2.layers.forEach(function (l) {
        return wait.push(l.hide());
      });
    }
    return Promise.all(wait);
  };

  return CssLayersManager;
}();

exports.default = CssLayersManager;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(1);

var _Cache = __webpack_require__(14);

var _Cache2 = _interopRequireDefault(_Cache);

var _LoadingAnimation = __webpack_require__(55);

var _LoadingAnimation2 = _interopRequireDefault(_LoadingAnimation);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

var _TextureAnimator = __webpack_require__(63);

var _TextureAnimator2 = _interopRequireDefault(_TextureAnimator);

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageManager = function () {
  function PageManager(visual, book, p) {
    _classCallCheck(this, PageManager);

    this.visual = visual;
    this.book = book;
    this.pageQuery = '';
    this.p = p;
    this.pageCache = new _Cache2.default(p.cachedPages);
    this.resourcesCache = new _Cache2.default();

    this.canvases = [];
    for (var i = 0; i < 10; ++i) {
      var c = _GraphUtils2.default.createCanvas();
      this.canvases.push({ c: c, ctx: c.getContext('2d') });
    }
    this.nextCanvas = 0;

    this.imageFactory = new _ImageFactory2.default(_extends({}, visual, { dispatchEvent: book.dispatchEvent.bind(book), renderCanvas: this.canvases[0].c, renderCanvasCtx: this.canvases[0].ctx }), this.resourcesCache);

    this.loadings = [];
    this.renderQueue = [];
    this.predictedRequests = [];

    this.tmpMaterial = new _libs.THREE.MeshBasicMaterial();
    visual.addObject(new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(1e-3, 1e-3), this.tmpMaterial));

    this.loadingAnimation = true;
    this.loading = {};
    this.loading[p.cover.color] = this.createLoadingTexture(p.cover);
    if (p.page.color !== p.cover.color) {
      this.loading[p.page.color] = this.createLoadingTexture(p.page);
    }

    this.book.addEventListener('afterAnimation', this.loadPredictedPages.bind(this));

    this.turnOnEvents();

    visual.addRenderCallback(this.update.bind(this));

    Promise.resolve().then(this.updateRenderQueue.bind(this));
  }

  PageManager.prototype.createLoadingTexture = function createLoadingTexture(p) {
    var spriteTiles = 6,
        heightTexels = p.height / p.width * p.widthTexels,
        scale = Math.sqrt(4.5 * 210 * 4.5 * 297 / (p.widthTexels * heightTexels)),
        animation = new _LoadingAnimation2.default(scale * p.widthTexels, scale * heightTexels, p.color),
        animator = new _TextureAnimator2.default(animation.createSprite(spriteTiles), spriteTiles, 1, spriteTiles, 0.2);
    animation.dispose();
    return animator;
  };

  PageManager.prototype.dispose = function dispose() {
    this.turnOffEvents();
    for (var _iterator = Object.keys(this.loading), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var color = _ref;

      this.loading[color].dispose();
    }
    delete this.loading;
    this.resourcesCache.dispose();
    this.pageCache.dispose();
    for (var _iterator2 = this.canvases, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var o = _ref2;

      o.c.height = o.c.width = 0;
    }
    delete this.canvases;
  };

  PageManager.prototype.isCover = function isCover(n) {
    return n < 2 || n >= 2 * (this.p.sheets + 1);
  };

  PageManager.prototype.isMobile = function isMobile() {
    return this.visual.isMobile();
  };

  PageManager.prototype.getPageState = function getPageState(n) {
    var object = this.pageCache.get(n);
    return object ? object.state : undefined;
  };

  PageManager.prototype.enableLoadingAnimation = function enableLoadingAnimation(enable) {
    this.loadingAnimation = enable;
    for (var _iterator3 = this.loadings, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var o = _ref3;

      this.setupMaterial(o);
    }
  };

  PageManager.prototype.update = function update(dt) {
    if (this.loadingAnimation) {
      var loading = {};
      for (var _iterator4 = this.loadings, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var o = _ref4;

        if (o.isActive()) {
          loading[o.color] = true;;
        }
      }
      for (var _iterator5 = Object.keys(loading), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
        var _ref5;

        if (_isArray5) {
          if (_i5 >= _iterator5.length) break;
          _ref5 = _iterator5[_i5++];
        } else {
          _i5 = _iterator5.next();
          if (_i5.done) break;
          _ref5 = _i5.value;
        }

        var color = _ref5;

        this.loading[color].update(dt);
        this.book.updateThree();
      }
    }
  };

  PageManager.prototype.removeFromLoadings = function removeFromLoadings(o) {
    var i = this.loadings.indexOf(o);
    if (~i) {
      this.loadings.splice(i, 1);
    }
  };

  PageManager.prototype.removeFromRenderQueue = function removeFromRenderQueue(o) {
    var i = this.renderQueue.indexOf(o);
    if (~i) {
      this.renderQueue.splice(i, 1);
    }
  };

  PageManager.prototype.refreshPageQuery = function refreshPageQuery(n) {
    var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    this.pageQuery = query;
    var object = this.pageCache.get(n);
    if (object && object.wrapper && object.wrapper.setQuery) {
      if (!this.pageCache.remove(n)) {
        object.wrapper.setQuery(query);
        this.pushInRenderQueue(object);
      }
    }
  };

  PageManager.prototype.refreshZoom = function refreshZoom() {
    var _this = this;

    if (this.p.autoResolution.enable) {
      var es = [];
      this.pageCache.forEach(function (e) {
        es.push(e);
      });
      es.forEach(function (e) {
        var object = e[1];
        if (object && object.wrapper) {
          if (!_this.pageCache.remove(e[0])) {
            _this.pushInRenderQueue(object);
          }
        }
      });
    }
  };

  PageManager.prototype.getLayers = function getLayers(n, clb) {
    var _this2 = this;

    if (this.p.cssLayersLoader) {
      this.p.cssLayersLoader(n, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var object = _this2.pageCache.get(n);
        if (object) {
          if (object.state !== 'active') {
            object.pendings.push({ clb: clb, args: args });
          } else {
            clb.apply(undefined, args);
          }
        }
      });
    } else {
      clb([]);
    }
  };

  PageManager.prototype.resolvePendings = function resolvePendings(pendings) {
    for (var _iterator6 = pendings, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i6 >= _iterator6.length) break;
        _ref6 = _iterator6[_i6++];
      } else {
        _i6 = _iterator6.next();
        if (_i6.done) break;
        _ref6 = _i6.value;
      }

      var p = _ref6;

      try {
        p.clb.apply(p, p.args);
      } catch (e) {
        console.error(e);
      }
    }
    pendings.splice(0, pendings.length);
  };

  PageManager.prototype.rtlPageN = function rtlPageN(n) {
    return this.p.rtl ? this.book.getBookPages() - 1 - n : n;
  };

  PageManager.prototype.load = function load(material, n) {
    var _this3 = this;

    var pi = this.rtlPageN(n) < this.book.getPages() ? this.p.pageCallback(this.rtlPageN(n)) : { type: 'blank' },
        p = this.isCover(n) ? this.p.cover : this.p.page;
    var o = {
      n: n,
      texture: new _libs.THREE.Texture(),
      wrapper: null,
      state: 'loading',
      locked: function locked(n) {
        return o.state === 'loading' || o.state === 'rendering' || _this3.book.isActivePage(n);
      },
      color: p.color,
      isActive: function isActive() {
        return _this3.book.isActivePage(n);
      },
      isTop: function isTop() {
        return ~_this3.book.getTopPages().indexOf(n);
      },
      dispose: function dispose() {
        _this3.removeFromLoadings(o);
        _this3.removeFromRenderQueue(o);
        if (o.wrapper && o.wrapper.dispose) {
          o.wrapper.dispose();
        }
        o.texture.dispose();
        delete o.texture;
        delete o.wrapper;
      },
      pendings: []
    };
    o.texture.minFilter = _libs.THREE.LinearFilter;
    this.loadings.push(o);
    this.setMaterial(o, material);

    Promise.resolve().then(function () {
      if (o.texture) {
        o.widthTexels = pi.widthTexels || p.widthTexels;
        o.heightTexels = p.height / p.width * p.widthTexels;
        var res = _this3.calcResolution(o);
        o.wrapper = _this3.imageFactory.build(pi, pi.number === undefined ? _this3.rtlPageN(n) : pi.number, res.width, res.height, p.color, _this3.p.injector);
        if (o.wrapper.setQuery) {
          o.wrapper.setQuery(_this3.pageQuery);
        }
        o.simulate = pi.interactive ? (o.wrapper.simulate || function () {
          return undefined;
        }).bind(o.wrapper) : undefined;
        o.wrapper.onLoad = function () {
          o.state = 'loaded';
          _this3.pushInRenderQueue(o);
          _this3.book.dispatchEvent({
            type: 'loadedPage',
            page: n
          });
        };
        o.wrapper.onChange = function (image) {
          if (o.texture) {
            _this3.removeFromLoadings(o);
            if (o.material) {
              o.material.map = o.texture;
              o.material.color = new _libs.THREE.Color(0xFFFFFF);
              o.material.needsUpdate = true;
            }
            o.texture.image = image;
            o.texture.needsUpdate = true;
            o.texture.onUpdate = function () {
              setTimeout(function () {
                if (o.state !== 'queuedForRender') {
                  o.state = 'active';
                  _this3.resolvePendings(o.pendings);
                }
                delete _this3.rendering;
                //this.updateRenderQueue();
              }, 100);
            };
            _this3.tmpMaterial.map = o.texture;
            _this3.tmpMaterial.needsUpdate = true;
          }
        };
      }
    });
    this.book.dispatchEvent({
      type: 'loadPage',
      page: n
    });
    return this.pageCache.put(n, o);
  };

  PageManager.prototype.isSinglePage = function isSinglePage(o) {
    return this.p.singlePage || !o.n || o.n === this.book.getBookPages() - 1;
  };

  PageManager.prototype.calcResolution = function calcResolution(o) {
    var res = void 0;
    if (this.p.autoResolution.enable) {
      var k = Math.min((this.isSinglePage(o) ? 1 : 0.5) * this.visual.width() / o.widthTexels, this.visual.height() / o.heightTexels);
      res = {
        width: this.p.autoResolution.k * this.p.zoom * k * o.widthTexels,
        height: this.p.autoResolution.k * this.p.zoom * k * o.heightTexels
      };
    } else {
      res = {
        width: o.widthTexels,
        height: o.heightTexels
      };
    }
    return res;
  };

  PageManager.prototype.pushInRenderQueue = function pushInRenderQueue(o) {
    if (o.state !== 'queuedForRender' && o.state !== 'loading') {
      o.state = 'queuedForRender';
      this.renderQueue.push(o);
      // this.updateRenderQueue();
    }
  };

  PageManager.prototype.updateRenderQueue = function updateRenderQueue() {
    if (this.canvases) {
      var p = this.p;
      if (!this.rendering) {
        if (p.renderWhileFlipping || !this.book.isProcessing()) {
          var active = void 0,
              top = void 0;
          for (var _iterator7 = this.renderQueue, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
            var _ref7;

            if (_isArray7) {
              if (_i7 >= _iterator7.length) break;
              _ref7 = _iterator7[_i7++];
            } else {
              _i7 = _iterator7.next();
              if (_i7.done) break;
              _ref7 = _i7.value;
            }

            var _o2 = _ref7;

            if (!active && _o2.isActive()) {
              active = _o2;
            }
            if (_o2.isTop()) {
              top = _o2;
              break;
            }
          }
          this.rendering = top || active;

          if (this.isMobile() && p.renderInactivePagesOnMobile || !this.isMobile() && p.renderInactivePages) {
            if (!this.rendering) {
              var ud = this.book.getUserDirection(),
                  near = {};
              for (var _iterator8 = this.renderQueue, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
                var _ref8;

                if (_isArray8) {
                  if (_i8 >= _iterator8.length) break;
                  _ref8 = _iterator8[_i8++];
                } else {
                  _i8 = _iterator8.next();
                  if (_i8.done) break;
                  _ref8 = _i8.value;
                }

                var o = _ref8;

                var id = ud.lastTopPage < o.n;
                if (!near[id] || Math.abs(near[id].n - ud.lastTopPage) > Math.abs(o.n - ud.lastTopPage)) {
                  near[id] = o;
                }
                this.rendering = near[ud.direction === 1] || near[ud.direction !== 1];
              }
            }
          }
          if (this.rendering) {
            if (this.rendering.wrapper.startRender) {
              this.removeFromRenderQueue(this.rendering);
              this.rendering.state = 'rendering';
              var _o = this.canvases[this.nextCanvas];
              this.nextCanvas = (this.nextCanvas + 1) % this.canvases.length;
              this.rendering.wrapper.setRenderCanvas(_o.c, _o.ctx);
              this.rendering.wrapper.setResolution(this.calcResolution(this.rendering));
              this.rendering.wrapper.startRender();
            } else {
              delete this.rendering;
            }
          }
        }
      } else {
        this.book.updateThree();
      }
      setTimeout(this.updateRenderQueue.bind(this), 100);
    }
  };

  PageManager.prototype.turnOnEvents = function turnOnEvents() {
    this.transferEvents = true;
  };

  PageManager.prototype.turnOffEvents = function turnOffEvents() {
    var mouseup = _libs.$.Event('mouseup'),
        mouseout = _libs.$.Event('mouseout');
    this.pageCache.forEach(function (ent) {
      var object = ent[1];
      if (object.simulate) {
        object.simulate(mouseup, undefined, 0, 0);
        object.simulate(mouseout, undefined, 0, 0);
      }
    });
    this.transferEvents = false;
  };

  PageManager.prototype.transferEventToTexture = function transferEventToTexture(n, e, data) {
    if (this.transferEvents) {
      var toObject = this.getOrLoadTextureObject(undefined, n);
      if (toObject.wrapper) {
        var uv = data.uv,
            toDoc = toObject.wrapper.getSimulatedDoc();
        this.pageCache.forEach(function (ent) {
          var object = ent[1];
          if (object.simulate) {
            object.simulate(e, toDoc, uv.x, uv.y);
          }
        });
      }
    }
  };

  PageManager.prototype.loadPredictedPages = function loadPredictedPages() {
    var _this4 = this;

    Promise.resolve().then(function () {
      var ud = _this4.book.getUserDirection();
      _this4.predictedRequests = [];
      for (var i = 0, p = ud.lastTopPage + ud.direction; i < _this4.p.preloadPages; ++i, p += ud.direction) {
        _this4.predictedRequests.push(p);
      }
      for (var _iterator9 = _this4.predictedRequests, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
        var _ref9;

        if (_isArray9) {
          if (_i9 >= _iterator9.length) break;
          _ref9 = _iterator9[_i9++];
        } else {
          _i9 = _iterator9.next();
          if (_i9.done) break;
          _ref9 = _i9.value;
        }

        var _p = _ref9;

        if (_p >= 0 && _p < _this4.book.getBookPages() && !_this4.pageCache.get(_p)) {
          _this4.load(undefined, _p);
        }
      }
    });
  };

  PageManager.prototype.setMaterial = function setMaterial(o, material) {
    this.pageCache.forEach(function (e) {
      var ob = e[1];
      if (o !== ob && ob.material === material) {
        delete ob.material;
      }
    });
    if (material && material !== o.material) {
      o.material = material;
      this.setupMaterial(o);
    }
  };

  PageManager.prototype.setupMaterial = function setupMaterial(o) {
    o.material.map = o.texture.image ? o.texture : this.loadingAnimation ? this.loading[o.color].texture : null;
    if (!o.material.map) {
      o.material.color = new _libs.THREE.Color(o.color);
    }
    o.material.needsUpdate = true;
  };

  PageManager.prototype.getOrLoadTextureObject = function getOrLoadTextureObject(material, n) {
    var object = this.pageCache.get(n);
    if (!object) {
      object = this.load(material, n);
    } else {
      this.setMaterial(object, material);
    }

    return object;
  };

  PageManager.prototype.setTexture = function setTexture(material, n) {
    this.getOrLoadTextureObject(material, n);
  };

  return PageManager;
}();

exports.default = PageManager;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _BookPropsBuilder2 = __webpack_require__(9);

var _BookPropsBuilder3 = _interopRequireDefault(_BookPropsBuilder2);

var _Pdf = __webpack_require__(19);

var _Pdf2 = _interopRequireDefault(_Pdf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PdfBookPropsBuilder = function (_BookPropsBuilder) {
  _inherits(PdfBookPropsBuilder, _BookPropsBuilder);

  function PdfBookPropsBuilder(src, onReady, style) {
    _classCallCheck(this, PdfBookPropsBuilder);

    var _this = _possibleConstructorReturn(this, _BookPropsBuilder.call(this, onReady, style));

    _this.pdf = new _Pdf2.default(src);
    _this.pageDescription = {
      type: 'pdf',
      src: _this.pdf,
      interactive: true
    };
    _this.binds = {
      pageCallback: _this.pageCallback.bind(_this)
    };
    _this.pdf.getHandler(_this.init.bind(_this));
    return _this;
  }

  PdfBookPropsBuilder.prototype.dispose = function dispose() {
    this.pdf.dispose();
    _BookPropsBuilder.prototype.dispose.call(this);
  };

  PdfBookPropsBuilder.prototype.init = function init(handler) {
    var _this2 = this;

    var pages = this.pdf.getPagesNum();
    this.pages = pages;
    this.calcSheets(pages);
    if (pages > 0) {
      handler.getPage(1).then(function (page) {
        var viewport = page.getViewport({ scale: 1 }),
            size = { width: viewport.width, height: viewport.height };
        _this2.calcProps(size.width, size.height);
        _this2.ready();
      }).catch(function (e) {
        console.error(e);
      });
    } else {
      this.props = this.defaults;
      this.ready();
    }
  };

  PdfBookPropsBuilder.prototype.pageCallback = function pageCallback(n) {
    return this.pageDescription;
  };

  return PdfBookPropsBuilder;
}(_BookPropsBuilder3.default);

exports.default = PdfBookPropsBuilder;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PdfLinksHandler = function () {
  function PdfLinksHandler(pdf, ctrl, element) {
    _classCallCheck(this, PdfLinksHandler);

    this.pdf = pdf;
    this.ctrl = ctrl;
    this.element = (0, _libs.$)(element);
    this.cursors = [];
  }

  PdfLinksHandler.prototype.dispose = function dispose() {};

  PdfLinksHandler.prototype.setHandler = function setHandler(handler) {
    this.handler = handler;
  };

  PdfLinksHandler.prototype.defaultHandler = function defaultHandler(type, destination) {
    if (type === 'internal') {
      this.ctrl.goToPage(destination);
    } else if (type === 'external') {
      window.open(destination, '_blank');
    }
  };

  PdfLinksHandler.prototype.callHandlers = function callHandlers(type, destination) {
    if (!this.handler || !this.handler(type, destination)) {
      this.defaultHandler(type, destination);
    }
  };

  PdfLinksHandler.prototype.handleEvent = function handleEvent(data) {
    var _this = this;

    var e = data.event,
        anno = data.annotation;
    switch (e.type) {
      case 'mouseover':
        {
          this.cursors.push(this.element.css('cursor'));
          this.element.css('cursor', 'pointer');
          break;
        }
      case 'mouseout':
        {
          this.element.css('cursor', this.cursors.pop() || '');
          break;
        }
      case 'touchtap':
      case 'click':
        {
          if (anno.url) {
            this.callHandlers('external', anno.url);
          } else if (anno.dest) {
            this.pdf.getDestination(anno.dest).then(function (number) {
              return _this.callHandlers('internal', number);
            });
          }
          break;
        }
    }
  };

  return PdfLinksHandler;
}();

exports.default = PdfLinksHandler;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Finder = __webpack_require__(17);

var _Finder2 = _interopRequireDefault(_Finder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchEngine = function () {
  function SearchEngine(pageCallback, pages) {
    _classCallCheck(this, SearchEngine);

    this.pageCallback = pageCallback;
    this.pages = pages;
    this.results = [];
  }

  SearchEngine.prototype.setQuery = function setQuery(query) {
    this.query = query;
    this.update = true;
    this.process();
  };

  SearchEngine.prototype.process = function process() {
    var _this = this;

    if (this.update) {
      var results = this.results;
      this.results = [];
      if (this.onPageHitsChanged) {
        for (var _iterator = results, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var res = _ref;

          this.onPageHitsChanged(undefined, '');
        }
      }
      this.update = false;
      this.page = 0;
      this.stamp = Date.now();
      if (this.query.length > 1) {
        this.process();
      }
    } else {
      if (this.page < this.pages) {
        var stamp = this.stamp;
        this.find(this.pageCallback(this.page)).then(function (contexts) {
          if (stamp === _this.stamp) {
            if (contexts.length) {
              _this.results.push({
                page: _this.page,
                contexts: contexts
              });
            }
            if (_this.onPageHitsChanged) {
              _this.onPageHitsChanged(_this.page, _this.query);
            }
            ++_this.page;
            _this.process();
          }
        });
      }
    }
  };

  SearchEngine.prototype.find = function find(pi) {
    var _this2 = this;

    var next = void 0;
    if (pi.type === 'pdf') {
      next = new Promise(function (resolve) {
        pi.src.getHandler(function () {
          var n = pi.number === undefined ? _this2.page : pi.number;
          if (pi.src.getPageType(n) === 'right') {
            resolve([]);
          } else {
            pi.src.getPage(n).then(function (page) {
              page.getTextContent().then(function (textContent) {
                resolve(new _Finder2.default(textContent.items.map(function (item) {
                  return item.str;
                }), _this2.query, { hits: false }).getContexts());
              });
            }).catch(function () {
              return resolve([]);
            });
          }
        });
      });
    } else {
      next = Promise.resolve([]);
    }
    return next;
  };

  return SearchEngine;
}();

exports.default = SearchEngine;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

var _WidgetController2 = __webpack_require__(22);

var _WidgetController3 = _interopRequireDefault(_WidgetController2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ShareController = function (_WidgetController) {
  _inherits(ShareController, _WidgetController);

  function ShareController(view, bookCtrl) {
    var linkBuilder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (page) {
      return page;
    };

    _classCallCheck(this, ShareController);

    var _this = _possibleConstructorReturn(this, _WidgetController.call(this, view, 'widShare'));

    _this.bookCtrl = bookCtrl;
    _this.linkBuilder = linkBuilder;
    bookCtrl.addEventListener('endFlip', _this.updateView.bind(_this));
    return _this;
  }

  ShareController.prototype.cmdCloseShare = function cmdCloseShare() {
    this.hide();
  };

  ShareController.prototype.clickLink = function clickLink(u) {
    var blank = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    var a = (0, _libs.$)('<a href="' + u + '"' + (blank ? ' target="_blank"' : '') + '></a>').appendTo(this.view.getContainer());
    a[0].click();
    a.remove();
  };

  ShareController.prototype.cmdFacebook = function cmdFacebook() {
    this.clickLink('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(this.getLink()));
  };

  ShareController.prototype.cmdTwitter = function cmdTwitter() {
    this.clickLink('http://twitter.com/share?url=' + encodeURIComponent(this.getLink()));
  };

  ShareController.prototype.cmdEmail = function cmdEmail() {
    this.clickLink('mailto:?subject=' + (0, _libs.tr)('We wanted you to see this book') + '&body=' + (0, _libs.tr)('Check out this site') + ' ' + encodeURIComponent(this.getLink()), false);
  };

  ShareController.prototype.getLink = function getLink() {
    return this.linkBuilder(this.bookCtrl.getPageForGUI());
  };

  ShareController.prototype.updateView = function updateView() {
    if (this.view) {
      var _arr = ['cmdCloseShare', 'cmdFacebook', 'cmdTwitter', 'cmdEmail'];

      for (var _i = 0; _i < _arr.length; _i++) {
        var cmd = _arr[_i];
        this.view.setState(cmd, {
          enable: true,
          visible: true,
          active: false
        });
      }
      this.view.setState('txtShareLink', {
        value: this.getLink(),
        visible: true
      });
      _WidgetController.prototype.updateView.call(this);
    }
  };

  return ShareController;
}(_WidgetController3.default);

exports.default = ShareController;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _CSSLayer = __webpack_require__(13);

var _CSSLayer2 = _interopRequireDefault(_CSSLayer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SheetCssLayer = function () {
  function SheetCssLayer(visual, block, props) {
    _classCallCheck(this, SheetCssLayer);

    this.visual = visual;
    var size = block.getTopSize();
    this.layer = new _CSSLayer2.default(size.width, size.height, props);

    this.update(block);
    this.visual.addCssObject(this.layer);
  }

  SheetCssLayer.prototype.dispose = function dispose() {
    this.layer.dispose();
    this.visual.removeCssObject(this.layer);
  };

  SheetCssLayer.prototype.isHidden = function isHidden() {
    return this.layer.isHidden();
  };

  SheetCssLayer.prototype.hide = function hide() {
    return this.layer.hide();
  };

  SheetCssLayer.prototype.show = function show() {
    return this.layer.show();
  };

  SheetCssLayer.prototype.set = function set(css, html, js) {
    this.layer.setData(css, html, js);
  };

  SheetCssLayer.prototype.update = function update(block) {
    this.block = block;
    this.block.getTopWorldRotation(this.layer.rotation);
    this.block.getTopWorldPosition(this.layer.position);
  };

  return SheetCssLayer;
}();

exports.default = SheetCssLayer;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SheetPhysics = function () {
  SheetPhysics.targetForceClb = function targetForceClb(o, a, v, ch) {
    var l = a * this.r;
    return 100 * this.m * this.g * (2 / (1 + Math.exp(10 * (l - this.tl))) - 1) - this.m * 40 * v;
  };

  SheetPhysics.hoverCornerForceClb = function hoverCornerForceClb(o, v, l, ch) {
    return 5;
  };

  SheetPhysics.prototype.getTargetForceClb = function getTargetForceClb(mass, targetAngle) {
    return SheetPhysics.targetForceClb.bind({
      g: this.p.gravity,
      m: mass,
      tl: targetAngle * this.p.r,
      r: this.p.r
    });
  };

  SheetPhysics.dragForceClb = function dragForceClb(o, a, v, ch) {
    return o.flbt * o.m * (10 * o.g * ch - 50 * v / (1 + Math.exp(3.5 * Math.abs(ch))));
  };

  SheetPhysics.dragCornerForceClb = function dragCornerForceClb(o, a, v, ch) {
    return 15 * (2 / (1 + Math.exp(10 * (a - this.ta) * o.r)) - 1);
  };

  SheetPhysics.getDragCornerForceClb = function getDragCornerForceClb(targetAngle) {
    return SheetPhysics.dragCornerForceClb.bind({
      ta: targetAngle
    });
  };

  function SheetPhysics() {
    var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    var gravity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var cornerDeviation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.15;
    var fps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 240;

    _classCallCheck(this, SheetPhysics);

    this.p = {
      r: r,
      cornerDeviation: cornerDeviation,
      l: Math.PI * r,
      startDt: 1 / fps,
      gravity: gravity,
      margin: 0.002 * r,
      infM: 1e4,
      attempts: 16,
      maxIterations: 100
    };
    this.os = [];
  }

  SheetPhysics.prototype.dispose = function dispose() {
    this.os = [];
  };

  SheetPhysics.prototype.getSize = function getSize() {
    return this.os.length;
  };

  SheetPhysics.prototype.addObject = function addObject(mass, angle, velocity, flexibility, cornerHeight, simulateClb, removeClb) {
    var forceClb = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {
      return 0;
    };
    var cornerForceClb = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : function () {
      return 0;
    };

    var no = {
      id: _MathUtils2.default.getUnique(),
      m: mass,
      v: velocity,
      l: angle * this.p.r,
      f: forceClb,
      cf: cornerForceClb,
      ch: cornerHeight,
      flbt: flexibility,
      simulateClb: simulateClb,
      removeClb: removeClb
    };
    var i = this.os.findIndex(function (o) {
      return no.l <= o.l;
    });
    i = ~i ? i : this.os.length;
    this.os.splice(i, 0, no);
    return no.id;
  };

  SheetPhysics.prototype.getParametrMap = function getParametrMap(name) {
    var map = {
      mass: 'm',
      velocity: 'v',
      flexibility: 'flbt',
      cornerHeight: 'ch',
      simulateClb: 'simulateClb',
      removeClb: 'removeClb',
      forceClb: 'f',
      cornerForceClb: 'cf'
    };
    return map[name];
  };

  SheetPhysics.prototype.setParametr = function setParametr(id, name, value) {
    var o = this.os.find(function (o) {
      return o.id === id;
    });
    if (name === 'angle') {
      o.l = value * this.p.r;
    } else {
      o[this.getParametrMap(name)] = value;
    }
  };

  SheetPhysics.prototype.getParametr = function getParametr(id, name) {
    var o = this.os.find(function (o) {
      return o.id === id;
    });
    var value = void 0;
    if (name === 'angle') {
      value = o.l / this.p.r;
    } else {
      value = o[this.getParametrMap(name)];
    }
    return value;
  };

  SheetPhysics.prototype.simulate = function simulate(T) {
    var t = 0,
        dt = this.p.startDt,
        attempt = 0,
        it = 0;

    while (t < T && it < this.p.maxIterations) {
      if (dt > T - t) {
        dt = T - t;
      }
      var nos = this.integrate(this.os, dt),
          ci = this.findCollisions(nos);
      if (ci.num > 1 && attempt < this.p.attempts) {
        dt /= 2;
        ++attempt;
      } else {
        if (ci.num === 1) {
          var scos = this.solveCollision(nos[ci.last - 1], nos[ci.last]);
          nos[ci.last - 1] = scos[0];
          nos[ci.last] = scos[1];
        } else if (ci.num > 1) {
          var gs = [];
          var last = -2;
          for (var _iterator = ci.all, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var i = _ref;

            if (i - last > 1) {
              gs.push([]);
            }
            gs[gs.length - 1].push(i);
            last = i;
          }
          for (var _iterator2 = gs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
              if (_i2 >= _iterator2.length) break;
              _ref2 = _iterator2[_i2++];
            } else {
              _i2 = _iterator2.next();
              if (_i2.done) break;
              _ref2 = _i2.value;
            }

            var g = _ref2;

            var sg = void 0,
                i0 = void 0;
            if (nos[g[0]].l > Math.PI / 2 * this.p.r) {
              sg = -1;
              i0 = g[g.length - 1];
            } else {
              sg = 1;
              i0 = g[0];
            }
            for (var _i3 = i0; _i3 < nos.length && _i3 > -1; _i3 += sg) {
              var o = nos[_i3 + sg];
              if (o && sg * (o.l - nos[_i3].l) <= this.p.margin) {
                o.l = nos[_i3].l + sg * 2 * this.p.margin;
                if (o.l > this.p.l || o.l < 0) {
                  o.l = o.l > this.p.l ? this.p.l : 0;
                  o.ch = 0;
                  o.v = 0;
                  console.error('Bad collision');
                }
              } else {
                break;
              }
            }
          }
        }
        this.os = nos;
        this.findAndSolveCornerCollisions();
        t += dt;
        dt = this.p.startDt;
        attempt = 0;
      }
      ++it;
    }

    this.removeStatics();
  };

  SheetPhysics.prototype.removeStatics = function removeStatics() {
    var nos = [],
        notify = [[], []];
    for (var _iterator3 = this.os, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i4 >= _iterator3.length) break;
        _ref3 = _iterator3[_i4++];
      } else {
        _i4 = _iterator3.next();
        if (_i4.done) break;
        _ref3 = _i4.value;
      }

      var o = _ref3;

      if (o.simulateClb) {
        o.simulateClb(o.l / this.p.r, o.ch);
      }
      if ((o.l === this.p.l || o.l === 0) && o.v === 0) {
        if (o.removeClb !== undefined) {
          notify[(o.l !== this.p.l) + 0].push(o);
        }
      } else {
        nos.push(o);
      }
    }
    this.os = nos;
    for (var _iterator4 = notify[0].reverse(), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i5 >= _iterator4.length) break;
        _ref4 = _iterator4[_i5++];
      } else {
        _i5 = _iterator4.next();
        if (_i5.done) break;
        _ref4 = _i5.value;
      }

      var _o = _ref4;

      _o.removeClb(Math.PI, _o.ch);
    }
    for (var _iterator5 = notify[1], _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i6 >= _iterator5.length) break;
        _ref5 = _iterator5[_i6++];
      } else {
        _i6 = _iterator5.next();
        if (_i6.done) break;
        _ref5 = _i6.value;
      }

      var _o2 = _ref5;

      _o2.removeClb(0, _o2.ch);
    }
  };

  SheetPhysics.prototype.findAndSolveCornerCollisions = function findAndSolveCornerCollisions() {
    if (this.os.length) {
      var os = [_extends({}, this.os[0], {
        l: 0,
        m: this.p.infM,
        ch: 0
      })].concat(this.os, [_extends({}, this.os[0], {
        l: 1.05 * this.p.l,
        m: this.p.infM,
        ch: 0
      })]);

      for (var i = 1; i < os.length; ++i) {
        var a = os[i - 1],
            b = os[i],
            al = a.l + this.p.cornerDeviation * a.ch * this.p.r,
            bl = b.l + this.p.cornerDeviation * b.ch * this.p.r;
        if (1.05 * al > bl && a.ch > b.ch) {
          var dCh = a.ch - b.ch,
              dv = a.m / a.flbt + b.m / b.flbt,
              ka = a.m / a.flbt / dv,
              kb = b.m / b.flbt / dv;
          a.ch = a.ch - kb * dCh;
          b.ch = b.ch + ka * dCh;
        }
      }
    }
  };

  SheetPhysics.prototype.solveCollision = function solveCollision(a, b) {
    var mm = b.m + a.m,
        av = (-a.v * b.m + a.m * a.v + 2 * b.m * b.v) / mm,
        bv = (b.m * b.v - b.v * a.m + 2 * a.m * a.v) / mm;
    return [_extends({}, a, { v: av }), _extends({}, b, { v: bv })];
  };

  SheetPhysics.prototype.findCollisions = function findCollisions(os) {
    var ci = {
      num: 0,
      last: 0,
      all: []
    };
    for (var i = 1; i < os.length && ci.num < 2; ++i) {
      if (os[i - 1].l > os[i].l || this.isCollision(os[i - 1], os[i])) {
        if (os[i - 1].l > os[i].l) {
          ++ci.num;
        }
        ++ci.num;
        ci.last = i;
        if (ci.all.indexOf(i - 1) === -1) {
          ci.all.push(i - 1);
        }
        if (ci.all.indexOf(i) === -1) {
          ci.all.push(i);
        }
      }
    }
    return ci;
  };

  SheetPhysics.prototype.isCollision = function isCollision(a, b) {
    return Math.abs(a.l - b.l) < this.p.margin && a.v > b.v;
  };

  SheetPhysics.prototype.integrate = function integrate(os, dt) {
    var nos = [];
    for (var _iterator6 = os, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
      var _ref6;

      if (_isArray6) {
        if (_i7 >= _iterator6.length) break;
        _ref6 = _iterator6[_i7++];
      } else {
        _i7 = _iterator6.next();
        if (_i7.done) break;
        _ref6 = _i7.value;
      }

      var o = _ref6;

      var vl = _MathUtils2.default.rk4(this.dy.bind({
        g: this.p.gravity,
        r: this.p.r,
        m: o.m,
        f: o.f,
        cf: o.cf,
        ch: o.ch,
        flbt: o.flbt
      }), 0, dt, [o.v, o.l, o.ch]);
      var no = _extends({}, o, {
        v: vl[0],
        l: vl[1],
        ch: vl[2]
      });
      if (no.l <= 0 || no.l >= this.p.l) {
        no.l = no.l <= 0 ? 0 : this.p.l;
        no.v = 0;
        no.ch = 0;
      }
      nos.push(no);
    }
    return nos;
  };

  SheetPhysics.prototype.dy = function dy(t, y) {
    var v = y[0],
        l = y[1],
        ch = y[2],
        alf = l / this.r,
        f = this.f(this, alf, v, ch),
        cf = this.cf(this, alf, v, ch),
        cosAlf = Math.cos(alf),
        brf = 0.006 * Math.abs((Math.sign(cosAlf) - Math.sign(v)) * v) * Math.pow(cosAlf, 5);
    return [(-this.g * cosAlf * this.m + brf + f) / this.m, v + 0.01 * (Math.random() - 0.5), this.flbt * ((2 / (1 + Math.exp(-0.2 * cf)) - 1) * (1 - 2 / (1 + Math.exp(-5 * (Math.abs(ch) - 2)))) - ch)];
  };

  return SheetPhysics;
}();

exports.default = SheetPhysics;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SoundsEnviroment = function () {
  function SoundsEnviroment() {
    var template = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SoundsEnviroment);

    template = typeof template === 'function' ? template() : template;
    this.sounds = template.sounds || {};
    this.audio = {};
    if (this.sounds.startFlip) {
      this.audio.startFlip = new Audio(this.sounds.startFlip);
      this.audio.startFlip.volume = 0.5;
    }
    if (this.sounds.endFlip) {
      this.audio.endFlip = new Audio(this.sounds.endFlip);
      this.audio.endFlip.volume = 0.5;
    }
  }

  SoundsEnviroment.prototype.setEnabled = function setEnabled(enabled) {
    this.enabled = enabled;
  };

  SoundsEnviroment.prototype.togle = function togle() {
    this.enabled = !this.enabled;
  };

  SoundsEnviroment.prototype.dispose = function dispose() {
    delete this.audio.startFlip;
    delete this.audio.endFlip;
  };

  SoundsEnviroment.prototype.startFlip = function startFlip() {
    if (this.enabled && this.audio.startFlip) {
      this.audio.startFlip.play();
    }
  };

  SoundsEnviroment.prototype.endFlip = function endFlip() {
    if (this.enabled && this.audio.startFlip) {
      this.audio.startFlip.pause();
      this.audio.startFlip.currentTime = 0;
    }
    if (this.enabled && this.audio.endFlip) {
      this.audio.endFlip.play();
    }
  };

  SoundsEnviroment.prototype.subscribeFlips = function subscribeFlips(emitter) {
    emitter.addEventListener('startFlip', this.startFlip.bind(this));
    emitter.addEventListener('endFlip', this.endFlip.bind(this));
  };

  return SoundsEnviroment;
}();

exports.default = SoundsEnviroment;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _WidgetController2 = __webpack_require__(22);

var _WidgetController3 = _interopRequireDefault(_WidgetController2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TocController = function (_WidgetController) {
  _inherits(TocController, _WidgetController);

  function TocController(view, bookCtrl) {
    _classCallCheck(this, TocController);

    var _this = _possibleConstructorReturn(this, _WidgetController.call(this, view, 'widFloatWnd'));

    _this.bookCtrl = bookCtrl;
    _this.tab = 'none';
    return _this;
  }

  TocController.prototype.setThumbnails = function setThumbnails(thumbnails) {
    this.thumbnails = thumbnails;
    thumbnails.onNavigate = this.navigateThumbnails.bind(this);
    if (this.tab === 'none') {
      this.tab = 'thumbnails';
    }
    this.fireChange();
  };

  TocController.prototype.setSearch = function setSearch(search) {
    this.search = search;
    search.onNavigate = this.navigateSearch.bind(this);
    this.fireChange();
  };

  TocController.prototype.setBookmarks = function setBookmarks(bookmarks, pdf) {
    this.bookmarks = bookmarks;
    this.pdf = pdf;
    bookmarks.onNavigate = this.navigateBookmarks.bind(this);
    if (bookmarks.getSize()) {
      this.tab = 'bookmarks';
      this.isBookmarks = true;
    }
    this.fireChange();
  };

  TocController.prototype.cmdBookmarks = function cmdBookmarks() {
    this.tab = 'bookmarks';
    this.fireChange();
  };

  TocController.prototype.cmdThumbnails = function cmdThumbnails() {
    this.tab = 'thumbnails';
    this.fireChange();
  };

  TocController.prototype.cmdSearch = function cmdSearch() {
    this.tab = 'search';
    this.fireChange();
  };

  TocController.prototype.cmdCloseToc = function cmdCloseToc() {
    this.hide();
  };

  TocController.prototype.navigateThumbnails = function navigateThumbnails(number) {
    this.bookCtrl.goToPage(number);
  };

  TocController.prototype.navigateSearch = function navigateSearch(number) {
    this.bookCtrl.goToPage(number);
  };

  TocController.prototype.navigateBookmarks = function navigateBookmarks(item) {
    var _this2 = this;

    if (item.url) {
      window.open(item.url, '_blank');
    } else if (item.dest) {
      this.pdf.getDestination(item.dest).then(function (number) {
        return _this2.bookCtrl.goToPage(number);
      });
    }
  };

  TocController.prototype.updateView = function updateView() {
    var _this3 = this;

    if (this.view) {
      this.view.setState('widTocMenu', {
        enable: true,
        visible: true,
        active: false
      });
      this.view.setState('widThumbnails', {
        enable: true,
        visible: this.tab === 'thumbnails',
        active: false
      });
      this.view.setState('widSearch', {
        enable: true,
        visible: this.tab === 'search',
        active: false
      });
      this.view.setState('widBookmarks', {
        enable: true,
        visible: this.tab === 'bookmarks',
        active: false
      });
      this.view.setState('cmdBookmarks', {
        enable: true,
        visible: true,
        active: this.tab === 'bookmarks'
      });
      this.view.setState('cmdCloseToc', {
        enable: true,
        visible: true,
        active: false
      });
      this.view.setState('cmdThumbnails', {
        enable: true,
        visible: true,
        active: this.tab === 'thumbnails'
      });
      this.view.setState('cmdSearch', {
        enable: true,
        visible: true,
        active: this.tab === 'search'
      });
      Promise.resolve().then(function () {
        return _this3.thumbnails.setEnable(_this3.visible && _this3.tab === 'thumbnails');
      });
      _WidgetController.prototype.updateView.call(this);
    }
  };

  return TocController;
}(_WidgetController3.default);

exports.default = TocController;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(1);

var _ThreeUtils = __webpack_require__(21);

var _ThreeUtils2 = _interopRequireDefault(_ThreeUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resX = 11,
    resY = 2,
    resZ = 15,
    scale = 1,
    faces = [];

var frontGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
frontGeometry.translate(0.5 * scale, 0.5 * scale, scale);
var backGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resY - 1);
backGeometry.rotateY(Math.PI);
backGeometry.translate(0.5 * scale, 0.5 * scale, 0);
var leftGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
leftGeometry.rotateY(-Math.PI / 2);
leftGeometry.translate(0, 0.5 * scale, 0.5 * scale);
var rightGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resZ - 1, resY - 1);
rightGeometry.rotateY(Math.PI / 2);
rightGeometry.translate(scale, 0.5 * scale, 0.5 * scale);
var topGeometry = new _libs.THREE.PlaneGeometry(scale, scale, resX - 1, resZ - 1);
topGeometry.rotateX(-Math.PI / 2);
topGeometry.translate(0.5 * scale, scale, 0.5 * scale);
var bottomGeometry = topGeometry.clone();
bottomGeometry.translate(0, -scale, 0);
for (var _iterator = bottomGeometry.faces, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
  var _ref;

  if (_isArray) {
    if (_i >= _iterator.length) break;
    _ref = _iterator[_i++];
  } else {
    _i = _iterator.next();
    if (_i.done) break;
    _ref = _i.value;
  }

  var f = _ref;
  var _ref3 = [f.b, f.a];
  f.a = _ref3[0];
  f.b = _ref3[1];
}

var geometry = new _libs.THREE.Geometry();
geometry.vertices = [].concat(bottomGeometry.vertices, topGeometry.vertices);

var addFaces = function addFaces(fs, map) {
  for (var _iterator2 = fs, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var f = _ref2;

    geometry.faces.push(new _libs.THREE.Face3(map(f.a), map(f.b), map(f.c)));
  }
  faces.push(geometry.faces.length);
};

var mapVertices = function mapVertices(src, dst) {
  var map = [];
  var eq = function eq(a, b) {
    return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z) < 1e-4;
  };
  for (var i = 0; i < src.length; ++i) {
    for (var j = 0; j < dst.length; ++j) {
      if (eq(src[i], dst[j])) {
        map[i] = j;
        break;
      }
    }
  }
  return map;
};

var frontMap = mapVertices(frontGeometry.vertices, geometry.vertices);
var backMap = mapVertices(backGeometry.vertices, geometry.vertices);
var leftMap = mapVertices(leftGeometry.vertices, geometry.vertices);
var rightMap = mapVertices(rightGeometry.vertices, geometry.vertices);

addFaces(topGeometry.faces, function (i) {
  return i + bottomGeometry.vertices.length;
});
addFaces(bottomGeometry.faces, function (i) {
  return i;
});
addFaces(frontGeometry.faces, function (i) {
  return frontMap[i];
});
addFaces(backGeometry.faces, function (i) {
  return backMap[i];
});
addFaces(leftGeometry.faces, function (i) {
  return leftMap[i];
});
addFaces(rightGeometry.faces, function (i) {
  return rightMap[i];
});
faces.pop();

_ThreeUtils2.default.computeFaceVertexUvs(geometry, faces);

geometry.computeVertexNormals();
//geometry.computeFaceNormals();
geometry.computeBoundingSphere();
//geometry.computeBoundingBox();
geometry.verticesNeedUpdate = true;

exports.default = {
  resX: resX,
  resY: resY,
  resZ: resZ,
  faces: faces,
  geometry: geometry
};

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.props = props;
var mouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};

function props() {
  return {
    eps: 1e-4,
    scale: {
      default: 0.9,
      min: 0.9,
      max: 2.5,
      levels: 7
    },
    lighting: {
      default: 0.7,
      min: 0,
      max: 1,
      levels: 7
    },
    pan: {
      speed: 50
    },
    loadingAnimation: {
      skin: false,
      book: true
    },
    autoResolution: {
      enabled: true,
      coefficient: 1.5
    },
    narrowView: {
      width: 500
    },
    actions: {
      cmdZoomIn: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdZoomOut: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdDefaultZoom: {
        enabled: true,
        enabledInNarrow: false,
        type: 'dblclick',
        code: 0
      },
      cmdToc: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdFastBackward: {
        enabled: false,
        enabledInNarrow: false
      },
      cmdBackward: {
        enabled: true,
        enabledInNarrow: false
      },
      cmdBigBackward: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdForward: {
        enabled: true,
        enabledInNarrow: false
      },
      cmdBigForward: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdFastForward: {
        enabled: false,
        enabledInNarrow: false
      },
      cmdSave: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdPrint: {
        enabled: true,
        enabledInNarrow: false
      },
      cmdFullScreen: {
        enabled: true,
        enabledInNarrow: true
      },
      widSettings: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdSmartPan: {
        enabled: true,
        enabledInNarrow: true,
        active: true
      },
      cmdSinglePage: {
        enabled: true,
        enabledInNarrow: true,
        active: false,
        activeForMobile: true
      },
      cmdSounds: {
        enabled: true,
        enabledInNarrow: true,
        active: true
      },
      cmdStats: {
        enabled: false,
        enabledInNarrow: false,
        active: false
      },
      cmdShare: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdLightingUp: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdLightingDown: {
        enabled: true,
        enabledInNarrow: true
      },
      cmdPanLeft: {
        enabled: false
      },
      cmdPanRight: {
        enabled: false
      },
      cmdPanUp: {
        enabled: false
      },
      cmdPanDown: {
        enabled: false
      },
      mouseCmdRotate: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Right
      },
      mouseCmdDragZoom: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Middle
      },
      mouseCmdPan: {
        enabled: true,
        type: 'mousedrag',
        code: mouseButtons.Left
      },
      mouseCmdWheelZoom: {
        enabled: true,
        type: 'mousewheel',
        code: 0
      },
      touchCmdRotate: {
        enabled: true,
        type: 'touchdrag',
        code: 3
      },
      touchCmdZoom: {
        enabled: true,
        type: 'touchdrag',
        code: 2
      },
      touchCmdPan: {
        enabled: true,
        type: 'touchdrag',
        code: 1
      },
      touchCmdSwipe: {
        enabled: true,
        type: 'touchdrag',
        code: 1
      }
    }
  };
};

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(6);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BlankImage = function (_ImageBase) {
  _inherits(BlankImage, _ImageBase);

  function BlankImage(context, width, height, color) {
    _classCallCheck(this, BlankImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    Promise.resolve().then(function () {
      _this.startRender = function () {
        _this.renderBlankPage();
        _this.finishRender();
      };
      _this.finishLoad();
    });
    return _this;
  }

  return BlankImage;
}(_ImageBase3.default);

exports.default = BlankImage;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Bookmarks = function () {
  function Bookmarks(container, items) {
    var _this = this;

    var getTitle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (i) {
      return i.title;
    };
    var getItems = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function (i) {
      return i.items;
    };

    _classCallCheck(this, Bookmarks);

    this.container = container;
    this.map = [];
    this.getTitle = getTitle;
    this.getItems = getItems;
    this.nodes = this.mapNodes(items, this.map);

    this.binds = {
      togle: function togle(e) {
        e.preventDefault();
        var li = (0, _libs.$)(e.target);
        while (li[0] && li[0] !== container[0] && !li.hasClass('item')) {
          li = (0, _libs.$)(li[0].parentNode);
        }
        if (li.hasClass('item')) {
          var cmd = (0, _libs.$)(e.target);
          while (cmd[0] && cmd[0] !== li[0] && !cmd.hasClass('cmd')) {
            cmd = (0, _libs.$)(cmd[0].parentNode);
          }
          if (cmd.hasClass('cmd')) {
            var node = _this.map[li.attr('data-id')];
            if (cmd.hasClass('togle')) {
              node.minimized = !node.minimized;
              if (node.minimized) {
                li.find('ul').remove();
                li.find('.togle').addClass('minimized');
              } else {
                li.find('.togle').removeClass('minimized');
                li.append((_this.renderNode(node).match(/<ul(.|\n)*<\/ul>/g) || [''])[0]);
              }
            } else {
              if (_this.onNavigate) {
                _this.onNavigate(node.item);
              }
            }
          }
        }
      }
    };

    container.on('click', this.binds.togle);
    this.update();
  }

  Bookmarks.prototype.getSize = function getSize() {
    return this.map.length;
  };

  Bookmarks.prototype.dispose = function dispose() {
    this.container.off('click', this.binds.togle);
    this.container.html('');
  };

  Bookmarks.prototype.update = function update() {
    this.container.html(this.renderNodes(this.nodes));
  };

  Bookmarks.prototype.forEach = function forEach(f) {
    var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.nodes;

    for (var _iterator = nodes || [], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var node = _ref;

      f(node);
      this.forEach(f, node.children);
    }
  };

  Bookmarks.prototype.expand = function expand() {
    this.forEach(function (n) {
      return n.minimized = false;
    });
    this.update();
  };

  Bookmarks.prototype.minimize = function minimize() {
    this.forEach(function (n) {
      return n.minimized = true;
    });
    this.update();
  };

  Bookmarks.prototype.renderNode = function renderNode(node) {
    return ['<div class="area">', node.children ? '<a href="#" class="cmd togle' + (node.minimized ? ' minimized' : '') + '"><i class="fa fa-angle-right"></i></a> ' : '<i class="white-space"></i> ', '<a class="cmd" title="', node.title, '" href="#">', node.title, '</a></div>', node.minimized ? '' : this.renderNodes(node.children)].join('');
  };

  Bookmarks.prototype.renderNodes = function renderNodes(nodes) {
    var res = ['<div class="bookmarks">'];
    if (nodes && nodes.length) {
      res.push('<ul class="level-', nodes[0].level, '">');
      for (var _iterator2 = nodes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var node = _ref2;

        res.push(['<li class="item" data-id="', node.id, '">', this.renderNode(node), '</li>'].join(''));
      }
      res.push('</ul>');
    }
    res.push('</div>');
    return res.join('');
  };

  Bookmarks.prototype.mapNodes = function mapNodes(items) {
    var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

    var nodes = null;
    if (items && items.length) {
      nodes = [];
      for (var _iterator3 = items, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var item = _ref3;

        var id = map.length;
        map.push(undefined);
        var node = {
          id: id,
          title: this.getTitle(item),
          level: level,
          item: item,
          minimized: true,
          children: this.mapNodes(this.getItems(item), map, level + 1)
        };
        nodes.push(node);
        map[id] = node;
      }
    }
    return nodes;
  };

  return Bookmarks;
}();

exports.default = Bookmarks;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Detector = function () {
	function Detector() {
		_classCallCheck(this, Detector);
	}

	Detector.getWebGLErrorMessage = function getWebGLErrorMessage() {
		var element = document.createElement('div');
		element.id = 'webgl-error-message';
		element.style.fontFamily = 'monospace';
		element.style.fontSize = '13px';
		element.style.fontWeight = 'normal';
		element.style.textAlign = 'center';
		element.style.background = '#fff';
		element.style.color = '#000';
		element.style.padding = '1.5em';
		element.style.width = '400px';
		element.style.margin = '5em auto 0';

		if (!Detector.webgl) {
			element.innerHTML = window.WebGLRenderingContext ? ['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n') : ['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>', 'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'].join('\n');
		}
		return element;
	};

	Detector.addGetWebGLMessage = function addGetWebGLMessage(parameters) {
		var parent = void 0,
		    id = void 0,
		    element = void 0;
		parameters = parameters || {};

		parent = parameters.parent || (0, _libs.$)(document.body);
		id = parameters.id || 'oldie';

		element = Detector.getWebGLErrorMessage();
		//element.id = id;

		parent.append(element);
	};

	return Detector;
}();

Detector.canvas = !!window.CanvasRenderingContext2D;

Detector.webgl = function () {
	try {
		var canvas = document.createElement('canvas');
		return !!(window.WebGLRenderingContext && (canvas.getContext('webgl') || canvas.getContext('experimental-webgl')));
	} catch (e) {
		return false;
	}
}();

Detector.workers = !!window.Worker;
Detector.fileapi = window.File && window.FileReader && window.FileList && window.Blob;
exports.default = Detector;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DocMouseSimulator = function () {
  function DocMouseSimulator(jFrame, element) {
    var bElement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document.body;

    _classCallCheck(this, DocMouseSimulator);

    this.jFrame = jFrame;
    this.wnd = jFrame[0].contentWindow;
    this.doc = jFrame[0].contentDocument;
    this.element = element || doc.body;
    this.bElement = bElement;
    this.resendProperties = this.getDefaultResendProperties();
    this.undefinedProperties = this.getDefaultUndefinedProperties();
    this.cursors = [];
    this.onDocChangeClbs = [];
    var terms = [{
      find: ':hover',
      replace: '.' + DocMouseSimulator.HOVER
    }, {
      find: ':active',
      replace: '.' + DocMouseSimulator.ACTIVE
    }];
    var style = ['<style type="text/css">'];
    for (var i = 0; i < this.doc.styleSheets.length; ++i) {
      var ss = this.doc.styleSheets[i];
      for (var j = 0; j < ss.cssRules.length; ++j) {
        var r = ss.cssRules[j],
            cssText = void 0;
        for (var _iterator = terms, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var term = _ref;

          if (~r.selectorText.indexOf(term.find)) {
            cssText = (cssText || r.cssText).replace(new RegExp(term.find, 'g'), term.replace);
          }
        }
        if (cssText) {
          style.push(cssText);
        }
      }
    }
    style.push('</style>');
    (0, _libs.$)(this.doc.head).append((0, _libs.$)(style.join('')));
  }

  DocMouseSimulator.prototype.convertCoords = function convertCoords(x, y) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    return {
      x: offset.left + jElement.width() * x,
      y: offset.top + jElement.height() * (1 - y)
    };
  };

  DocMouseSimulator.prototype.triggerEvent = function triggerEvent(element, e, p, type, advancedProps) {
    var props = {};
    for (var _iterator2 = this.resendProperties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var _n = _ref2;

      props[_n] = e[_n];
    }
    for (var _iterator3 = this.undefinedProperties, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray3) {
        if (_i3 >= _iterator3.length) break;
        _ref3 = _iterator3[_i3++];
      } else {
        _i3 = _iterator3.next();
        if (_i3.done) break;
        _ref3 = _i3.value;
      }

      var _n2 = _ref3;

      props[_n2] = undefined;
    }
    for (var n in advancedProps) {
      if (advancedProps.hasOwnProperty(n)) {
        props[n] = advancedProps[n];
      }
    }
    props.view = this.wnd;
    props.pageX = p.x;
    props.pageY = p.y;
    var jE = _libs.$.Event(type, props);
    jE.timeStamp = e.timeStamp;
    (0, _libs.$)(element).trigger(jE);
  };

  DocMouseSimulator.prototype.addClass = function addClass(element, name) {
    (0, _libs.$)(element).addClass(name);
    var style = this.wnd.getComputedStyle(element);
    this.cursors.push((0, _libs.$)(this.bElement).css('cursor'));
    (0, _libs.$)(this.bElement).css('cursor', style.getPropertyValue('cursor'));
  };

  DocMouseSimulator.prototype.removeClass = function removeClass(element, name) {
    (0, _libs.$)(element).removeClass(name);
    (0, _libs.$)(this.bElement).css('cursor', this.cursors.pop());
  };

  DocMouseSimulator.prototype.enterElement = function enterElement(element) {
    this.addClass(element, DocMouseSimulator.HOVER);
  };

  DocMouseSimulator.prototype.leaveElement = function leaveElement(element) {
    this.removeClass(element, DocMouseSimulator.HOVER);
  };

  DocMouseSimulator.prototype.activateElement = function activateElement(element) {
    this.addClass(element, DocMouseSimulator.ACTIVE);
  };

  DocMouseSimulator.prototype.deactivateElement = function deactivateElement(element) {
    this.removeClass(element, DocMouseSimulator.ACTIVE);
  };

  DocMouseSimulator.prototype.addDocChangeClb = function addDocChangeClb(clb) {
    this.onDocChangeClbs.push(clb);
  };

  DocMouseSimulator.prototype.notify = function notify() {
    for (var _iterator4 = this.onDocChangeClbs, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
      var _ref4;

      if (_isArray4) {
        if (_i4 >= _iterator4.length) break;
        _ref4 = _iterator4[_i4++];
      } else {
        _i4 = _iterator4.next();
        if (_i4.done) break;
        _ref4 = _i4.value;
      }

      var clb = _ref4;

      clb(this.wnd, this.doc);
    }
  };

  DocMouseSimulator.prototype.elementFromPoint = function elementFromPoint(p) {
    var node = this.doc.body,
        next = true;
    while (next) {
      next = false;
      for (var i = 0; i < node.childNodes.length; ++i) {
        var child = node.childNodes[i];
        if (child instanceof this.wnd.Element) {
          var jC = (0, _libs.$)(child),
              offset = jC.offset(),
              height = jC.height(),
              width = jC.width();
          if (p.x > offset.left && p.x < offset.left + width && p.y > offset.top && p.y < offset.top + height) {
            node = child;
            next = true;
            break;
          }
        }
      }
    }
    return node;
  };

  DocMouseSimulator.prototype.getElement = function getElement(p) {
    var off0 = this.jFrame.offset();
    this.jFrame.offset({ left: 0.5 * window.innerWidth - p.x, top: 0.5 * window.innerHeight - p.y });
    var element = this.doc.elementFromPoint(p.x, p.y);
    if (!element) {
      // it isn't a joke it's IE
      element = this.doc.elementFromPoint(p.x, p.y);
    }
    this.jFrame.offset(off0);
    return element ? element : this.elementFromPoint(p);
  };

  DocMouseSimulator.prototype.simulate = function simulate(e, doc, x, y) {
    var p = this.convertCoords(x, y),
        element = doc === this.doc ? this.getElement(p) : undefined;
    var trigger = element !== undefined,
        notify = false;

    switch (e.type) {
      case 'mousedown':
        {
          if (this.capElement) {
            this.deactivateElement(this.capElement);
            notify = true;
          }
          this.capElement = element;
          if (this.capElement) {
            this.activateElement(this.capElement);
            notify = true;
          }
          break;
        }
      case 'mouseup':
        {
          if (this.capElement) {
            this.deactivateElement(this.capElement);
            notify = true;
          }
          this.timeStamp = e.timeStamp;
          break;
        }
      case 'click':
        {
          trigger = element && this.capElement === element; // && e.timeStamp === this.timeStamp;
          this.capElement = undefined;
          break;
        }
      case 'mouseenter':
      case 'mouseover':
      case 'mousemove':
        {
          var leaved = null;
          if (this.hovElement !== element && this.hovElement) {
            this.triggerEvent(this.hovElement, e, p, 'mouseout', { relatedTarget: element ? element : null });
            this.leaveElement(this.hovElement);
            leaved = this.hovElement;
            this.hovElement = undefined;
            notify = true;
          }
          if (!this.hovElement && element) {
            this.triggerEvent(element, e, p, 'mouseover', { relatedTarget: leaved });
            this.enterElement(element);
            this.hovElement = element;
            notify = true;
          }
          trigger = element && e.type === 'mousemove';
          break;
        }
      case 'mouseleave':
      case 'mouseout':
        {
          if (this.hovElement) {
            this.triggerEvent(this.hovElement, e, p, 'mouseout', { relatedTarget: e.relatedTarget });
            this.leaveElement(this.hovElement);
            this.hovElement = undefined;
            notify = true;
          }
          trigger = false;
          break;
        }
    }
    if (trigger) {
      this.triggerEvent(element, e, p, e.type);
    }
    if (notify) {
      this.notify();
    }
  };

  DocMouseSimulator.prototype.getDefaultUndefinedProperties = function getDefaultUndefinedProperties() {
    return ['clientX', 'clientY', 'offsetX', 'offsetY', 'screenX', 'screenY'];
  };

  DocMouseSimulator.prototype.getDefaultResendProperties = function getDefaultResendProperties() {
    return ['altKey', 'bubbles', 'button', 'buttons', 'cancelable', 'changedTouches', 'char', 'charCode', 'ctrlKey', 'data', 'detail', 'eventPhase', 'isDefaultPrevented', 'key', 'keyCode', 'metaKey', 'pointerId', 'pointerType', 'shiftKey', 'targetTouches', 'touches', 'which'];
  };

  return DocMouseSimulator;
}();

/*
altKey,
bubbles,
button,
buttons,
cancelable,
changedTouches,
char,
charCode,
clientX,
clientY,
ctrlKey,
currentTarget,
data,
delegateTarget,
detail,
eventPhase,
handleObj,
isDefaultPrevented,
key,
keyCode,
metaKey,
offsetX,
offsetY,
originalEvent,
pageX,
pageY,
pointerId,
pointerType,
relatedTarget,
screenX,
screenY,
shiftKey,
target,
targetTouches,
timeStamp,
toElement,
touches,
type,
view,
which
*/


DocMouseSimulator.HOVER = 'SIMULATED-HOVER';
DocMouseSimulator.ACTIVE = 'SIMULATED-ACTIVE';
exports.default = DocMouseSimulator;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dom2Image = function Dom2Image(wnd, doc, cache) {
    _classCallCheck(this, Dom2Image);

    var self = this;
    this.window = wnd;
    this.document = doc;
    this.cache = cache;

    var util = newUtil();
    var inliner = newInliner();
    var fontFaces = newFontFaces();
    var images = newImages();

    this.toSvg = toSvg;
    this.toPng = toPng;
    this.toJpeg = toJpeg;
    this.toBlob = toBlob;
    this.toPixelData = toPixelData;
    this.impl = {
        fontFaces: fontFaces,
        images: images,
        util: util,
        inliner: inliner
    };

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options
     * @param {Function} options.filter - Should return true if passed node should be included in the output
     *          (excluding node means excluding it's children as well). Not called on the root node.
     * @param {String} options.bgcolor - color for the background, any valid CSS color value.
     * @param {Number} options.width - width to be applied to node before rendering.
     * @param {Number} options.height - height to be applied to node before rendering.
     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.
     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),
                defaults to 1.0.
     * @return {Promise} - A promise that is fulfilled with a SVG image data URL
     * */

    function toSvg(node, options) {
        options = options || {};
        return Promise.resolve(node).then(function (node) {
            return cloneNode(node, options.filter, true);
        }).then(embedFonts).then(inlineImages).then(applyOptions).then(function (clone) {
            return makeSvgDataUri(clone, options.width || util.width(node), options.height || util.height(node));
        });

        function applyOptions(clone) {
            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;

            if (options.width) clone.style.width = options.width + 'px';
            if (options.height) clone.style.height = options.height + 'px';

            if (options.style) self.window.Object.keys(options.style).forEach(function (property) {
                clone.style[property] = options.style[property];
            });

            return clone;
        }
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.
     * */
    function toPixelData(node, options) {
        return draw(node, options || {}).then(function (canvas) {
            return canvas.getContext('2d').getImageData(0, 0, util.width(node), util.height(node)).data;
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a PNG image data URL
     * */
    function toPng(node, options) {
        return draw(node, options || {}).then(function (canvas) {
            return canvas.toDataURL();
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL
     * */
    function toJpeg(node, options) {
        options = options || {};
        return draw(node, options).then(function (canvas) {
            return canvas.toDataURL('image/jpeg', options.quality || 1.0);
        });
    }

    /**
     * @param {Node} node - The DOM Node object to render
     * @param {Object} options - Rendering options, @see {@link toSvg}
     * @return {Promise} - A promise that is fulfilled with a PNG image blob
     * */
    function toBlob(node, options) {
        return draw(node, options || {}).then(util.canvasToBlob);
    }

    function draw(domNode, options) {
        return toSvg(domNode, options).then(util.makeImage).then(util.delay(100)).then(function (image) {
            var canvas = newCanvas(domNode);
            canvas.getContext('2d').drawImage(image, 0, 0);
            return canvas;
        });

        function newCanvas(domNode) {
            var canvas = self.document.createElement('canvas');
            canvas.width = options.width || util.width(domNode);
            canvas.height = options.height || util.height(domNode);

            if (options.bgcolor) {
                var ctx = canvas.getContext('2d');
                ctx.fillStyle = options.bgcolor;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
            }

            return canvas;
        }
    }

    function cloneNode(node, filter, root) {
        if (!root && filter && !filter(node)) return Promise.resolve();

        return Promise.resolve(node).then(makeNodeCopy).then(function (clone) {
            return cloneChildren(node, clone, filter);
        }).then(function (clone) {
            return processClone(node, clone);
        });

        function makeNodeCopy(node) {
            if (util.isCanvas(node)) return util.makeImage(node.toDataURL());
            return node.cloneNode(false);
        }

        function cloneChildren(original, clone, filter) {
            var children = original.childNodes;
            if (children.length === 0) return Promise.resolve(clone);

            return cloneChildrenInOrder(clone, util.asArray(children), filter).then(function () {
                return clone;
            });

            function cloneChildrenInOrder(parent, children, filter) {
                var done = Promise.resolve();
                children.forEach(function (child) {
                    done = done.then(function () {
                        return cloneNode(child, filter);
                    }).then(function (childClone) {
                        if (childClone) parent.appendChild(childClone);
                    });
                });
                return done;
            }
        }

        function processClone(original, clone) {
            if (!util.isElement(clone)) return clone;

            return Promise.resolve().then(cloneStyle).then(clonePseudoElements).then(copyUserInput).then(fixSvg).then(function () {
                return clone;
            });

            function cloneStyle() {
                copyStyle(self.window.getComputedStyle(original), clone.style);

                function copyStyle(source, target) {
                    if (source.cssText) target.cssText = source.cssText;else copyProperties(source, target);

                    function copyProperties(source, target) {
                        util.asArray(source).forEach(function (name) {
                            target.setProperty(name, source.getPropertyValue(name), source.getPropertyPriority(name));
                        });
                    }
                }
            }

            function clonePseudoElements() {
                [':before', ':after'].forEach(function (element) {
                    clonePseudoElement(element);
                });

                function clonePseudoElement(element) {
                    var style = self.window.getComputedStyle(original, element);
                    var content = style.getPropertyValue('content');

                    if (content === '' || content === 'none') return;

                    var className = util.uid();
                    clone.className = clone.className + ' ' + className;
                    var styleElement = self.document.createElement('style');
                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));
                    clone.appendChild(styleElement);

                    function formatPseudoElementStyle(className, element, style) {
                        var selector = '.' + className + ':' + element;
                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);
                        return self.document.createTextNode(selector + '{' + cssText + '}');

                        function formatCssText(style) {
                            var content = style.getPropertyValue('content');
                            return style.cssText + ' content: ' + content + ';';
                        }

                        function formatCssProperties(style) {

                            return util.asArray(style).map(formatProperty).join('; ') + ';';

                            function formatProperty(name) {
                                return name + ': ' + style.getPropertyValue(name) + (style.getPropertyPriority(name) ? ' !important' : '');
                            }
                        }
                    }
                }
            }

            function copyUserInput() {
                if (util.isTextArea(original)) clone.innerHTML = original.value;
                if (util.isInput(original)) clone.setAttribute("value", original.value);
            }

            function fixSvg() {
                if (!util.isSVG(clone)) return;
                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');

                if (!util.isSVGRect(clone)) return;
                ['width', 'height'].forEach(function (attribute) {
                    var value = clone.getAttribute(attribute);
                    if (!value) return;

                    clone.style.setProperty(attribute, value);
                });
            }
        }
    }

    function embedFonts(node) {
        return fontFaces.resolveAll().then(function (cssText) {
            var styleNode = self.document.createElement('style');
            node.appendChild(styleNode);
            styleNode.appendChild(self.document.createTextNode(cssText));
            return node;
        });
    }

    function inlineImages(node) {
        return images.inlineAll(node).then(function () {
            return node;
        });
    }

    function makeSvgDataUri(node, width, height) {
        return Promise.resolve(node).then(function (node) {
            node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');
            return new self.window.XMLSerializer().serializeToString(node);
        }).then(util.escapeXhtml).then(function (xhtml) {
            return ['data:image/svg+xml;charset=utf-8,', '<svg xmlns="http://www.w3.org/2000/svg" width="', width, '" height="', height, '">', '<foreignObject x="0" y="0" width="100%" height="100%">', xhtml, '</foreignObject>', '</svg>'].join('');
        });
    }

    function newUtil() {
        return {
            escape: escape,
            parseExtension: parseExtension,
            mimeType: mimeType,
            dataAsUrl: dataAsUrl,
            isDataUrl: isDataUrl,
            canvasToBlob: canvasToBlob,
            resolveUrl: resolveUrl,
            getAndEncode: getAndEncode,
            uid: uid(),
            delay: delay,
            asArray: asArray,
            escapeXhtml: escapeXhtml,
            makeImage: makeImage,
            width: width,
            height: height,

            isElement: isElement,
            isCanvas: isCanvas,
            isTextArea: isTextArea,
            isInput: isInput,
            isSVG: isSVG,
            isSVGRect: isSVGRect,
            isImage: isImage
        };

        function mimes() {
            /*
             * Only WOFF and EOT mime types for fonts are 'real'
             * see http://www.iana.org/assignments/media-types/media-types.xhtml
             */
            var WOFF = 'application/font-woff';
            var JPEG = 'image/jpeg';

            return {
                'woff': WOFF,
                'woff2': WOFF,
                'ttf': 'application/font-truetype',
                'eot': 'application/vnd.ms-fontobject',
                'png': 'image/png',
                'jpg': JPEG,
                'jpeg': JPEG,
                'gif': 'image/gif',
                'tiff': 'image/tiff',
                'svg': 'image/svg+xml'
            };
        }

        function parseExtension(url) {
            var match = /\.([^\.\/]*?)$/g.exec(url);
            if (match) return match[1];else return '';
        }

        function mimeType(url) {
            var extension = parseExtension(url).toLowerCase();
            return mimes()[extension] || '';
        }

        function isDataUrl(url) {
            return url.search(/^(data:)/) !== -1;
        }

        function toBlob(canvas) {
            return new Promise(function (resolve) {
                var binaryString = self.window.atob(canvas.toDataURL().split(',')[1]);
                var length = binaryString.length;
                var binaryArray = new self.window.Uint8Array(length);

                for (var i = 0; i < length; i++) {
                    binaryArray[i] = binaryString.charCodeAt(i);
                }resolve(new self.window.Blob([binaryArray], {
                    type: 'image/png'
                }));
            });
        }

        function canvasToBlob(canvas) {
            if (canvas.toBlob) return new Promise(function (resolve) {
                canvas.toBlob(resolve);
            });

            return toBlob(canvas);
        }

        function resolveUrl(url, baseUrl) {
            var doc = self.document.implementation.createHTMLDocument();
            var base = doc.createElement('base');
            doc.head.appendChild(base);
            var a = doc.createElement('a');
            doc.body.appendChild(a);
            base.href = baseUrl;
            a.href = url;
            return a.href;
        }

        function uid() {
            var index = 0;

            return function () {
                return 'u' + fourRandomChars() + index++;

                function fourRandomChars() {
                    /* see http://stackoverflow.com/a/6248722/2519373 */
                    return ('0000' + (self.window.Math.random() * self.window.Math.pow(36, 4) << 0).toString(36)).slice(-4);
                }
            };
        }

        function makeImage(uri) {
            return new Promise(function (resolve, reject) {
                var image = new self.window.Image();
                image.onload = function () {
                    resolve(image);
                };
                image.onerror = reject;
                image.src = uri;
            });
        }

        function getAndEncode(url) {
            var data = self.cache.get(url);
            if (data) {
                if (data.content) {
                    return data.content;
                } else {
                    return new Promise(function (resolve) {
                        if (data.content) {
                            resolve(data.content);
                        } else {
                            data.pendings.push(resolve);
                        }
                    });
                }
            } else {
                data = self.cache.put(url, { pendings: [] });

                var TIMEOUT = 30000;

                return new Promise(function (resolve) {
                    var request = new self.window.XMLHttpRequest();

                    request.onreadystatechange = done;
                    request.ontimeout = timeout;
                    request.responseType = 'blob';
                    request.timeout = TIMEOUT;
                    request.open('GET', url, true);
                    request.send();

                    function done() {
                        if (request.readyState !== 4) return;

                        if (request.status !== 200) {
                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);
                            return;
                        }

                        var encoder = new self.window.FileReader();
                        encoder.onloadend = function () {
                            data.content = encoder.result.split(/,/)[1];
                            for (var _iterator = data.pendings, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var _resolve = _ref;

                                _resolve(data.content);
                            }
                            data.pendings = [];
                            resolve(data.content);
                        };
                        encoder.readAsDataURL(request.response);
                    }

                    function timeout() {
                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);
                    }

                    function fail(message) {
                        console.error(message);
                        resolve('');
                    }
                });
            }
        }

        function dataAsUrl(content, type) {
            return ['data:', type, ';base64,', content].join('');
        }

        function escape(string) {
            return string.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
        }

        function delay(ms) {
            return function (arg) {
                return new Promise(function (resolve) {
                    setTimeout(function () {
                        resolve(arg);
                    }, ms);
                });
            };
        }

        function asArray(arrayLike) {
            var array = [];
            var length = arrayLike.length;
            for (var i = 0; i < length; i++) {
                array.push(arrayLike[i]);
            }return array;
        }

        function escapeXhtml(string) {
            return string.replace(/(#|\n)/g, function (c) {
                return c === '#' ? '%23' : '%0A';
            });
        }

        function width(node) {
            var leftBorder = px(node, 'border-left-width');
            var rightBorder = px(node, 'border-right-width');
            return node.scrollWidth + leftBorder + rightBorder;
        }

        function height(node) {
            var topBorder = px(node, 'border-top-width');
            var bottomBorder = px(node, 'border-bottom-width');
            return node.scrollHeight + topBorder + bottomBorder;
        }

        function px(node, styleProperty) {
            var value = self.window.getComputedStyle(node).getPropertyValue(styleProperty);
            return parseFloat(value.replace('px', ''));
        }

        function isElement(node) {
            return node instanceof self.window.Element;
        }

        function isCanvas(node) {
            return node instanceof self.window.HTMLCanvasElement;
        }

        function isTextArea(node) {
            return node instanceof self.window.HTMLTextAreaElement;
        }

        function isInput(node) {
            return node instanceof self.window.HTMLInputElement;
        }

        function isSVG(node) {
            return node instanceof self.window.SVGElement;
        }

        function isSVGRect(node) {
            return node instanceof self.window.SVGRectElement;
        }

        function isImage(node) {
            return node instanceof self.window.HTMLImageElement;
        }
    }

    function newInliner() {
        var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;

        return {
            inlineAll: inlineAll,
            shouldProcess: shouldProcess,
            impl: {
                readUrls: readUrls,
                inline: inline
            }
        };

        function shouldProcess(string) {
            return string.search(URL_REGEX) !== -1;
        }

        function readUrls(string) {
            var result = [];
            var match = void 0;
            while ((match = URL_REGEX.exec(string)) !== null) {
                result.push(match[1]);
            }
            return result.filter(function (url) {
                return !util.isDataUrl(url);
            });
        }

        function inline(string, url, baseUrl, get) {
            return Promise.resolve(url).then(function (url) {
                return baseUrl ? util.resolveUrl(url, baseUrl) : url;
            }).then(get || util.getAndEncode).then(function (data) {
                return util.dataAsUrl(data, util.mimeType(url));
            }).then(function (dataUrl) {
                return string.replace(urlAsRegex(url), ['$1', dataUrl, '$3'].join(''));
            });

            function urlAsRegex(url) {
                return new self.window.RegExp(['(url\\([\'"]?)(', util.escape(url), ')([\'"]?\\))'].join(''), 'g');
            }
        }

        function inlineAll(string, baseUrl, get) {
            if (nothingToInline()) return Promise.resolve(string);

            return Promise.resolve(string).then(readUrls).then(function (urls) {
                var done = Promise.resolve(string);
                urls.forEach(function (url) {
                    done = done.then(function (string) {
                        return inline(string, url, baseUrl, get);
                    });
                });
                return done;
            });

            function nothingToInline() {
                return !shouldProcess(string);
            }
        }
    }

    function newFontFaces() {
        return {
            resolveAll: resolveAll,
            impl: {
                readAll: readAll
            }
        };

        function resolveAll() {
            return readAll(self.document).then(function (webFonts) {
                return Promise.all(webFonts.map(function (webFont) {
                    return webFont.resolve();
                }));
            }).then(function (cssStrings) {
                return cssStrings.join('\n');
            });
        }

        function readAll() {
            return Promise.resolve(util.asArray(self.document.styleSheets)).then(getCssRules).then(selectWebFontRules).then(function (rules) {
                return rules.map(newWebFont);
            });

            function selectWebFontRules(cssRules) {
                return cssRules.filter(function (rule) {
                    return rule.type === CSSRule.FONT_FACE_RULE;
                }).filter(function (rule) {
                    return inliner.shouldProcess(rule.style.getPropertyValue('src'));
                });
            }

            function getCssRules(styleSheets) {
                var cssRules = [];
                styleSheets.forEach(function (sheet) {
                    try {
                        util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));
                    } catch (e) {
                        console.log('Error while reading CSS rules from ' + sheet.href, e.toString());
                    }
                });
                return cssRules;
            }

            function newWebFont(webFontRule) {
                return {
                    resolve: function resolve() {
                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;
                        return inliner.inlineAll(webFontRule.cssText, baseUrl);
                    },
                    src: function src() {
                        return webFontRule.style.getPropertyValue('src');
                    }
                };
            }
        }
    }

    function newImages() {
        return {
            inlineAll: inlineAll,
            impl: {
                newImage: newImage
            }
        };

        function newImage(element) {
            return {
                inline: inline
            };

            function inline(get) {
                if (util.isDataUrl(element.src)) return Promise.resolve();

                return Promise.resolve(element.src).then(get || util.getAndEncode).then(function (data) {
                    return util.dataAsUrl(data, util.mimeType(element.src));
                }).then(function (dataUrl) {
                    return new Promise(function (resolve, reject) {
                        element.onload = resolve;
                        element.onerror = reject;
                        element.src = dataUrl;
                    });
                });
            }
        }

        function inlineAll(node) {
            if (!util.isElement(node)) return Promise.resolve(node);

            return inlineBackground(node).then(function () {
                if (util.isImage(node)) return newImage(node).inline();else return Promise.all(util.asArray(node.childNodes).map(function (child) {
                    return inlineAll(child);
                }));
            });

            function inlineBackground(node) {
                var background = node.style.getPropertyValue('background');

                if (!background) return Promise.resolve(node);

                return inliner.inlineAll(background).then(function (inlined) {
                    node.style.setProperty('background', inlined, node.style.getPropertyPriority('background'));
                }).then(function () {
                    return node;
                });
            }
        }
    }
};

exports.default = Dom2Image;

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Drag = function () {
  function Drag(wnd, doc, visualWorld) {
    _classCallCheck(this, Drag);

    this.wnd = wnd;
    this.doc = doc;
    this.visual = visualWorld;
    this.coords = new _libs.THREE.Vector2();
    this.intersection = new _libs.THREE.Vector3();
    this.raycaster = this.visual.raycaster;
    this.camera = this.visual.camera;
    this.plane = new _libs.THREE.Plane();
    this.threes = [];
    this.selected = null;
    this.enabled = true;
    this.controlsState = this.visual.getControlsState();

    this.element = this.visual.element;
    this.binds = {
      onMouseMove: this.onMouseMove.bind(this),
      onMouseDown: this.onMouseDown.bind(this),
      onMouseUp: this.onMouseUp.bind(this)
    };
    (0, _libs.$)(this.element).on('mousemove', this.binds.onMouseMove);
    (0, _libs.$)(this.element).on('mousedown', this.binds.onMouseDown);
    (0, _libs.$)(this.doc).on('mouseup', this.binds.onMouseUp);
  }

  Drag.prototype.addThree = function addThree(three) {
    this.threes.push(three);
  };

  Drag.prototype.removeThree = function removeThree(three) {
    var i = this.threes.indexOf(three);
    if (~i) {
      this.threes.splice(i, 1);
    }
  };

  Drag.prototype.onPickCallback = function onPickCallback() {
    return true;
  };

  Drag.prototype.onDragCallback = function onDragCallback() {
    return true;
  };

  Drag.prototype.onReleaseCallback = function onReleaseCallback() {};

  Drag.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('mousemove', this.binds.onMouseMove);
    (0, _libs.$)(this.element).off('mousedown', this.binds.onMouseDown);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.onMouseUp);
  };

  Drag.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    this.coords.x = (e.pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  Drag.prototype.onMouseDown = function onMouseDown(e) {
    if (!this.enabled) return;

    if (this.selected) this.onMouseUp(e);

    this.setCoordsFromEvent(e);
    this.raycaster.setFromCamera(this.coords, this.camera);

    var intersects = this.raycaster.intersectObjects(this.threes);
    if (intersects.length > 0) {
      var selected = intersects[0].object;
      if (!this.onPickCallback(intersects[0])) return;
      var v = intersects[0].point.clone();
      this.distance = v.sub(this.raycaster.ray.origin).length();;
      this.controlsState = this.visual.getControlsState();
      this.visual.setControlsState(false);
      this.plane.setFromNormalAndCoplanarPoint(this.visual.camera.getWorldDirection(this.plane.normal), intersects[0].point);
      //this.plane.setFromNormalAndCoplanarPoint(this.plane.normal.set(0,0,1), new THREE.Vector3(0,0,0));
      this.selected = selected;
    }
  };

  Drag.prototype.onMouseMove = function onMouseMove(e) {
    if (!this.enabled) return;
    e.preventDefault();

    if (this.selected) {
      this.setCoordsFromEvent(e);
      this.raycaster.setFromCamera(this.coords, this.camera);
      if (this.raycaster.ray.intersectPlane(this.plane, this.intersection)) {
        if (!this.onDragCallback(this.intersection)) this.onMouseUp(e);
      } /**/
      //this.intersection.copy(this.raycaster.ray.direction).normalize().multiplyScalar(this.distance).add(this.raycaster.ray.origin);/**/
      //if(!this.onDragCallback(this.selected, this.intersection)) this.onMouseUp(e);
    }
  };

  Drag.prototype.onMouseUp = function onMouseUp(e) {
    if (this.selected) {
      this.onReleaseCallback();
      this.selected = null;
      this.visual.setControlsState(this.controlsState);
    }
    if (!this.enabled) return;
    e.preventDefault();
  };

  return Drag;
}();

exports.default = Drag;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

__webpack_require__(74)(_libs.$);

var EventsToActions = function () {
  EventsToActions.getEventFlags = function getEventFlags(e) {
    return e.ctrlKey << 0 | e.shiftKey << 1 | e.altKey << 2;
  };

  EventsToActions.getPosition = function getPosition(touches) {
    var x = void 0,
        y = void 0;
    if (touches.length === 2) {
      x = touches[1].pageX - touches[0].pageX;
      y = touches[1].pageY - touches[0].pageY;
    } else {
      x = touches[0].pageX;
      y = touches[0].pageY;
    }
    return {
      x: x,
      y: y
    };
  };

  function EventsToActions(element, actions) {
    _classCallCheck(this, EventsToActions);

    this.actions = actions || {};
    this.element = element;
    this.doc = element[0].ownerDocument;
    this.wnd = this.doc.defaultView;
    this.enabled = true;

    this.binds = {
      contextMenu: this.contextMenu.bind(this),

      mouseDown: this.mouseDown.bind(this),
      mouseMove: this.mouseMove.bind(this),
      mouseUp: this.mouseUp.bind(this),
      mouseWheel: this.mouseWheel.bind(this),

      mouseMoveDoc: this.mouseMoveDoc.bind(this),
      mouseUpDoc: this.mouseUpDoc.bind(this),

      click: this.click.bind(this),
      dblclick: this.dblclick.bind(this),

      touchStart: this.touchStart.bind(this),
      touchMove: this.touchMove.bind(this),
      touchEnd: this.touchEnd.bind(this),

      keyDown: this.keyDown.bind(this),
      keyPress: this.keyPress.bind(this),
      keyUp: this.keyUp.bind(this)
    };

    this.element.on('contextmenu', this.binds.contextMenu);

    this.element.on('mousedown', this.binds.mouseDown);
    this.element.on('mousemove', this.binds.mouseMove);
    this.element.on('mouseup', this.binds.mouseUp);
    this.element.on('mousewheel', this.binds.mouseWheel);

    (0, _libs.$)(this.doc).on('mousemove', this.binds.mouseMoveDoc);
    (0, _libs.$)(this.doc).on('mouseup', this.binds.mouseUpDoc);

    this.element.on('click', this.binds.click);
    this.element.on('dblclick', this.binds.dblclick);

    this.element.on('touchstart', this.binds.touchStart);
    this.element.on('touchmove', this.binds.touchMove);
    this.element.on('touchend', this.binds.touchEnd);

    (0, _libs.$)(this.wnd).on('keydown', this.binds.keyDown);
    (0, _libs.$)(this.wnd).on('keypress', this.binds.keyPress);
    (0, _libs.$)(this.wnd).on('keyup', this.binds.keyUp);
  }

  EventsToActions.prototype.addAction = function addAction(action, type, code, flags) {
    type = type.toLowerCase();
    if (!this.actions[type]) {
      this.actions[type] = {};
    }
    if (!this.actions[type][code]) {
      this.actions[type][code] = {};
    }
    if (!this.actions[type][code][flags]) {
      this.actions[type][code][flags] = [];
    }
    this.actions[type][code][flags].push(action);
  };

  EventsToActions.prototype.getActions = function getActions(type, code, flags) {
    return ((this.actions[type] || {})[code] || {})[flags] || [];
  };

  EventsToActions.prototype.fireActions = function fireActions(actions, e, data) {
    for (var _iterator = actions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var action = _ref;

      action(e, data);
    }
  };

  EventsToActions.prototype.contextMenu = function contextMenu(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('contextmenu', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseDown = function mouseDown(e) {
    if (this.picked) {
      this.mouseUpDoc();
    }
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousedown', e.button, flags), e);
      this.picked = {
        x: e.pageX,
        y: e.pageY,
        actions: this.getActions('mousedrag', e.button, flags)
      };
      this.fireActions(this.picked.actions, e, {
        state: 'start'
      });
    }
  };

  EventsToActions.prototype.mouseMove = function mouseMove(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousemove', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseMoveDoc = function mouseMoveDoc(e) {
    if (this.enabled && this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'move',
        dx: e.pageX - this.picked.x,
        dy: e.pageY - this.picked.y
      });
      this.picked = {
        x: e.pageX,
        y: e.pageY,
        actions: this.picked.actions
      };
    }
  };

  EventsToActions.prototype.mouseUp = function mouseUp(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mouseup', e.button, flags), e);
    }
  };

  EventsToActions.prototype.mouseUpDoc = function mouseUpDoc(e) {
    if (this.picked) {
      this.fireActions(this.picked.actions, e, {
        state: 'end'
      });
      delete this.picked;
    }
  };

  EventsToActions.prototype.mouseWheel = function mouseWheel(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions('mousewheel', 0, flags), e);
    }
  };

  EventsToActions.prototype.clicks = function clicks(e, type) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions(type, e.button, flags), e);
    }
  };

  EventsToActions.prototype.click = function click(e) {
    this.clicks(e, 'click');
  };

  EventsToActions.prototype.dblclick = function dblclick(e) {
    this.clicks(e, 'dblclick');
  };

  EventsToActions.prototype.touchPick = function touchPick(e, flags, touches) {
    var pos = EventsToActions.getPosition(touches);
    this.touchPicked = _extends({}, pos, {
      actions: this.getActions('touchdrag', touches.length, flags),
      code: touches.length,
      flags: flags
    });
    this.fireActions(this.touchPicked.actions, e, _extends({
      state: 'start'
    }, pos));
  };

  EventsToActions.prototype.touchStart = function touchStart(e) {
    if (this.touchPicked) {
      this.touchEnd(e);
    }
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e),
          touches = e.touches || e.originalEvent.touches;
      this.fireActions(this.getActions('touchstart', touches.length, flags), e);
      this.touchPick(e, flags, touches);
    }
  };

  EventsToActions.prototype.touchMove = function touchMove(e) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e),
          touches = e.touches || e.originalEvent.touches;
      this.fireActions(this.getActions('touchmove', touches.length, flags), e);
      if (this.touchPicked) {
        if (this.touchPicked.code === touches.length && this.touchPicked.flags === flags) {
          var pos = EventsToActions.getPosition(touches);
          this.fireActions(this.touchPicked.actions, e, _extends({
            state: 'move',
            dx: pos.x - this.touchPicked.x,
            dy: pos.y - this.touchPicked.y
          }, pos));
          this.touchPicked = _extends({}, this.touchPicked, pos);
        } else {
          this.touchEnd(e);
          this.touchPick(e, flags, touches);
        }
      }
    }
  };

  EventsToActions.prototype.touchEnd = function touchEnd(e) {
    if (this.touchPicked) {
      this.fireActions(this.touchPicked.actions, e, {
        state: 'end'
      });
      delete this.touchPicked;
    }
  };

  EventsToActions.prototype.key = function key(e, type) {
    if (this.enabled) {
      var flags = EventsToActions.getEventFlags(e);
      this.fireActions(this.getActions(type, e.keyCode, flags), e);
    }
  };

  EventsToActions.prototype.keyDown = function keyDown(e) {
    this.key(e, 'keydown');
  };

  EventsToActions.prototype.keyPress = function keyPress(e) {
    this.key(e, 'keypress');
  };

  EventsToActions.prototype.keyUp = function keyUp(e) {
    this.key(e, 'keyup');
  };

  EventsToActions.prototype.dispose = function dispose() {
    this.element.off('contextmenu', this.binds.contextMenu);

    this.element.off('mousedown', this.binds.mouseDown);
    this.element.off('mousemove', this.binds.mouseMove);
    this.element.off('mouseup', this.binds.mouseUp);
    this.element.off('mousewheel', this.binds.mouseWheel);

    (0, _libs.$)(this.doc).off('mousemove', this.binds.mouseMoveDoc);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.mouseUpDoc);

    this.element.off('click', this.binds.click);
    this.element.off('dblclick', this.binds.dblclick);

    this.element.off('touchstart', this.binds.touchStart);
    this.element.off('touchmove', this.binds.touchMove);
    this.element.off('touchend', this.binds.touchEnd);

    (0, _libs.$)(this.wnd).off('keydown', this.binds.keyDown);
    (0, _libs.$)(this.wnd).off('keypress', this.binds.keyPress);
    (0, _libs.$)(this.wnd).off('keyup', this.binds.keyUp);
  };

  return EventsToActions;
}();

EventsToActions.modKeys = {
  Ctrl: 1,
  Shift: 2,
  Alt: 4
};
EventsToActions.mouseButtons = {
  Left: 0,
  Middle: 1,
  Right: 2
};
exports.default = EventsToActions;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FullScreen = function () {
	function FullScreen() {
		_classCallCheck(this, FullScreen);
	}

	FullScreen.available = function available() {
		return FullScreen._hasWebkitFullScreen || FullScreen._hasMozFullScreen || FullScreen._hasMsFullscreen;
	};

	FullScreen.activated = function activated() {
		if (FullScreen._hasWebkitFullScreen) {
			return document.webkitIsFullScreen;
		} else if (FullScreen._hasMozFullScreen) {
			return document.mozFullScreen;
		} else if (FullScreen._hasMsFullscreen) {
			return !!document.msFullscreenElement;
		} else {
			console.assert(false);
		}
	};

	FullScreen.addEventListener = function addEventListener(element, handler) {
		if (element.addEventListener) {
			element.addEventListener('webkitfullscreenchange', handler, false);
			element.addEventListener('mozfullscreenchange', handler, false);
			element.addEventListener('fullscreenchange', handler, false);
			element.addEventListener('MSFullscreenChange', handler, false);
		}
	};

	FullScreen.removeEventListener = function removeEventListener(element, handler) {
		if (element.removeEventListener) {
			element.removeEventListener('webkitfullscreenchange', handler, false);
			element.removeEventListener('mozfullscreenchange', handler, false);
			element.removeEventListener('fullscreenchange', handler, false);
			element.removeEventListener('MSFullscreenChange', handler, false);
		}
	};

	FullScreen.request = function request(element) {
		element = element || document.body;
		if (FullScreen._hasWebkitFullScreen) {
			element.webkitRequestFullScreen();
		} else if (FullScreen._hasMozFullScreen) {
			element.mozRequestFullScreen();
		} else if (FullScreen._hasMsFullscreen) {
			element.msRequestFullscreen();
		} else {
			console.assert(false);
		}
	};

	FullScreen.cancel = function cancel() {
		if (FullScreen._hasWebkitFullScreen) {
			document.webkitCancelFullScreen();
		} else if (FullScreen._hasMozFullScreen) {
			document.mozCancelFullScreen();
		} else if (FullScreen._hasMsFullscreen) {
			document.msExitFullscreen();
		} else {
			console.assert(false);
		}
	};

	return FullScreen;
}();

FullScreen._hasWebkitFullScreen = !!document.webkitCancelFullScreen;
FullScreen._hasMozFullScreen = !!document.mozCancelFullScreen;
FullScreen._hasMsFullscreen = !!document.documentElement.msRequestFullscreen;
exports.default = FullScreen;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(6);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _Dom2Image = __webpack_require__(50);

var _Dom2Image2 = _interopRequireDefault(_Dom2Image);

var _DocMouseSimulator = __webpack_require__(49);

var _DocMouseSimulator2 = _interopRequireDefault(_DocMouseSimulator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InteractiveImage = function (_ImageBase) {
  _inherits(InteractiveImage, _ImageBase);

  function InteractiveImage(context, width, height, color, src, cache, injector) {
    _classCallCheck(this, InteractiveImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.iId = 'i' + _BaseMathUtils2.default.getUnique();
    var jFrame = (0, _libs.$)('<iframe id="' + _this.iId + '" src="' + src + '" style="position: fixed; left: -1000px;"></iframe>');
    (0, _libs.$)(_this.doc.body).append(jFrame);
    _this.frame = jFrame[0];

    _this.binds = {};

    if (injector) {
      injector(_this.frame.contentWindow);
    }

    if (_this.doc.implementation.hasFeature('www.http://w3.org/TR/SVG11/feature#Extensibility', '1.1')) {
      // svg foreignObject renderer
      _this.image = new Image();
      _this.binds.imageLoad = function () {
        _this.renderImage(_this.image);
        _this.finishRender();
      };
      (0, _libs.$)(_this.image).on('load', _this.binds.imageLoad);
      _this.svgRender = new _Dom2Image2.default(_this.frame.contentWindow, _this.frame.contentDocument, cache);
    } // otherwise - html2canvas

    _this.binds.frameLoad = function () {
      if (~_this.frame.contentDocument.title.indexOf('404')) {
        _this.startRender = function () {
          _this.renderNotFoundPage();
          _this.finishRender();
        };
        _this.finishLoad();
      } else {
        setTimeout(function () {
          if (_this.frame) {
            _this.width = (0, _libs.$)(_this.frame.contentDocument.body).width();
            _this.height = (0, _libs.$)(_this.frame.contentDocument.body).height();
            _this.resH = _this.height / _this.width * _this.resW;
            jFrame.css('width', _this.width + 'px').css('height', _this.height + 'px');
            jFrame.offset({ left: -_this.width - 100, top: 0 });
            if (_this.svgRender) {
              _this.simulator = new _DocMouseSimulator2.default(jFrame, _this.frame.contentDocument.body, _this.element);
              _this.simulator.addDocChangeClb(_this.finishLoad.bind(_this));
            }
            _this.startRender = function () {
              _this.render();
            };
            _this.finishLoad();
          }
        }, 500);
      }
    };
    (0, _libs.$)(_this.frame.contentWindow).on('load', _this.binds.frameLoad);
    return _this;
  }

  InteractiveImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return this.frame.contentDocument;
  };

  InteractiveImage.prototype.render = function render() {
    var _this2 = this;

    if (this.svgRender) {
      this.svgRender.toSvg(this.simulator.element, { height: this.height + 'px', width: this.width + 'px' }).then(function (dataUrl) {
        _this2.image.src = dataUrl;
      }).catch(function (error) {
        console.error('Dom2Image: ', error);
        _this2.renderBlankPage();
        _this2.finishRender();
      });
    } else {
      (0, _libs.html2canvas)(this.frame.contentDocument.body, { timeout: 30000 }).then(function (canvas) {
        _this2.renderImage(canvas);
        _this2.finishRender();
      });
    }
  };

  InteractiveImage.prototype.dispose = function dispose() {
    (0, _libs.$)(this.image).off('load', this.binds.imageLoad);
    (0, _libs.$)(this.frame.contentWindow).off('load', this.binds.frameLoad);
    (0, _libs.$)(this.doc.body).find('#' + this.iId).remove();
    if (this.image) {
      this.image.src = '';
      delete this.image;
    }
    this.frame.src = '';
    delete this.frame;
    _ImageBase.prototype.dispose.call(this);
  };

  InteractiveImage.prototype.simulate = function simulate(e, doc, x, y) {
    if (this.simulator) {
      this.simulator.simulate(e, doc, x, y);
    }
  };

  return InteractiveImage;
}(_ImageBase3.default);

exports.default = InteractiveImage;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadingAnimation = function () {
  LoadingAnimation.prototype.dy = function dy(t, y) {
    var w = y[0],
        a = y[1];
    return [-this.g * Math.cos(a), w];
  };

  LoadingAnimation.prototype.integrate = function integrate(T) {
    var t = 0,
        dt = this.p.dt,
        os = this.os;
    while (t < T) {
      if (t + dt > T) {
        dt = T - t;
      }
      os = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
      t += dt;
    }
    return os;
  };

  LoadingAnimation.prototype.calcTimeTo = function calcTimeTo(target) {
    var t = 0,
        dt = this.p.dt,
        os = this.os;
    while (Math.abs(os[1] - target) > 1e-4) {
      var nos = _MathUtils2.default.rk4(this.dy.bind({ g: this.p.g }), 0, dt, os);
      if (nos[0] < 0 && nos[1] < target || nos[0] > 0 && nos[1] > target) {
        dt /= 2;
      } else {
        os = nos;
        t += dt;
      }
    }
    return t;
  };

  LoadingAnimation.prototype.update = function update(T) {
    this.os = this.integrate(T);

    this.t += T;
    if (this.t >= this.p.updateInterval) {
      this.t = 0;
      var r = 0.04 * Math.min(this.c.width, this.c.height),
          a = this.os[1],
          x0 = 0.5 * this.c.width,
          y0 = 0.5 * this.c.height,
          ctx = this.ctx;

      ctx.clearRect(0, 0, this.c.width, this.c.height);
      ctx.beginPath();
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(this.p.color, 1);
      ctx.rect(0, 0, this.c.width, this.c.height);
      ctx.fill();

      ctx.beginPath();
      ctx.shadowBlur = 50;
      ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 0.9), Math.abs(this.os[0] / 6.36));
      ctx.shadowColor = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 1), 0.9);
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;
      ctx.font = 'bold ' + Math.round(0.25 * r) + 'px Arial';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillText((0, _libs.tr)('Loading...'), x0, y0);

      var ps = 10,
          da = 2 * Math.PI / ps; //2.5*_r/r
      ctx.shadowColor = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, 1), 0.7);
      for (var i = 0, _a = a, _r = 0.2 * r; i < ps; ++i, _r *= 0.9, _a += da) {
        ctx.beginPath();
        ctx.fillStyle = _GraphUtils2.default.color2Rgba(_GraphUtils2.default.inverseColor(this.p.color, (ps - i) / ps), 0.7 * (ps - i) / ps);
        var cx = x0 + r * Math.cos(_a),
            cy = y0 - r * Math.sin(_a),
            nx = x0 + r * Math.cos(_a + da),
            ny = y0 - r * Math.sin(_a + da);
        ctx.shadowOffsetX = 0.2 * (nx - cx);
        ctx.shadowOffsetY = 0.2 * (ny - cy);
        ctx.arc(cx, cy, _r, 0, Math.PI * 2, 1);
        ctx.fill();
      }
      if (this.onChange) {
        this.onChange(this.c, this.p.color);
      }
    }
  };

  LoadingAnimation.prototype.getImage = function getImage() {
    return this.c;
  };

  LoadingAnimation.prototype.dispose = function dispose() {
    this.c.width = 0;
    this.c.height = 0;
    delete this.ctx;
    delete this.c;
  };

  LoadingAnimation.prototype.createSprite = function createSprite(n) {
    var c = _GraphUtils2.default.createCanvas(this.c.width * n, this.c.height),
        ctx = c.getContext('2d'),
        t = this.calcTimeTo(this.os[1] + Math.sign(this.os[0]) * 2 * Math.PI),
        dt = t / (n + 1);
    var updateInterval = this.p.updateInterval;

    this.p.updateInterval = 0;
    for (var i = 0; i < n; ++i) {
      this.update(dt);
      ctx.drawImage(this.c, i * this.c.width, 0);
    }
    this.p.updateInterval = updateInterval;
    return c;
  };

  function LoadingAnimation(width, height, color) {
    _classCallCheck(this, LoadingAnimation);

    this.c = _GraphUtils2.default.createCanvas(width, height);
    this.p = {
      g: 9.8,
      dt: 1 / 60,
      color: color,
      updateInterval: 0.25
    };
    this.ctx = this.c.getContext('2d');
    this.os = [-2, Math.PI / 2];
    this.t = this.p.updateInterval;
  }

  return LoadingAnimation;
}();

exports.default = LoadingAnimation;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LoadingController = function () {
  function LoadingController(view) {
    var showProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var loadingMsg = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    _classCallCheck(this, LoadingController);

    this.view = view;
    this.progress = 0;
    this.showProgress = showProgress;
    this.getLoadingMsg = loadingMsg || LoadingController.defaultLoadingMsg;
    this.updateView();
  }

  LoadingController.defaultLoadingMsg = function defaultLoadingMsg(progress) {
    return ['Please wait... the Application is Loading: ', progress, '%'].join('');
  };

  LoadingController.prototype.dispose = function dispose() {
    this.showProgress = false;
    this.updateView();
    delete this.view;
  };

  LoadingController.prototype.setProgress = function setProgress(v) {
    this.progress = v;
    this.updateView();
  };

  LoadingController.prototype.updateView = function updateView() {
    if (this.view) {

      this.view.setState('widLoadingProgress', {
        enable: true,
        visible: this.showProgress,
        active: false
      });

      this.view.setState('txtLoadingProgress', {
        value: this.getLoadingMsg(this.progress),
        visible: true
      });

      for (var _iterator = this.view.getLinks(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var name = _ref;

        this.view.setState(name, {
          enable: false,
          visible: true,
          active: false
        });
      }

      this.view.setState('inpPages', {
        visible: true,
        value: ''
      });

      this.view.setState('inpPage', {
        visible: true,
        enable: false,
        value: ''
      });
    }
  };

  return LoadingController;
}();

exports.default = LoadingController;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _EventConverter2 = __webpack_require__(7);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MouseEventConverter = function (_EventConverter) {
  _inherits(MouseEventConverter, _EventConverter);

  function MouseEventConverter(wnd, doc, element) {
    _classCallCheck(this, MouseEventConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.element = element;
    _this.binds = {
      convert: _this.convert.bind(_this)
    };
    (0, _libs.$)(_this.element).on('mousemove mousedown mouseover mouseout click', _this.binds.convert);
    (0, _libs.$)(_this.doc).on('mouseup', _this.binds.convert);
    return _this;
  }

  MouseEventConverter.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('mousemove mousedown mouseover mouseout click', this.binds.convert);
    (0, _libs.$)(this.doc).off('mouseup', this.binds.convert);
  };

  return MouseEventConverter;
}(_EventConverter3.default);

exports.default = MouseEventConverter;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _MathUtils = __webpack_require__(5);

var _MathUtils2 = _interopRequireDefault(_MathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Object3DWatcher = function () {
  function Object3DWatcher(visual, boundBoxClb) {
    var testScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.testScale;

    _classCallCheck(this, Object3DWatcher);

    this.visual = visual;
    this.boundBoxClb = boundBoxClb;
    this.testScale = testScale;
    this.camera = visual.camera;
    this.element = this.visual.element;
    this.elementSize = { w: 1, h: 1 };
    this.devicePixelRatio = this.visual.wnd.devicePixelRatio || 1;
    this.orbit = visual.getOrbit();
    this.scale = 1;
    this.padding = 0;

    this.eps = 1e-4;
    this.v = new _libs.THREE.Vector3();
    this.dv = new _libs.THREE.Vector2();

    this.enabled = false;

    visual.addRenderCallback(this.update.bind(this));

    this.os = {
      vx: 0,
      vy: 0,
      x: 0,
      y: 0
    };
    this.orbit.update();
    this.camera.updateMatrixWorld();
    var box = this.computeClientBoundBox(),
        k = 1.11;
    this.movePan({ x: -k * box.mid.x, y: -k * box.mid.y });
  }

  Object3DWatcher.prototype.setPadding = function setPadding(padding) {
    this.padding = padding;
  };

  Object3DWatcher.prototype.movePan = function movePan(dv) {
    this.orbit.pan(dv.x * this.visual.width(), -dv.y * this.visual.height());
  };

  Object3DWatcher.prototype.vToCamera = function vToCamera(v) {
    v.project(this.camera);
    return {
      x: 0.5 * v.x,
      y: 0.5 * v.y
    };
  };

  Object3DWatcher.prototype.computeClientBoundBox = function computeClientBoundBox() {
    var box = this.boundBoxClb(),
        xs = [box.min.x, box.max.x],
        ys = [0, 0],
        zs = [box.min.z, box.max.z];

    var ps = [],
        res = { max: {}, min: {} };
    for (var _iterator = xs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var x = _ref;

      for (var _iterator2 = ys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var y = _ref2;

        for (var _iterator3 = zs, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
          var _ref3;

          if (_isArray3) {
            if (_i3 >= _iterator3.length) break;
            _ref3 = _iterator3[_i3++];
          } else {
            _i3 = _iterator3.next();
            if (_i3.done) break;
            _ref3 = _i3.value;
          }

          var z = _ref3;

          ps.push(this.vToCamera(this.v.set(x, y, z)));
        }
      }
    }

    ps.sort(function (p1, p2) {
      return p1.x - p2.x;
    });
    res.min.x = ps[0].x;
    res.max.x = ps[ps.length - 1].x;
    ps.sort(function (p1, p2) {
      return p1.y - p2.y;
    });
    res.min.y = ps[0].y;
    res.max.y = ps[ps.length - 1].y;

    res.width = res.max.x - res.min.x;
    res.height = res.max.y - res.min.y;

    res.mid = {
      x: 0.5 * (res.max.x + res.min.x),
      y: 0.5 * (res.max.y + res.min.y)
    };

    return res;
  };

  Object3DWatcher.prototype.setObject = function setObject(boundBoxClb) {
    this.boundBoxClb = boundBoxClb;
  };

  Object3DWatcher.prototype.testScale = function testScale() {
    return true;
  };

  Object3DWatcher.prototype.computeCorr = function computeCorr(K, min, max) {
    var corr = 0;
    if (K < 1) {
      if (min > -0.5) {
        corr = -0.5 - min;
      } else if (max < 0.5) {
        corr = 0.5 - max;
      }
    } else {
      if (min < -0.5) {
        corr = -0.5 - min;
      } else if (max > 0.5) {
        corr = 0.5 - max;
      }
    }
    return corr;
  };

  Object3DWatcher.prototype.centerView = function centerView(T) {
    var box = this.computeClientBoundBox(),
        Kx = this.elementSize.w / box.width,
        Ky = this.elementSize.h / box.height,
        K = Math.min(Kx, Ky);

    if (this.testScale() && Math.abs(1 / K - this.scale) > this.eps) {
      var scale = 1 / K + 0.2 * (this.scale - 1 / K);
      this.orbit.setScale(this.orbit.getScale() / (K * scale));
      this.orbit.update();
      this.camera.updateMatrixWorld();
      box = this.computeClientBoundBox();
      Kx = this.elementSize.w / box.width;
      Ky = this.elementSize.h / box.height;
      K = Math.min(Kx, Ky);
    }

    var dv = this.dv;
    if (K > 1 - this.eps) {
      if (this.padding) {
        var height = this.visual.height(),
            marg = 0.5 * (Ky - 1) / Ky,
            pad = this.padding / height,
            dpad = Math.max(0, Math.abs(pad) - marg);
        dv.set(-box.mid.x, -Math.sign(pad) * Math.min(Math.max(0, marg - 20 / height), dpad) - box.mid.y);
      } else {
        dv.set(-box.mid.x, -box.mid.y);
      }
    } else {
      dv.set(this.computeCorr(Kx, box.min.x, box.max.x), this.computeCorr(Ky, box.min.y, box.max.y));
    }

    if (Math.sqrt(this.os.vx * this.os.vx + this.os.vy * this.os.vy) > 0.003 || dv.length() > 0.003) {
      var dt = 1 / 60,
          t = 0,
          os = _extends({}, this.os, {
        x: 0,
        y: 0
      });
      os.tf = function (vx, vy, x, y) {
        return {
          x: 75 * (dv.x - x),
          y: 75 * (dv.y - y)
        };
      };
      while (t < T) {
        if (t + dt > T) {
          dt = T - t;
        }
        os = this.integrate(os, dt);
        t += dt;
      }
      this.movePan(os);
      this.os = os;
    }
  };

  Object3DWatcher.prototype.integrate = function integrate(os, dt) {
    var _MathUtils$rk = _MathUtils2.default.rk4(this.dy.bind(os), 0, dt, [os.vx, os.vy, os.x, os.y]),
        vx = _MathUtils$rk[0],
        vy = _MathUtils$rk[1],
        x = _MathUtils$rk[2],
        y = _MathUtils$rk[3];

    return _extends({}, os, {
      vx: vx, vy: vy, x: x, y: y
    });
  };

  Object3DWatcher.prototype.dy = function dy(t, Y) {
    var vx = Y[0],
        vy = Y[1],
        x = Y[2],
        y = Y[3],
        vd = 15,
        tf = this.tf(vx, vy, x, y);

    return [tf.x - vd * vx, tf.y - vd * vy, vx, vy];
  };

  Object3DWatcher.prototype.update = function update(dt) {
    if (this.enabled && this.boundBoxClb) {
      this.centerView(dt);
    }
  };

  return Object3DWatcher;
}();

exports.default = Object3DWatcher;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Orbit = function (_THREE$EventDispatche) {
  _inherits(Orbit, _THREE$EventDispatche);

  function Orbit(object, domElement) {
    _classCallCheck(this, Orbit);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.object = object;
    _this.domElement = domElement || document.body;

    // Set to false to disable this control
    _this.enabled = true;

    // "target" sets the location of focus, where the object orbits around
    _this.target = new _libs.THREE.Vector3();

    // How far you can dolly in and out(PerspectiveCamera only)
    _this.minDistance = 0;
    _this.maxDistance = Infinity;

    // How far you can zoom in and out(OrthographicCamera only)
    _this.minZoom = 0;
    _this.maxZoom = Infinity;

    // How far you can orbit vertically, upper and lower limits.
    // Range is 0 to Math.PI radians.
    _this.minPolarAngle = 0; // radians
    _this.maxPolarAngle = Math.PI; // radians

    // How far you can orbit horizontally, upper and lower limits.
    // If set, must be a sub-interval of the interval [-Math.PI, Math.PI ].
    _this.minAzimuthAngle = -Infinity; // radians
    _this.maxAzimuthAngle = Infinity; // radians

    // Set to true to enable damping (inertia)
    // If damping is enabled, you must call controls.update() in your animation loop
    _this.enableDamping = false;
    _this.dampingFactor = 0.25;

    // This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
    // Set to false to disable zooming
    _this.enableZoom = true;
    _this.zoomSpeed = 1.0;

    // Set to false to disable rotating
    _this.enableRotate = true;
    _this.rotateSpeed = 1.0;

    // Set to false to disable panning
    _this.enablePan = true;

    // Set to true to automatically rotate around the target
    // If auto-rotate is enabled, you must call controls.update() in your animation loop
    _this.autoRotate = false;
    _this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

    // for reset
    _this.target0 = _this.target.clone();
    _this.position0 = _this.object.position.clone();
    _this.zoom0 = _this.object.zoom;

    //
    // public methods
    //
    _this.getPolarAngle = function () {
      return spherical.phi;
    };

    _this.getAzimuthalAngle = function () {
      return spherical.theta;
    };

    _this.reset = function () {
      scope.target.copy(scope.target0);
      scope.object.position.copy(scope.position0);
      scope.object.zoom = scope.zoom0;

      scope.object.updateProjectionMatrix();
      scope.dispatchEvent(changeEvent);

      scope.update();
    };

    _this.zoomOut = function () {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

      var _speed = this.zoomSpeed;
      this.zoomSpeed = speed;
      dollyIn(getZoomScale());
      this.zoomSpeed = _speed;
    };

    _this.zoomIn = function () {
      var speed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.zoomSpeed;

      var _speed = this.zoomSpeed;
      this.zoomSpeed = speed;
      dollyOut(getZoomScale());
      this.zoomSpeed = _speed;
    };

    _this.getScale = function () {
      return scale;
    };

    _this.setScale = function (newScale) {
      scale = newScale;
    };

    // this method is exposed, but perhaps it would be better if we can make it private...
    _this.update = function () {
      var offset = new _libs.THREE.Vector3();
      // so camera.up is the orbit axis
      var quat = new _libs.THREE.Quaternion().setFromUnitVectors(object.up, new _libs.THREE.Vector3(0, 1, 0));
      var quatInverse = quat.clone().inverse();
      var lastPosition = new _libs.THREE.Vector3();
      var lastQuaternion = new _libs.THREE.Quaternion();

      return function update() {
        var position = scope.object.position;
        offset.copy(position).sub(scope.target);
        // rotate offset to "y-axis-is-up" space
        offset.applyQuaternion(quat);
        // angle from z-axis around y-axis
        spherical.setFromVector3(offset);
        if (scope.autoRotate) {
          rotateLeft(getAutoRotationAngle());
        }
        spherical.theta += sphericalDelta.theta;
        spherical.phi += sphericalDelta.phi;
        // restrict theta to be between desired limits
        spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta));
        // restrict phi to be between desired limits
        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));
        spherical.makeSafe();
        spherical.radius *= scale;
        // restrict radius to be between desired limits
        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius));
        // move target to panned location
        scope.target.add(panOffset);
        offset.setFromSpherical(spherical);
        // rotate offset back to "camera-up-vector-is-up" space
        offset.applyQuaternion(quatInverse);
        position.copy(scope.target).add(offset);
        scope.object.lookAt(scope.target);

        if (scope.enableDamping === true) {
          sphericalDelta.theta *= 1 - scope.dampingFactor;
          sphericalDelta.phi *= 1 - scope.dampingFactor;
        } else {
          sphericalDelta.set(0, 0, 0);
        }

        scale = 1;
        panOffset.set(0, 0, 0);

        // update condition is:
        // min(camera displacement, camera rotation in radians)^2 > EPS
        // using small-angle approximation cos(x/2) = 1-x^2 / 8

        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {

          scope.dispatchEvent(changeEvent);

          lastPosition.copy(scope.object.position);
          lastQuaternion.copy(scope.object.quaternion);
          zoomChanged = false;

          return true;
        }
        return false;
      };
    }();

    _this.dispose = function () {};

    //
    // internals
    //
    var scope = _this;
    var changeEvent = { type: 'change' };
    var EPS = 1e-6;
    // current position in spherical coordinates
    var spherical = new _libs.THREE.Spherical();
    var sphericalDelta = new _libs.THREE.Spherical();

    var scale = 1;
    var panOffset = new _libs.THREE.Vector3();
    var zoomChanged = false;

    function getAutoRotationAngle() {
      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;
    }

    function getZoomScale() {
      return Math.pow(0.95, scope.zoomSpeed);
    }

    function rotateLeft(angle) {
      sphericalDelta.theta -= angle;
    }

    function rotateUp(angle) {
      sphericalDelta.phi -= angle;
    }

    var panLeft = function () {
      var v = new _libs.THREE.Vector3();
      return function panLeft(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix
        v.multiplyScalar(-distance);
        panOffset.add(v);
      };
    }();

    var panUp = function () {
      var v = new _libs.THREE.Vector3();
      return function panUp(distance, objectMatrix) {
        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix
        v.multiplyScalar(distance);
        panOffset.add(v);
      };
    }();

    // deltaX and deltaY are in pixels; right and down are positive
    scope.pan = function () {
      var offset = new _libs.THREE.Vector3();
      return function pan(deltaX, deltaY) {
        var element = scope.domElement;
        if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
          // perspective
          var position = scope.object.position;
          offset.copy(position).sub(scope.target);
          var targetDistance = offset.length();
          // half of the fov is center to top of screen
          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0);
          // we actually don't use screenWidth, since perspective camera is fixed to screen height
          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);
          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);
        } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
          // orthographic
          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);
          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);
        } else {
          // camera neither orthographic nor perspective
          console.warn('WARNING: OrbitControls.js encountered an unknown camera type-pan disabled.');
          scope.enablePan = false;
        }
      };
    }();

    function dollyIn(dollyScale) {
      if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
        scale /= dollyScale;
      } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    function dollyOut(dollyScale) {
      if (scope.object instanceof _libs.THREE.PerspectiveCamera) {
        scale *= dollyScale;
      } else if (scope.object instanceof _libs.THREE.OrthographicCamera) {
        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));
        scope.object.updateProjectionMatrix();
        zoomChanged = true;
      } else {
        console.warn('WARNING: OrbitControls.js encountered an unknown camera type-dolly/zoom disabled.');
        scope.enableZoom = false;
      }
    }

    /* Actions */

    function rotate(event, data) {
      if (scope.enabled && scope.enableRotate && data.state === 'move') {
        var element = scope.domElement;
        // rotating across whole screen goes 360 degrees around
        rotateLeft(2 * Math.PI * data.dx / element.clientWidth * scope.rotateSpeed);
        // rotating up and down along whole screen attempts to go 360, but limited to 180
        rotateUp(2 * Math.PI * data.dy / element.clientHeight * scope.rotateSpeed);
        scope.update();
      }
    }

    function pan(event, data) {
      if (scope.enabled && scope.enablePan && data.state === 'move') {
        scope.pan(data.dx, data.dy);
        scope.update();
      }
    }

    function offsetDolly(event, data) {
      if (scope.enabled && scope.enableZoom && data.state === 'move') {
        if (data.dy > 0) {
          dollyIn(getZoomScale());
        } else if (data.dy < 0) {
          dollyOut(getZoomScale());
        }
        scope.update();
      }
    }

    function wheelDolly(event) {
      if (scope.enabled && scope.enableZoom) {
        if (event.deltaY > 0) {
          dollyOut(getZoomScale());
        } else if (event.deltaY < 0) {
          dollyIn(getZoomScale());
        }
        scope.update();
      }
    }

    _this.actions = {
      rotate: rotate,
      pan: pan,
      offsetDolly: offsetDolly,
      wheelDolly: wheelDolly

      // force an update at start
    };_this.update();
    return _this;
  }

  return Orbit;
}(_libs.THREE.EventDispatcher);

exports.default = Orbit;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(6);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _Pdf = __webpack_require__(19);

var _Pdf2 = _interopRequireDefault(_Pdf);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

var _CustomEventConverter = __webpack_require__(16);

var _CustomEventConverter2 = _interopRequireDefault(_CustomEventConverter);

var _PolyTarget = __webpack_require__(73);

var _PolyTarget2 = _interopRequireDefault(_PolyTarget);

var _Finder = __webpack_require__(17);

var _Finder2 = _interopRequireDefault(_Finder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PdfImage = function (_ImageBase) {
  _inherits(PdfImage, _ImageBase);

  function PdfImage(context, width, height, color, pdf, n) {
    _classCallCheck(this, PdfImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.query = '';
    _this.n = n;
    _this.pdf = pdf;
    _this.v = { x: 0, y: 0, z: 0, set: function set(x, y, z) {
        this.x = x;this.y = y;this.z = z;
        return this;
      }, transform: function transform(m) {
        var x = m.m[0][0] * this.x + m.m[1][0] * this.y + m.m[2][0] * this.z,
            y = m.m[0][1] * this.x + m.m[1][1] * this.y + m.m[2][1] * this.z,
            z = m.m[0][2] * this.x + m.m[0][2] * this.y + m.m[2][0] * this.z;
        this.x = x;
        this.y = y;
        this.z = z;
        return this;
      } };
    _this.m = { m: [[1, 0, 0], [0, 1, 0], [0, 0, 1]], set: function set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        this.m = [[m00, m01, m02], [m10, m11, m12], [m20, m21, m22]];
        return this;
      } };

    _this.startRender = function () {
      _this.pdf.getHandler(_this.render.bind(_this));
    };
    Promise.resolve().then(function () {
      return _this.pdf.getHandler(_this.init.bind(_this));
    });
    return _this;
  }

  PdfImage.prototype.setQuery = function setQuery(query) {
    this.query = query.trim();
    if (this.textContent) {
      this.setHits(this.textContent);
      // this.finishLoad();
    }
  };

  PdfImage.prototype.rectSize = function rectSize(r) {
    return {
      width: r[2] - r[0],
      height: r[3] - r[1]
    };
  };

  PdfImage.prototype.createPoly = function createPoly(m, p, s) {
    var poly = [],
        v = this.v;
    v.set(p.x, p.y, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x, p.y + s.height, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x + s.width, p.y + s.height, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    v.set(p.x + s.width, p.y, 1).transform(m);
    poly.push({ x: v.x, y: v.y });
    return poly;
  };

  PdfImage.prototype.getSimulatedDoc = function getSimulatedDoc() {
    return this;
  };

  PdfImage.prototype.simulate = function simulate(e, doc, x, y) {
    if (this.eventConverter) {
      this.eventConverter.convert(e, { doc: doc, x: x, y: y });
    }
  };

  PdfImage.prototype.setAnnotations = function setAnnotations(annos) {
    var _this2 = this;

    var t = this.viewport.transform,
        targets = [];
    this.m.set(t[0], t[1], 0, t[2], t[3], 0, t[4], t[5], 1);

    for (var _iterator = annos, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var anno = _ref;

      if (anno.subtype === 'Link' || anno.subtype === 'Widget') {
        var rect = anno.rect,
            aPos = {
          x: rect[0],
          y: rect[1]
        },
            aSz = this.rectSize(rect);
        var _target = new _PolyTarget2.default(this.createPoly(this.m, aPos, aSz).map(function (p) {
          return { x: p.x / _this2.viewport.width, y: 1 - p.y / _this2.viewport.height };
        }));
        _target.anno = anno;
        _target.callback = this.annoClb.bind(this);
        targets.push(_target);
      }
    }
    if (targets.length) {
      this.eventConverter = new _CustomEventConverter2.default(this.wnd, this.doc, _PolyTarget2.default.test, this.getSimulatedDoc());
      for (var _iterator2 = targets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var target = _ref2;

        this.eventConverter.addCustom(target);
      }
    }
  };

  PdfImage.prototype.setHits = function setHits(textContent) {
    this.textContent = textContent;
    if (this.query !== '') {
      this.finder = new _Finder2.default(textContent.items.map(function (item) {
        return item.str;
      }), this.query, { contexts: false });
    }
  };

  PdfImage.prototype.renderHits = function renderHits() {
    var _this3 = this;

    if (this.finder) {
      var view = this.page.view,
          testSz = (0, _libs.$)('<div style="position: absolute; visibility: hidden;"></div>').appendTo('body'),
          textDiv = testSz[0],
          baseOffset = testSz.offset().left;
      for (var _iterator3 = this.finder.getHits(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var hit = _ref3;

        var item = this.textContent.items[hit.index],
            t = _libs.PDFJS.Util.transform(this.viewport.transform, item.transform),
            style = this.textContent.styles[item.fontName],
            angle = Math.atan2(t[1], t[0]) + (style.vertical ? Math.PI / 2 : 0),
            fontHeight = Math.sqrt(t[2] * t[2] + t[3] * t[3]),
            fontAscent = style.ascent ? style.ascent * fontHeight : style.descent ? (1 + style.descent) * fontHeight : fontHeight;
        testSz.html(item.str.substr(0, hit.offset) + '<span>' + item.str.substr(hit.offset, hit.length) + '</span>' + item.str.substr(hit.offset + hit.length));

        textDiv.style.fontSize = fontHeight + 'px';
        textDiv.style.fontFamily = style.fontFamily;

        var testSpan = testSz.find('span'),
            iwidth = style.vertical ? item.height * this.viewport.scale : item.width * this.viewport.scale,
            width = testSz.width(),
            relativeOffset = (testSpan.offset().left - baseOffset) / width;
        this.m.set(1, 0, 0, 0, 1, 0, t[4] + fontAscent * Math.sin(angle), t[5] - fontAscent * Math.cos(angle), 1);
        var poly = this.createPoly(this.m, { x: relativeOffset * iwidth, y: 0 }, { width: iwidth * testSpan.width() / width, height: testSpan.height() });
        poly = poly.map(function (p) {
          return { x: p.x / _this3.viewport.width, y: 1 - p.y / _this3.viewport.height };
        });
        this.renderHit(poly);
      }
      testSz.remove();
    }
  };

  PdfImage.prototype.annoClb = function annoClb(e, data) {
    if (this.context.dispatchEvent) {
      this.context.dispatchEvent({
        type: 'pdfAnnotation',
        event: e,
        annotation: data.target.anno
      });
    }
  };

  PdfImage.prototype.calcViewport = function calcViewport() {
    var scale = _BaseMathUtils2.default.calcScale(this.size.width, this.size.height, this.resW, this.resH);
    if (!this.viewport || Math.abs(this.viewport.scale - scale) > 1e-4) {
      this.viewport = this.page.getViewport({ scale: scale });
      if (this.type !== 'full') {
        if (this.type === 'right') {
          this.viewport.offsetX += 0.5 * this.viewport.width;
          this.viewport.transform[4] -= 0.5 * this.viewport.width;
        }
        this.viewport.width /= 2;
      }
      this.resW = this.width = this.viewport.width;
      this.resH = this.height = this.viewport.height;
    }
  };

  PdfImage.prototype.init = function init() {
    var _this4 = this;

    this.type = this.pdf.getPageType(this.n);
    this.pdf.getPage(this.n).then(function (page) {
      _this4.page = page;
      _this4.size = _Pdf2.default.getPageSize(page);
      if (_this4.type !== 'full') {
        _this4.size.width /= 2;
      }
      page.getAnnotations().then(_this4.setAnnotations.bind(_this4));
      page.getTextContent().then(_this4.setHits.bind(_this4));
      _this4.calcViewport();
      _this4.finishLoad();
    }).catch(function (e) {
      console.error('Cannot load PDF page: ' + (_this4.n + 1));
      console.error(e);
      _this4.finishLoad();
    });
  };

  PdfImage.prototype.setResolution = function setResolution(res) {
    _ImageBase.prototype.setResolution.call(this, res);
    if (this.page) {
      this.calcViewport();
    }
  };

  PdfImage.prototype.render = function render(handler) {
    var _this5 = this;

    if (this.page) {
      this.page.render({
        canvasContext: this.pushCtx(),
        viewport: this.viewport
      }).promise.then(function () {
        _this5.renderHits();
        _this5.popCtx();
        _this5.finishRender();
      });
    } else {
      this.renderBlankPage();
      this.finishRender();
    }
  };

  return PdfImage;
}(_ImageBase3.default);

exports.default = PdfImage;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Search = function () {
  function Search(container, pages) {
    _classCallCheck(this, Search);

    this.container = container;
    this.pages = pages;
    this.prevResults = [];
    container.html('\n      <div class="search">\n        <div class="query">\n          <input class="inpQuery" type="text" maxlength="30" value="" />\n        </div>\n        <div class="results">\n        </div>\n        <div class="status">\n\n        </div>\n      </div>\n    '.fb3dQFilter());
    this.query = container.find('.query input');
    this.results = container.find('.results');
    this.status = container.find('.status');

    this.binds = {
      navigate: this.navigate.bind(this),
      doQuery: this.doQuery.bind(this)
    };

    this.query.on('keydown', this.binds.doQuery);
    this.results.on('click', this.binds.navigate);
  }

  Search.prototype.dispose = function dispose() {
    this.results.off('click', this.binds.navigate);
    this.query.off('keydown', this.binds.doQuery);
  };

  Search.prototype.navigate = function navigate(e) {
    e.preventDefault();
    if (this.onNavigate !== undefined) {
      var target = (0, _libs.$)(e.target);
      if (!target.hasClass('result')) {
        var t = target.find('.result');
        if (t.length) {
          target = t;
        } else {
          while (target.length && !target.hasClass('result')) {
            target = (0, _libs.$)(target[0].parentNode);
          }
        }
      }
      var page = target.attr('data');
      if (page !== undefined) {
        this.onNavigate(parseInt(page));
      }
    }
  };

  Search.prototype.doQuery = function doQuery() {
    var _this = this;

    if (this.onQuery) {
      var queryStamp = this.queryStamp = Date.now();
      setTimeout(function () {
        if (queryStamp === _this.queryStamp) {
          _this.onQuery(_this.query[0].value.trim());
        }
      }, 1000);
    }
  };

  Search.prototype.setResults = function setResults(results, lastPage) {
    if (this.prevResults.length && results[0] !== this.prevResults[0]) {
      this.prevResults = [];
      this.results.html('');
    }
    var htmls = [];
    for (var i = this.prevResults.length; i < results.length; ++i) {
      var result = results[i];
      htmls.push('<div class="result" data="' + result.page + '">');
      htmls.push('<a href="#">');
      htmls.push('<div>' + result.contexts.join('</div><div>') + '</div>');
      htmls.push('</a>');
      htmls.push('</div>');
    }
    (0, _libs.$)(htmls.join('')).appendTo(this.results);
    this.prevResults = [].concat(results);
    if (lastPage === undefined) {
      this.status.html('');
    } else {
      this.status.html(lastPage + ' of ' + this.pages);
    }
  };

  return Search;
}();

exports.default = Search;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _ImageBase2 = __webpack_require__(6);

var _ImageBase3 = _interopRequireDefault(_ImageBase2);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StaticImage = function (_ImageBase) {
  _inherits(StaticImage, _ImageBase);

  function StaticImage(context, width, height, color, src) {
    _classCallCheck(this, StaticImage);

    var _this = _possibleConstructorReturn(this, _ImageBase.call(this, context, width, height, color));

    _this.binds = {};
    _this.image = new Image();
    _this.image.crossOrigin = 'Anonymous';
    _this.binds.imageLoad = function () {
      _this.width = _this.image.width;
      _this.height = _this.image.height;
      _this.resH = _this.height / _this.width * _this.resW;
      _this.startRender = function () {
        _this.renderImage(_this.image);
        _this.finishRender();
      };
      _this.finishLoad();
    };
    _this.binds.imageError = function () {
      _this.startRender = function () {
        _this.renderNotFoundPage();
        _this.finishRender();
      };
      _this.finishLoad();
    };
    (0, _libs.$)(_this.image).on('load', _this.binds.imageLoad).on('error', _this.binds.imageError);
    _this.image.src = _Utils2.default.normalizeUrl(src);
    return _this;
  }

  StaticImage.prototype.dispose = function dispose() {
    (0, _libs.$)(this.image).off('load', this.binds.imageLoad).off('error', this.binds.imageError);
    this.image.src = '';
    delete this.image;
    _ImageBase.prototype.dispose.call(this);
  };

  return StaticImage;
}(_ImageBase3.default);

exports.default = StaticImage;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TextureAnimator = function () {
  function TextureAnimator(img, tilesHoriz, tilesVert, numTiles, tileDispDuration) {
    _classCallCheck(this, TextureAnimator);

    var texture = new _libs.THREE.Texture();
    texture.minFilter = _libs.THREE.LinearFilter;
    texture.image = img;
    texture.needsUpdate = true;

    // note: texture passed by reference, will be updated by the update function.
    this.texture = texture;
    this.tilesHorizontal = tilesHoriz;
    this.tilesVertical = tilesVert;
    // how many images does this spritesheet contain?
    //  usually equals tilesHoriz * tilesVert, but not necessarily,
    //  if there at blank tiles at the bottom of the spritesheet.
    this.numberOfTiles = numTiles;
    texture.repeat.set(1 / this.tilesHorizontal, 1 / this.tilesVertical);

    // how long should each image be displayed?
    this.tileDisplayDuration = tileDispDuration;

    // how long has the current image been displayed?
    this.currentDisplayTime = 0;

    // which image is currently being displayed?
    this.currentTile = 0;
  }

  TextureAnimator.prototype.update = function update(milliSec) {
    this.currentDisplayTime += milliSec;
    while (this.currentDisplayTime > this.tileDisplayDuration) {
      this.currentDisplayTime -= this.tileDisplayDuration;
      ++this.currentTile;
      if (this.currentTile == this.numberOfTiles) this.currentTile = 0;
      var currentColumn = this.currentTile % this.tilesHorizontal;
      this.texture.offset.x = currentColumn / this.tilesHorizontal;
      var currentRow = Math.floor(this.currentTile / this.tilesHorizontal);
      this.texture.offset.y = currentRow / this.tilesVertical;
    }
  };

  TextureAnimator.prototype.dispose = function dispose() {
    var img = this.texture.image;
    img.height = img.width = 0;
    this.texture.dispose();
  };

  return TextureAnimator;
}();

exports.default = TextureAnimator;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

var _MouseEventConverter2 = __webpack_require__(57);

var _MouseEventConverter3 = _interopRequireDefault(_MouseEventConverter2);

var _ThreeEventConverter = __webpack_require__(20);

var _ThreeEventConverter2 = _interopRequireDefault(_ThreeEventConverter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThreeMouseEventConverter = function (_MouseEventConverter) {
  _inherits(ThreeMouseEventConverter, _MouseEventConverter);

  function ThreeMouseEventConverter(wnd, doc, visualWorld, test) {
    _classCallCheck(this, ThreeMouseEventConverter);

    var _this = _possibleConstructorReturn(this, _MouseEventConverter.call(this, wnd, doc, visualWorld.element));

    _Utils2.default.extends(_this, new _ThreeEventConverter2.default(visualWorld, test));
    return _this;
  }

  ThreeMouseEventConverter.prototype.getCallback = function getCallback(object) {
    return object.object.userData.mouseCallback;
  };

  ThreeMouseEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element);
    var offset = jElement.offset();
    this.coords.x = (e.pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((e.pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  return ThreeMouseEventConverter;
}(_MouseEventConverter3.default);

exports.default = ThreeMouseEventConverter;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

var _TouchEventConverter2 = __webpack_require__(67);

var _TouchEventConverter3 = _interopRequireDefault(_TouchEventConverter2);

var _ThreeEventConverter = __webpack_require__(20);

var _ThreeEventConverter2 = _interopRequireDefault(_ThreeEventConverter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThreeTouchEventConverter = function (_TouchEventConverter) {
  _inherits(ThreeTouchEventConverter, _TouchEventConverter);

  function ThreeTouchEventConverter(wnd, doc, visualWorld, test) {
    _classCallCheck(this, ThreeTouchEventConverter);

    var _this = _possibleConstructorReturn(this, _TouchEventConverter.call(this, wnd, doc, visualWorld.element));

    _Utils2.default.extends(_this, new _ThreeEventConverter2.default(visualWorld, test));
    return _this;
  }

  ThreeTouchEventConverter.prototype.getCallback = function getCallback(object) {
    return object.object.userData.touchCallback;
  };

  ThreeTouchEventConverter.prototype.setCoordsFromEvent = function setCoordsFromEvent(e) {
    var jElement = (0, _libs.$)(this.element),
        offset = jElement.offset(),
        touches = e.touches || e.originalEvent.touches,
        touch = touches.length ? touches[0] : (this.lastTouches || [{ pageX: 0, pageY: 0 }])[0],
        pageX = touch.pageX,
        pageY = touch.pageY;
    this.lastTouches = touches.length ? touches : this.lastTouches;
    this.coords.x = (pageX - offset.left) / jElement.width() * 2 - 1;
    this.coords.y = -((pageY - offset.top) / jElement.height()) * 2 + 1;
    return this.coords;
  };

  return ThreeTouchEventConverter;
}(_TouchEventConverter3.default);

exports.default = ThreeTouchEventConverter;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _ImageFactory = __webpack_require__(8);

var _ImageFactory2 = _interopRequireDefault(_ImageFactory);

var _GraphUtils = __webpack_require__(4);

var _GraphUtils2 = _interopRequireDefault(_GraphUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Thumbnails = function () {
  function Thumbnails(context, container, thumbnailsClb, size) {
    var _this = this;

    var props = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : { kWtoH: 210 / 297 };

    _classCallCheck(this, Thumbnails);

    this.container = container;
    this.p = props;
    this.thumbnailsClb = thumbnailsClb;
    this.size = size;
    this.queue = { first: 0, len: 0 };
    this.canvas = _GraphUtils2.default.createCanvas();
    this.imageFactory = new _ImageFactory2.default(_extends({}, context, {
      renderCanvas: this.canvas,
      renderCanvasCtx: this.canvas.getContext('2d')
    }));
    this.thumbnails = [];
    for (var i = 0; i < size; ++i) {
      var info = this.thumbnailsClb(i);
      this.thumbnails.push(_extends({}, info, {
        index: i,
        loaded: info.type === 'thumbnail-image',
        heading: null,
        thumbnail: null,
        title: info.title || i
      }));
    }

    this.binds = {
      update: this.update.bind(this),
      navigate: function navigate(e) {
        e.preventDefault();
        if (_this.onNavigate) {
          var node = e.target;
          while (node && !node.dataThumbnail) {
            node = node.parentNode;
          }
          _this.onNavigate(node.dataThumbnail.index);
        }
      }
    };
    this.container.on('scroll', this.binds.update);
  }

  Thumbnails.prototype.getSize = function getSize() {
    return this.size;
  };

  Thumbnails.prototype.setEnable = function setEnable(enable) {
    this.enable = enable;
    this.update();
  };

  Thumbnails.prototype.dispose = function dispose() {
    this.container.find('a').off('click', this.binds.navigate);
    this.container.off('scroll', this.binds.update);
    this.container.html('');
    this.canvas.height = this.canvas.width = 0;
    delete this.canvas;
  };

  Thumbnails.prototype.setLoadQueue = function setLoadQueue(first, len) {
    var _this2 = this;

    first = Math.min(first, this.size - 1);
    len = Math.min(len, this.size - first);
    this.queue = { first: first, len: len };
    Promise.resolve().then(function () {
      return _this2.update();
    });
  };

  Thumbnails.prototype.load = function load(thumbnail) {
    var _this3 = this;

    this.loading = true;
    var wrapper = this.imageFactory.build(thumbnail, thumbnail.number === undefined ? thumbnail.index : thumbnail.number, this.p.kWtoH * 300, 300);
    wrapper.onChange = function (canvas) {
      _this3.setImage(thumbnail, canvas.toDataURL('image/png'));
      thumbnail.loaded = true;
      wrapper.dispose();
      _this3.loading = false;
      Promise.resolve().then(function () {
        return _this3.update();
      });
    };
  };

  Thumbnails.prototype.getActive = function getActive() {
    var first = this.container.scrollTop(),
        last = first + this.container.height(),
        res = [];
    for (var _iterator = this.thumbnails, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var thumbnail = _ref;

      if (Math.max(thumbnail.first, first) < Math.min(thumbnail.last, last)) {
        res.push(thumbnail);
      }
    }
    return res;
  };

  Thumbnails.prototype.update = function update() {
    if (!this.loading && this.canvas) {
      if (this.enable) {
        if (!this.built) {
          this.render();
        }
        var active = this.getActive();
        for (var _iterator2 = active, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
          var _ref2;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
          }

          var thumbnail = _ref2;

          if (!thumbnail.loaded) {
            this.load(thumbnail);
            break;
          }
        }
      }
      if (!this.loading) {
        for (var i = this.queue.first; i < this.queue.first + this.queue.len; ++i) {
          var t = this.thumbnails[i];
          if (!t.loaded) {
            this.load(t);
            break;
          }
        }
      }
    }
  };

  Thumbnails.prototype.setImage = function setImage(thumbnail, img) {
    var trigger = thumbnail.img !== img;
    thumbnail.img = img;
    if (thumbnail.thumbnail) {
      thumbnail.thumbnail.css('background-image', ['url(\'', img, '\')'].join(''));
      thumbnail.thumbnail.removeClass('loading');
    }
    if (trigger) {
      this.container.trigger('fb3d.thumbnails.thumbnailLoaded', [thumbnail]);
    }
  };

  Thumbnails.prototype.render = function render() {
    var elements = ['<div class="thumbnails">'];
    for (var i = 0; i < this.size; ++i) {
      elements.push(['<div class="item"><a href="#"><div class="thumbnail loading" style="padding-top:' + Math.round(100 / this.p.kWtoH) + '%;"></div></a><div class="heading"><a href="#" title="', i + 1, '">', i + 1, '</a></div></div>'].join(''));
    }
    elements.push('</div>');
    this.container.append(elements.join(''));
    var items = this.container.find('.item'),
        base = this.container.find('.thumbnails').offset().top;
    for (var _i3 = 0; _i3 < items.length; ++_i3) {
      var item = (0, _libs.$)(items[_i3]);
      this.thumbnails[_i3].heading = item.find('.heading');
      this.thumbnails[_i3].thumbnail = item.find('.thumbnail');
      this.thumbnails[_i3].first = item.offset().top - base;
      this.thumbnails[_i3].last = this.thumbnails[_i3].first + item.height();
      if (this.thumbnails[_i3].loaded) {
        this.setImage(this.thumbnails[_i3], this.thumbnails[_i3].img || this.thumbnails[_i3].src);
      }
      var as = item.find('a');
      for (var j = 0; j < as.length; ++j) {
        var a = as[j];
        a.dataThumbnail = this.thumbnails[_i3];
      }
    }
    this.container.find('a').on('click', this.binds.navigate);
    this.built = true;
  };

  return Thumbnails;
}();

exports.default = Thumbnails;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

var _EventConverter2 = __webpack_require__(7);

var _EventConverter3 = _interopRequireDefault(_EventConverter2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TouchConverter = function (_EventConverter) {
  _inherits(TouchConverter, _EventConverter);

  function TouchConverter(wnd, doc, element) {
    _classCallCheck(this, TouchConverter);

    var _this = _possibleConstructorReturn(this, _EventConverter.call(this, wnd, doc));

    _this.element = element;
    _this.binds = {
      convert: _this.convert.bind(_this)
    };
    (0, _libs.$)(_this.element).on('touchstart touchmove', _this.binds.convert);
    (0, _libs.$)(_this.doc).on('touchend', _this.binds.convert);
    return _this;
  }

  TouchConverter.prototype.dispose = function dispose() {
    (0, _libs.$)(this.element).off('touchstart touchmove', this.binds.convert);
    (0, _libs.$)(this.doc).off('touchend', this.binds.convert);
  };

  return TouchConverter;
}(_EventConverter3.default);

exports.default = TouchConverter;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserMessageController = function () {
  function UserMessageController(view) {
    _classCallCheck(this, UserMessageController);

    this.view = view;
    this.showMessage = false;
    this.message = '';
    this.updateView();
  }

  UserMessageController.prototype.dispose = function dispose() {
    this.updateView();
    delete this.view;
  };

  UserMessageController.prototype.setError = function setError(text) {
    this.showMessage = true;
    this.message = ['<div class="text error">', text, '</div>'].join('');
    this.updateView();
  };

  UserMessageController.prototype.updateView = function updateView() {
    if (this.view) {
      this.view.setState('widUserMessage', {
        enable: true,
        visible: this.showMessage,
        active: false
      });

      this.view.setState('txtUserMessage', {
        value: this.message,
        visible: true
      });
    }
  };

  return UserMessageController;
}();

exports.default = UserMessageController;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var View = function () {
  View.classProperty = function classProperty(ctrl, className, value) {
    if (value) {
      ctrl.addClass(className);
    } else {
      ctrl.removeClass(className);
    }
  };

  View.attributeProperty = function attributeProperty(ctrl, attributeName, value) {
    if (value) {
      ctrl.attr(attributeName, value);
    } else {
      ctrl.removeAttr(attributeName);
    }
  };

  View.callHandlers = function callHandlers(handlers, id, e, data) {
    for (var _iterator = handlers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var handler = _ref;

      if (handler[id]) {
        handler[id](e, data);
      } else if (handler.handleDefault) {
        handler.handleDefault(id, e, data);
      }
    }
  };

  View.handleEvent = function handleEvent(id, getHandlers, e, data) {
    View.callHandlers(getHandlers(id), id, e, data);
  };

  View.handleLinkEvent = function handleLinkEvent(e) {
    e.preventDefault();
    if (!this.ctrl.hasClass('disabled')) {
      View.handleEvent(this.id, this.getHandlers, e);
    }
  };

  View.handleInputEvent = function handleInputEvent(e) {
    View.handleEvent(this.id, this.getHandlers, e, e.target.value);
  };

  View.handleFormEvent = function handleFormEvent(e) {
    e.preventDefault();
    View.handleEvent(this.id, this.getHandlers, e);
  };

  // virtual functions {


  View.prototype.getLinks = function getLinks() {
    return null;
  };

  View.prototype.getWidgets = function getWidgets() {
    return null;
  };

  View.prototype.getInputs = function getInputs() {
    return null;
  };

  View.prototype.getTexts = function getTexts() {
    return null;
  };

  View.prototype.getTemplate = function getTemplate() {
    return {};
  };

  View.prototype.getHandlers = function getHandlers(id) {
    return this.handlers;
  };
  // }

  View.prototype.callLater = function callLater(handlers, id, e, data, ms) {
    var _this = this;

    this.pendings[id] = {
      timestamp: new Date().getTime()
    };
    setTimeout(function () {
      var timestamp = new Date().getTime(),
          pending = _this.pendings[id];
      if (pending && timestamp - pending.timestamp >= ms) {
        View.callHandlers(handlers, id, e, data);
        delete _this.pendings[id];
      }
    }, ms);
  };

  // loadFiles(urls, ready, failure) {
  //   let done = Promise.resolve();
  //   for(let url of urls) {
  //     done = done.then(()=> {
  //       return new Promise((resolve, reject)=> {
  //         $.get(url, (res)=> {
  //           ready(res, url);
  //           resolve();
  //         }).fail((res)=> {
  //           if(failure && failure(res, url)) {
  //             resolve();
  //           }
  //           else {
  //             reject(res);
  //           }
  //         });
  //       });
  //     });
  //   }
  //   return done;
  // }

  View.prototype.loadFiles = function loadFiles(urls, files) {
    var tasks = [];

    var _loop = function _loop() {
      if (_isArray2) {
        if (_i2 >= _iterator2.length) return 'break';
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) return 'break';
        _ref2 = _i2.value;
      }

      var name = _ref2;

      files[name] = [];

      var _loop2 = function _loop2() {
        if (_isArray3) {
          if (_i3 >= _iterator3.length) return 'break';
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) return 'break';
          _ref3 = _i3.value;
        }

        var url = _ref3;

        tasks.push(new Promise(function (resolve, reject) {
          _libs.$.get(url, function (data) {
            files[name].push({ url: url, data: data });
            resolve();
          }).fail(function (res) {
            reject(res);
          });
        }));
      };

      for (var _iterator3 = urls[name], _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        var _ret2 = _loop2();

        if (_ret2 === 'break') break;
      }
    };

    for (var _iterator2 = Object.keys(urls), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref2;

      var _ret = _loop();

      if (_ret === 'break') break;
    }
    return Promise.all(tasks);
  };

  View.prototype.urlResolver = function urlResolver(baseUrl, url) {
    url = url.replace(/\\/g, '/');
    if (url.charAt(0) !== '/' && url.toLowerCase().search('data:') !== 0) {
      baseUrl = baseUrl.replace(/\\/g, '/');
      var p = baseUrl.lastIndexOf('/');
      url = (~p ? baseUrl.substr(0, p + 1) : '') + url;

      var parts = url.split('/');
      url = [];
      for (var _iterator4 = parts, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
        var _ref4;

        if (_isArray4) {
          if (_i4 >= _iterator4.length) break;
          _ref4 = _iterator4[_i4++];
        } else {
          _i4 = _iterator4.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var part = _ref4;

        if (part === '.') {} else if (part === '..') {
          if (url.length && !(url.length === 1 && url[0] === '')) {
            url.pop();
          }
        } else {
          url.push(part);
        }
      }
      url = url.join('/');
    }

    return url;
  };

  View.prototype.objToAttrsStr = function objToAttrsStr(o) {
    var res = [];
    for (var _iterator5 = Object.keys(o), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray5) {
        if (_i5 >= _iterator5.length) break;
        _ref5 = _iterator5[_i5++];
      } else {
        _i5 = _iterator5.next();
        if (_i5.done) break;
        _ref5 = _i5.value;
      }

      var _name = _ref5;

      res.push([_name, '="', o[_name], '"'].join(''));
    }
    return res.join(' ');
  };

  View.prototype.checkIframeSize = function checkIframeSize() {
    if (this.frame) {
      if (Math.abs(this.frame.width - this.parentContainer.width()) > 1 || Math.abs(this.frame.height - this.parentContainer.height()) > 1) {
        this.onResize();
      }
      setTimeout(this.checkIframeSize.bind(this), 250);
    }
  };

  View.prototype.onResize = function onResize() {
    this.frame.width = this.parentContainer.width();
    this.frame.height = this.parentContainer.height();
  };

  View.prototype.translate = function translate(html) {
    return html.replace(/<\$tr>(.*)<\/\$tr>/gi, function (s0, s1) {
      return (0, _libs.tr)(s1);
    });
  };

  View.prototype.fireLinksOnLoadEvent = function fireLinksOnLoadEvent() {
    var _this2 = this;

    if (this.templateObject && this.templateObject.linkLoaded) {
      var loaded = true;

      var _loop3 = function _loop3() {
        if (_isArray6) {
          if (_i6 >= _iterator6.length) return 'break';
          _ref6 = _iterator6[_i6++];
        } else {
          _i6 = _iterator6.next();
          if (_i6.done) return 'break';
          _ref6 = _i6.value;
        }

        var jLink = _ref6;

        var link = jLink[0];
        var img = new Image();
        img.onerror = function () {
          return _this2.templateObject.linkLoaded(link);
        };
        img.src = link.href;
      };

      for (var _iterator6 = this.jLinks, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
        var _ref6;

        var _ret3 = _loop3();

        if (_ret3 === 'break') break;
      }
    }
  };

  function View(parentContainer, onLoad) {
    var _this3 = this;

    var template = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, View);

    this.pendings = {};
    this.binds = {
      onResize: this.onResize.bind(this)
    };
    this.parentContainer = (0, _libs.$)(parentContainer);
    this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && ~navigator.userAgent.search('Version/14.1.1');
    var initUrl = this.isSafari ? (typeof template === 'function' ? template() : template).init : undefined;
    this.parentContainer.html('<iframe style="border: 0;' + (this.isIOS ? '' : ' width: 100%; height: 100%') + '" ' + (initUrl ? ' src="' + initUrl + '"' : '') + ' scrolling="no"></iframe>');

    this.frame = this.parentContainer.find('iframe')[0];
    var build = function build() {
      if (_this3.isIOS) {
        (0, _libs.$)(_this3.parentContainer[0].ownerDocument.defaultView).on('resize', _this3.binds.onResize);
        _this3.onResize();
        setTimeout(_this3.checkIframeSize.bind(_this3), 250);
      }

      _this3.container = (0, _libs.$)(_this3.frame.contentDocument.body);
      _this3.container.css('margin', '0');
      _this3.head = (0, _libs.$)(_this3.frame.contentDocument.head);
      _this3.onLoad = onLoad;
      _this3.handlers = [];
      _this3.styleData = {};

      var script = template.html ? template.script : _this3.getTemplate().script;
      var urls = void 0,
          files = void 0,
          links = void 0,
          templateName = void 0;
      if (typeof template === 'function') {
        urls = {};
        files = template();
        links = [];
        templateName = files.name;
      } else {
        links = template.links || _this3.getTemplate().links;
        urls = {
          styles: template.styles || _this3.getTemplate().styles,
          html: [template.html || _this3.getTemplate().html],
          script: script ? [script] : []
        };
        templateName = template.name;
        files = {};
      }
      if (templateName) {
        _this3.container.addClass(templateName);
      }
      _this3.loadFiles(urls, files).then(function () {
        var _loop4 = function _loop4() {
          if (_isArray7) {
            if (_i7 >= _iterator7.length) return 'break';
            _ref7 = _iterator7[_i7++];
          } else {
            _i7 = _iterator7.next();
            if (_i7.done) return 'break';
            _ref7 = _i7.value;
          }

          var style = _ref7;

          var textCss = style.data,
              url = style.url;
          textCss = textCss.replace(/url\(['"](.*?)["']\)/g, function (r, r1) {
            return ['url(\'', _this3.urlResolver(url, r1), '\')'].join('');
          });
          (0, _libs.$)('<style type="text/css">' + textCss + '</style>').appendTo(_this3.head);
          var match = textCss.match(/\/\*json-data:(([\n\r]|.)*)\*\//);
          if (match) {
            try {
              _this3.styleData = _extends({}, _this3.styleData, JSON.parse(match[1]));
            } catch (e) {
              console.error(e);
            }
          }
        };

        for (var _iterator7 = files.styles, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
          var _ref7;

          var _ret4 = _loop4();

          if (_ret4 === 'break') break;
        }

        _this3.container.html(_this3.translate(files.html[0].data));

        _this3.jLinks = [];
        for (var _iterator8 = links, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
          var _ref8;

          if (_isArray8) {
            if (_i8 >= _iterator8.length) break;
            _ref8 = _iterator8[_i8++];
          } else {
            _i8 = _iterator8.next();
            if (_i8.done) break;
            _ref8 = _i8.value;
          }

          var _link = _ref8;

          _this3.jLinks.push((0, _libs.$)(['<link ', _this3.objToAttrsStr(_link), '>'].join('')).appendTo(_this3.head));
        }

        if (files.script[0]) {
          var init = eval(files.script[0].data);
          _this3.templateObject = init(_this3.container);
        } else {
          _this3.templateObject = {};
        }

        _this3.linkControls = {};
        for (var _iterator9 = _this3.getLinks(), _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
          var _ref9;

          if (_isArray9) {
            if (_i9 >= _iterator9.length) break;
            _ref9 = _iterator9[_i9++];
          } else {
            _i9 = _iterator9.next();
            if (_i9.done) break;
            _ref9 = _i9.value;
          }

          var id = _ref9;

          _this3.linkControls[id] = _this3.container.find('.' + id);
          _this3.binds[id] = View.handleLinkEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: id, ctrl: _this3.linkControls[id] });
          _this3.linkControls[id].on('click', _this3.binds[id]);
        }

        _this3.widgetControls = {};
        for (var _iterator10 = _this3.getWidgets(), _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _iterator10[Symbol.iterator]();;) {
          var _ref10;

          if (_isArray10) {
            if (_i10 >= _iterator10.length) break;
            _ref10 = _iterator10[_i10++];
          } else {
            _i10 = _iterator10.next();
            if (_i10.done) break;
            _ref10 = _i10.value;
          }

          var _id = _ref10;

          _this3.widgetControls[_id] = _this3.container.find('.' + _id);
        }

        _this3.inputControls = {};
        for (var _iterator11 = _this3.getInputs(), _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _iterator11[Symbol.iterator]();;) {
          var _ref11;

          if (_isArray11) {
            if (_i11 >= _iterator11.length) break;
            _ref11 = _iterator11[_i11++];
          } else {
            _i11 = _iterator11.next();
            if (_i11.done) break;
            _ref11 = _i11.value;
          }

          var _id2 = _ref11;

          _this3.inputControls[_id2] = _this3.container.find('.' + _id2);
          _this3.binds[_id2] = View.handleInputEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: _id2, ctrl: _this3.inputControls[_id2] });
          _this3.inputControls[_id2].on('keyup', _this3.binds[_id2]);
        }

        _this3.formControls = {};
        for (var _iterator12 = _this3.getForms(), _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _iterator12[Symbol.iterator]();;) {
          var _ref12;

          if (_isArray12) {
            if (_i12 >= _iterator12.length) break;
            _ref12 = _iterator12[_i12++];
          } else {
            _i12 = _iterator12.next();
            if (_i12.done) break;
            _ref12 = _i12.value;
          }

          var _id3 = _ref12;

          _this3.formControls[_id3] = _this3.container.find('.' + _id3);
          _this3.binds[_id3] = View.handleFormEvent.bind({ getHandlers: _this3.getHandlers.bind(_this3), id: _id3, ctrl: _this3.formControls[_id3] });
          _this3.formControls[_id3].on('submit', _this3.binds[_id3]);
        }

        _this3.textControls = {};
        for (var _iterator13 = _this3.getTexts(), _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _iterator13[Symbol.iterator]();;) {
          var _ref13;

          if (_isArray13) {
            if (_i13 >= _iterator13.length) break;
            _ref13 = _iterator13[_i13++];
          } else {
            _i13 = _iterator13.next();
            if (_i13.done) break;
            _ref13 = _i13.value;
          }

          var _id4 = _ref13;

          _this3.textControls[_id4] = _this3.container.find('.' + _id4);
        }

        _this3.stateSetters = [{
          map: _this3.linkControls,
          setter: _this3.setLinkControlState.bind(_this3)
        }, {
          map: _this3.widgetControls,
          setter: _this3.setWidgetControlState.bind(_this3)
        }, {
          map: _this3.inputControls,
          setter: _this3.setInputControlState.bind(_this3)
        }, {
          map: _this3.textControls,
          setter: _this3.setTextControlState.bind(_this3)
        }];

        _this3.initView();

        if (_this3.onLoad) {
          _this3.onLoad();
        }

        _this3.fireLinksOnLoadEvent();
      }).catch(function (res) {
        return console.error(res);
      });
    };

    if (initUrl) {
      (0, _libs.$)(this.frame.contentWindow).on('load', build);
    } else {
      if (this.frame.contentWindow.stop) {
        this.frame.contentWindow.stop();
      }
      build();
    }
  }

  View.prototype.dispose = function dispose() {
    delete this.textControls;
    for (var _iterator14 = this.getLinks(), _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _iterator14[Symbol.iterator]();;) {
      var _ref14;

      if (_isArray14) {
        if (_i14 >= _iterator14.length) break;
        _ref14 = _iterator14[_i14++];
      } else {
        _i14 = _iterator14.next();
        if (_i14.done) break;
        _ref14 = _i14.value;
      }

      var id = _ref14;

      this.linkControls[id].off('click', this.binds[id]);
    }
    delete this.linkControls;
    delete this.widgetControls;
    for (var _iterator15 = this.getInputs(), _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _iterator15[Symbol.iterator]();;) {
      var _ref15;

      if (_isArray15) {
        if (_i15 >= _iterator15.length) break;
        _ref15 = _iterator15[_i15++];
      } else {
        _i15 = _iterator15.next();
        if (_i15.done) break;
        _ref15 = _i15.value;
      }

      var _id5 = _ref15;

      this.inputControls[_id5].off('keyup', this.binds[_id5]);
    }
    delete this.inputControls;
    for (var _iterator16 = this.getForms(), _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _iterator16[Symbol.iterator]();;) {
      var _ref16;

      if (_isArray16) {
        if (_i16 >= _iterator16.length) break;
        _ref16 = _iterator16[_i16++];
      } else {
        _i16 = _iterator16.next();
        if (_i16.done) break;
        _ref16 = _i16.value;
      }

      var _id6 = _ref16;

      this.formControls[_id6].off('submit', this.binds[_id6]);
    }
    delete this.formControls;

    !this.templateObject.dispose || this.templateObject.dispose();
    delete this.templateObject;

    if (this.isIOS) {
      (0, _libs.$)(this.parentContainer[0].ownerDocument.defaultView).off('resize', this.binds.onResize);
    }
    this.parentContainer.html('');
    delete this.frame;
  };

  View.prototype.getStyleData = function getStyleData() {
    return this.styleData;
  };

  View.prototype.getContainer = function getContainer() {
    return this.container[0];
  };

  View.prototype.getParentContainer = function getParentContainer() {
    return this.parentContainer[0];
  };

  View.prototype.addHandler = function addHandler(handler) {
    this.handlers.push(handler);
  };

  View.prototype.initView = function initView() {};

  View.setControlState = function setControlState(ctrl, defaults, state, stateHandlers) {
    if (ctrl && ctrl[0]) {
      var st = _extends({}, defaults, state);
      for (var _name2 in st) {
        if (st.hasOwnProperty(_name2) && stateHandlers[_name2]) {
          stateHandlers[_name2](ctrl, st[_name2]);
        }
      }
    }
  };

  View.prototype.setLinkControlState = function setLinkControlState(id, state) {
    View.setControlState(this.linkControls[id], {
      visible: true,
      active: false,
      enable: true
    }, state, View.linkStateHandlers);
  };

  View.prototype.setWidgetControlState = function setWidgetControlState(id, state) {
    View.setControlState(this.widgetControls[id], {
      visible: true,
      active: false,
      enable: true
    }, state, View.widgetStateHandlers);
  };

  View.prototype.setInputControlState = function setInputControlState(id, state) {
    View.setControlState(this.inputControls[id], {
      visible: true,
      enable: true,
      value: ''
    }, state, View.inputStateHandlers);
  };

  View.prototype.setTextControlState = function setTextControlState(id, state) {
    View.setControlState(this.textControls[id], {
      visible: true,
      value: ''
    }, state, View.textStateHandlers);
  };

  View.prototype.onItemStateChanged = function onItemStateChanged() {};

  View.prototype.setState = function setState(id, state) {
    for (var _iterator17 = this.stateSetters, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _iterator17[Symbol.iterator]();;) {
      var _ref17;

      if (_isArray17) {
        if (_i17 >= _iterator17.length) break;
        _ref17 = _iterator17[_i17++];
      } else {
        _i17 = _iterator17.next();
        if (_i17.done) break;
        _ref17 = _i17.value;
      }

      var item = _ref17;

      if (item.map[id]) {
        item.setter(id, state);
        this.onItemStateChanged(id, state);
        break;
      }
    }
  };

  return View;
}();

View.linkStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  active: function active(ctrl, value) {
    return View.classProperty(ctrl, 'active', value);
  },
  enable: function enable(ctrl, value) {
    return View.classProperty(ctrl, 'disabled', !value);
  }
};
View.widgetStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  active: function active(ctrl, value) {
    return View.classProperty(ctrl, 'active', value);
  },
  enable: function enable(ctrl, value) {
    return View.classProperty(ctrl, 'disabled', !value);
  }
};
View.inputStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  value: function value(ctrl, _value) {
    return ctrl[0].value = _value;
  },
  enable: function enable(ctrl, value) {
    return View.attributeProperty(ctrl, 'disabled', !value);
  }
};
View.textStateHandlers = {
  visible: function visible(ctrl, value) {
    return View.classProperty(ctrl, 'hidden', !value);
  },
  value: function value(ctrl, _value2) {
    return ctrl.html(_value2);
  }
};
exports.default = View;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _libs = __webpack_require__(0);

var _Utils = __webpack_require__(3);

var _Utils2 = _interopRequireDefault(_Utils);

var _Orbit = __webpack_require__(59);

var _Orbit2 = _interopRequireDefault(_Orbit);

var _ThreeMouseEventConverter = __webpack_require__(64);

var _ThreeMouseEventConverter2 = _interopRequireDefault(_ThreeMouseEventConverter);

var _ThreeTouchEventConverter = __webpack_require__(65);

var _ThreeTouchEventConverter2 = _interopRequireDefault(_ThreeTouchEventConverter);

var _Drag = __webpack_require__(51);

var _Drag2 = _interopRequireDefault(_Drag);

var _CSS3DRenderer = __webpack_require__(12);

var _CSS3DRenderer2 = _interopRequireDefault(_CSS3DRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VisualWorld = function (_THREE$EventDispatche) {
  _inherits(VisualWorld, _THREE$EventDispatche);

  function VisualWorld(wnd, doc, container) {
    var useHelpers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    _classCallCheck(this, VisualWorld);

    var _this = _possibleConstructorReturn(this, _THREE$EventDispatche.call(this));

    _this.checkUpdateFlag = true;
    _this.wnd = wnd;
    _this.doc = doc;
    _this.jContainer = container;
    _this.renderCallbacks = [];
    _this.diag = _this.getDiag();

    _this.clock = new _libs.THREE.Clock();

    _this.raycaster = new _libs.THREE.Raycaster();

    _this.scene = new _libs.THREE.Scene();
    _this.cssScene = new _libs.THREE.Scene();

    _this.camera = new _libs.THREE.PerspectiveCamera(30, _this.width() / _this.height(), 0.2, 2000);
    var scale = 1;

    _this.camera.position.x = 0;
    _this.camera.position.y = 5.5 * scale;
    _this.camera.position.z = 0;

    _this.renderer = new _libs.THREE.WebGLRenderer({ alpha: true, precision: VisualWorld.getPrecision(), antialias: true });
    _this.renderer.setClearColor(0x000000, 0);
    _this.renderer.setPixelRatio(_this.wnd.devicePixelRatio);
    _this.renderer.setSize(_this.width(), _this.height());

    _this.jContainer.append(_this.renderer.domElement);

    _this.cssRenderer = new _CSS3DRenderer2.default();
    _this.cssRenderer.setSize(_this.width(), _this.height());
    (0, _libs.$)(_this.cssRenderer.domElement).css({
      position: 'absolute',
      top: 0,
      margin: 0,
      padding: 0
    });
    _this.jContainer.append(_this.cssRenderer.domElement);

    _this.element = _this.cssRenderer.domElement;

    _this.textureLoader = new _libs.THREE.TextureLoader();

    _this.ambientLight = new _libs.THREE.AmbientLight(0xD0D0D0); //0xC0C0C0
    _this.scene.add(_this.ambientLight);

    _this.light = new _libs.THREE.DirectionalLight(0x404040, 1);
    _this.light.position.set(0, 6 * scale, 0);
    _this.light.castShadow = false;
    // const d = 20*scale;
    // this.light.shadow.camera.left = -d;
    // this.light.shadow.camera.right = d;
    // this.light.shadow.camera.top = d;
    // this.light.shadow.camera.bottom = -d;
    // this.light.shadow.camera.near = 1*scale;
    // this.light.shadow.camera.far = 25*scale;
    // this.light.shadow.mapSize.x = 1024;
    // this.light.shadow.mapSize.y = 1024;
    _this.scene.add(_this.light);

    _this.controls = new _Orbit2.default(_this.camera, _this.element);
    _this.controls.target.y = 0.5;

    var cssScene = (0, _libs.$)(_this.cssRenderer.domElement).find('div'),
        tmpVector = new _libs.THREE.Vector3();
    _this.controls.addEventListener('change', function () {
      _this.camera.getWorldDirection(tmpVector);
      cssScene.css('display', tmpVector.y - _this.camera.position.y > 0 ? 'none' : 'block');
      _this.updateThree();
    });

    if (useHelpers) {
      _this.scene.add(new _libs.THREE.AxisHelper(5));
    }

    _this.binds = {
      onWindowResize: _this.onWindowResize.bind(_this),
      animate: _this.animate.bind(_this)
    };

    (0, _libs.$)(_this.wnd).on('resize', _this.binds.onWindowResize);

    _this.mouseEvents = new _ThreeMouseEventConverter2.default(_this.wnd, _this.doc, _this);
    _this.touchEvents = new _ThreeTouchEventConverter2.default(_this.wnd, _this.doc, _this);
    var filterData = { type: 'mousemove' };
    _this.mouseEvents.filter = function (element, e) {
      var types = ['mouseenter', 'mouseover', 'mouseleave', 'mouseout'],
          contains = function contains(p, c) {
        return p === c || _libs.$.contains(p, c);
      };
      if (e.type === 'mousemove') {
        filterData.pageX = e.pageX;
        filterData.pageY = e.pageY;
      }
      return e.relatedTarget && ~types.indexOf(e.type) && contains(element, e.target) && contains(element, e.relatedTarget) ? _extends({}, e, filterData) : e;
    };
    _this.drag = new _Drag2.default(_this.wnd, _this.doc, _this);

    _this.onWindowResize();
    _this.animate();
    return _this;
  }

  VisualWorld.prototype.getDiag = function getDiag() {
    var test = (0, _libs.$)('<div style="height: 1in; width: 1in; display: none;"></div>').appendTo(this.jContainer),
        r = new _libs.THREE.Vector2(screen.width / test.width(), screen.height / test.height());
    test.remove();
    return r.length();
  };

  VisualWorld.prototype.updateThree = function updateThree() {
    this.light.userData.needsUpdate = true;
  };

  VisualWorld.prototype.dispose = function dispose() {
    delete this.binds.animate;
    (0, _libs.$)(this.wnd).off('resize', this.binds.onWindowResize);
    this.mouseEvents.dispose();
    this.touchEvents.dispose();
    this.drag.dispose();
    this.controls.dispose();
  };

  VisualWorld.prototype.width = function width() {
    return this.jContainer.width();
  };

  VisualWorld.prototype.height = function height() {
    return this.jContainer.height();
  };

  VisualWorld.prototype.setExtraLighting = function setExtraLighting(v) {
    this.light.intensity = v;
  };

  VisualWorld.prototype.isMobile = function isMobile() {
    return this.diag < _Utils2.default.MOBILE_DIAG;
  };

  VisualWorld.prototype.getOrbit = function getOrbit() {
    return this.controls;
  };

  VisualWorld.prototype.setControlsState = function setControlsState(state) {
    this.controls.enabled = state;
  };

  VisualWorld.prototype.getControlsState = function getControlsState() {
    return this.controls.enabled;
  };

  VisualWorld.prototype.onWindowResize = function onWindowResize() {
    var _this2 = this;

    if (this.width() > 1 && this.height() > 1) {
      var updateCamera = function updateCamera(camera) {
        camera.aspect = _this2.width() / _this2.height();
        camera.updateProjectionMatrix();
      },
          updateRenderer = function updateRenderer(renderer) {
        renderer.setSize(_this2.width(), _this2.height());
      };

      updateCamera(this.camera);
      updateRenderer(this.renderer);
      updateRenderer(this.cssRenderer);
      this.updateThree();

      this.dispatchEvent({ type: 'resize' });
    } else {
      setTimeout(function () {
        _this2.onWindowResize();
      }, 250);
    }
  };

  VisualWorld.prototype.addObject = function addObject(object) {
    this.scene.add(object);
  };

  VisualWorld.prototype.addCssObject = function addCssObject(object) {
    this.cssScene.add(object);
  };

  VisualWorld.prototype.removeCssObject = function removeCssObject(object) {
    this.cssScene.remove(object);
  };

  VisualWorld.prototype.removeObject = function removeObject(object) {
    this.scene.remove(object);
  };

  VisualWorld.prototype.animate = function animate() {
    if (this.binds.animate) {
      requestAnimationFrame(this.binds.animate);
    }
    this.render();
  };

  VisualWorld.prototype.addRenderCallback = function addRenderCallback(clb) {
    this.renderCallbacks.push(clb);
  };

  VisualWorld.prototype.removeRenderCallback = function removeRenderCallback(clb) {
    var i = this.renderCallbacks.indexOf(clb);
    if (~i) {
      this.renderCallbacks.splice(i, 1);
    }
  };

  VisualWorld.prototype.render = function render() {
    var deltaTime = Math.min(this.clock.getDelta(), 0.017 * 2);
    this.controls.update(deltaTime);
    for (var _iterator = this.renderCallbacks, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var clb = _ref;

      clb(deltaTime);
    }
    this.cssRenderer.render(this.cssScene, this.camera);
    var render = true;
    if (this.checkUpdateFlag) {
      render = false;
      for (var _iterator2 = this.scene.children, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var o = _ref2;

        render = render || o.userData.needsUpdate;
        o.userData.needsUpdate = false;
      }
    }
    if (render) {
      this.renderer.render(this.scene, this.camera);
    }
  };

  VisualWorld.getPrecision = function getPrecision() {
    var scene = new _libs.THREE.Scene();
    scene.add(new _libs.THREE.AmbientLight(0xffffff));

    var camera = new _libs.THREE.PerspectiveCamera(30, 1, 1, 100);
    camera.position.set(0, 0, 1);
    camera.lookAt(0, 0, 0);

    var renderer = new _libs.THREE.WebGLRenderer();
    renderer.setClearColor(0xffffff);
    renderer.setSize(1, 1);

    var c = document.createElement('canvas'),
        ctx = c.getContext('2d');
    c.width = c.height = 1;
    ctx.fillStyle = '#ff0000';
    ctx.fillRect(0, 0, c.width, c.height);
    var t = new _libs.THREE.Texture(c);
    t.needsUpdate = true;

    scene.add(new _libs.THREE.Mesh(new _libs.THREE.PlaneGeometry(1, 1, 1, 1), new _libs.THREE.MeshPhongMaterial({ map: t })));

    renderer.render(scene, camera);

    function getPixel(c, x, y) {
      var ps = new Uint8Array(4);
      c.readPixels(x, y, 1, 1, c.RGBA, c.UNSIGNED_BYTE, ps);
      return ps;
    }
    var p = getPixel(renderer.domElement.getContext('webgl') || renderer.domElement.getContext('experimental-webgl'), 0, 0);
    return p[0] === 255 && p[1] === 0 && p[2] === 0 ? 'highp' : 'mediump';
  };

  return VisualWorld;
}(_libs.THREE.EventDispatcher);

exports.default = VisualWorld;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var YouTubeApi = function () {
  function YouTubeApi() {
    _classCallCheck(this, YouTubeApi);
  }

  YouTubeApi.init = function init() {
    if (!YouTubeApi.task) {
      YouTubeApi.task = new Promise(function (resolve) {
        if (!window['YT']) {
          window['YT'] = {
            loading: 0,
            loaded: 0
          };
        }
        if (!window['YTConfig']) {
          window['YTConfig'] = {
            'host': 'http://www.youtube.com'
          };
        }
        if (!YT.loading) {
          YT.loading = 1;
          (function () {
            var l = [];
            YT.ready = function (f) {
              if (YT.loaded) {
                f();
              } else {
                l.push(f);
              }
            };
            window.onYTReady = function () {
              YT.loaded = 1;
              for (var i = 0; i < l.length; i++) {
                try {
                  l[i]();
                } catch (e) {}
              }
              resolve();
            };
            YT.setConfig = function (c) {
              for (var k in c) {
                if (c.hasOwnProperty(k)) {
                  YTConfig[k] = c[k];
                }
              }
            };
            var a = document.createElement('script');
            a.type = 'text/javascript';
            a.id = 'www-widgetapi-script';
            a.src = 'https://s.ytimg.com/yts/jsbin/www-widgetapi-vfldn1jRM/www-widgetapi.js';
            a.async = false;
            var c = document.currentScript;
            if (c) {
              var n = c.nonce || c.getAttribute('nonce');
              if (n) {
                a.setAttribute('nonce', n);
              }
            }
            var b = document.getElementsByTagName('script')[0];
            b.parentNode.insertBefore(a, b);
          })();
        }
      });
    }
    return YouTubeApi.task;
  };

  return YouTubeApi;
}();

exports.default = YouTubeApi;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Target2 = __webpack_require__(23);

var _Target3 = _interopRequireDefault(_Target2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CircleTarget = function (_Target) {
  _inherits(CircleTarget, _Target);

  function CircleTarget(x, y, r) {
    _classCallCheck(this, CircleTarget);

    var _this = _possibleConstructorReturn(this, _Target.call(this));

    _this.p = {
      x: x,
      y: y,
      r: r
    };
    return _this;
  }

  CircleTarget.prototype.testIntersection = function testIntersection(e, data) {
    var res = void 0;
    var x = data.x,
        y = data.y,
        p = this.p;

    if ((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y) <= p.r * p.r) {
      res = {
        target: this,
        data: data
      };
    }
    return res;
  };

  return CircleTarget;
}(_Target3.default);

exports.default = CircleTarget;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _Target2 = __webpack_require__(23);

var _Target3 = _interopRequireDefault(_Target2);

var _BaseMathUtils = __webpack_require__(2);

var _BaseMathUtils2 = _interopRequireDefault(_BaseMathUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PolyTarget = function (_Target) {
  _inherits(PolyTarget, _Target);

  function PolyTarget(poly) {
    _classCallCheck(this, PolyTarget);

    var _this = _possibleConstructorReturn(this, _Target.call(this));

    _this.poly = poly;
    return _this;
  }

  PolyTarget.prototype.testIntersection = function testIntersection(e, p) {
    return _BaseMathUtils2.default.isInsidePoly(this.poly, p) ? {
      target: this,
      data: p
    } : undefined;
  };

  return PolyTarget;
}(_Target3.default);

exports.default = PolyTarget;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

/*** IMPORTS FROM imports-loader ***/
var define = false;

/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( typeof define === 'function' && define.amd ) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (true) {
        // Node/CommonJS style for Browserify
        module.exports = factory;
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));



/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

// stats.js - http://github.com/mrdoob/stats.js
(function(f,e){ true?module.exports=e():"function"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?"block":"none";l=a}var l=0,c=document.createElement("div");c.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";c.addEventListener("click",function(a){a.preventDefault();
u(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel("FPS","#0ff","#002")),h=e(new f.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var t=e(new f.Panel("MB","#f08","#201"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/
1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement("canvas");q.width=r;q.height=h;q.style.cssText="width:80px;height:48px";var b=q.getContext("2d");b.font="bold "+9*a+"px Helvetica,Arial,sans-serif";b.textBaseline="top";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);
b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+" "+e+" ("+g(c)+"-"+g(k)+")",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(25);
module.exports = __webpack_require__(24);


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZjc4MzJlOTMwZTk5NTI1MDZjYzYiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2xpYnMuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbGlicy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9CYXNlTWF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1V0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0dyYXBoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTWF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0ltYWdlQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbWFnZUZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rUHJvcHNCdWlsZGVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wcm9wcy9ib29rLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0NTUzNEUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9DdXN0b21FdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9GaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlblguanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9XaWRnZXRDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvVGFyZ2V0LmpzIiwid2VicGFjazovLy8uL2luZGV4LmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0F1dG9OYXZpZ2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9CaW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQm9va0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Cb29rUHJpbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0Jvb2tWaWV3LmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQ2xiQm9va1Byb3BzQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL0NvdmVyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvQ3NzTGF5ZXJzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1BhZ2VNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvUGRmQm9va1Byb3BzQnVpbGRlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1BkZkxpbmtzSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NlYXJjaEVuZ2luZS5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NoYXJlQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9jbGFzc2VzL1NoZWV0Q3NzTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9TaGVldFBoeXNpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vanMvY2xhc3Nlcy9Tb3VuZHNFbnZpcm9tZW50LmpzIiwid2VicGFjazovLy8uL2pzL2NsYXNzZXMvVG9jQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9qcy9tb2RlbHMvc2hlZXRCbG9jay5qcyIsIndlYnBhY2s6Ly8vLi9qcy9wcm9wcy9ib29rQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9CbGFua0ltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0Jvb2ttYXJrcy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9EZXRlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Eb2NNb3VzZVNpbXVsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Eb20ySW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRHJhZy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudHNUb0FjdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlbi5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9JbnRlcmFjdGl2ZUltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL0xvYWRpbmdBbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTG9hZGluZ0NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9PYmplY3QzRFdhdGNoZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvT3JiaXQuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvUGRmSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvU2VhcmNoLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1N0YXRpY0ltYWdlLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RleHR1cmVBbmltYXRvci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9UaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL1RodW1ibmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVG91Y2hFdmVudENvbnZlcnRlci5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Vc2VyTWVzc2FnZUNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vLi4vY29tbW9uL2NsYXNzZXMvVmlldy5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9WaXN1YWxXb3JsZC5qcyIsIndlYnBhY2s6Ly8vLi8uLi9jb21tb24vY2xhc3Nlcy9Zb3VUdWJlQXBpLmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvQ2lyY2xlVGFyZ2V0LmpzIiwid2VicGFjazovLy8uLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvUG9seVRhcmdldC5qcyIsIndlYnBhY2s6Ly8vLi4vfi9qcXVlcnktbW91c2V3aGVlbC9qcXVlcnkubW91c2V3aGVlbC5qcyIsIndlYnBhY2s6Ly8vLi4vfi9zdGF0cy5qcy9idWlsZC9zdGF0cy5taW4uanMiXSwibmFtZXMiOlsiXyQiLCJHTE9CQUxfTElCUyIsIndpbmRvdyIsImpRdWVyeSIsInJlcXVpcmUiLCJfaHRtbDJjYW52YXMiLCJodG1sMmNhbnZhcyIsIl9USFJFRSIsIlRIUkVFIiwiX1JlYWN0IiwiUmVhY3QiLCJfUmVhY3RET00iLCJSZWFjdERPTSIsIl9QREZKUyIsInBkZmpzTGliIiwiX3RyIiwicyIsImliZXJlemFuc2t5IiwidHIiLCIkIiwiUERGSlMiLCJGQjNEX0xPQ0FMRSIsImRpY3Rpb25hcnkiLCJCYXNlTWF0aFV0aWxzIiwic3VtMSIsImthIiwiYSIsImtiIiwiYiIsInN1bTIiLCJzdW0zIiwic3VtNCIsInJrNCIsImR5IiwidCIsImR0IiwieSIsInN1bSIsImxlbmd0aCIsImsxIiwiazIiLCJrMyIsIms0IiwiZXh0cmFwb2xhdGVMaW5lYXIiLCJ4IiwieGkiLCJpbnRlcnBvbGF0ZUxpbmVhciIsInlpIiwicmV2ZXJzZSIsImNhbGNTY2FsZSIsInNyY1ciLCJzcmNIIiwiZHN0VyIsImRzdEgiLCJtdWxNIiwiciIsImkiLCJwdXNoIiwiaiIsImsiLCJ0cmFuc00iLCJtIiwibWF0IiwiZGF0YSIsImRpc3AiLCJNIiwicHJlZGljdDEiLCJudW0iLCJsIiwiRCIsImFtIiwiYm0iLCJ0YSIsImQiLCJwIiwidiIsIk1hdGgiLCJyb3VuZCIsImluZGV4T2YiLCJwcmVkaWN0Iiwic2ducyIsInNpZ24iLCJhYnMiLCJjdXIiLCJnZXRVbmlxdWUiLCJjZWlsIiwicmFuZG9tIiwic2V0U3BsaW5lUG9pbnRzIiwic3BsaW5lIiwicHMiLCJwb2ludHMiLCJjb25zb2xlIiwid2FybiIsInNldCIsInoiLCJtYXBsMkwiLCJscyIsImxlbiIsIm4iLCJmIiwiZEwiLCJMIiwiZGV0MiIsImMiLCJzb2x2ZTJMaW4iLCJhMSIsImIxIiwiYTIiLCJiMiIsInJlcyIsImVwcyIsImR4IiwiaXNJbnNpZGVQb2x5IiwiZG9uZSIsImN0IiwidjJkaXN0IiwibnAiLCJybiIsInAwIiwicDEiLCJpcCIsIm1pbiIsIm1heCIsInRuIiwiaXNJbnNpZGVDb252UG9seSIsInNnIiwidjJsZW4iLCJ2MiIsInNxcnQiLCJ2MjEiLCJ2MjIiLCJjb21wdXRlU3F1YXJlIiwiY29tcHV0ZUludGVycENvZWZzIiwidHJpIiwiY29lZnMiLCJVdGlscyIsIm5vcm1hbGl6ZVVybCIsInVybCIsInNwbGl0IiwicmVwbGFjZSIsImJhc2UiLCJsb2NhdGlvbiIsImhyZWYiLCJqb2luIiwiZXh0ZW5kcyIsImRlciIsIm5hbWUiLCJoYXNPd25Qcm9wZXJ0eSIsImRlZmF1bHRDbXAiLCJsb3dlckJvdW5kIiwiY21wIiwiaCIsIm1pZCIsImZsb29yIiwiTU9CSUxFX0RJQUciLCJHcmFwaFV0aWxzIiwiY3JlYXRlQ2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbnRlcnBvbGF0ZTAxIiwieTEiLCJ5MiIsImdldENvbG9yQnl0ZXMiLCJjb2xvciIsImludmVyc2VDb2xvciIsImJzIiwiaWJzIiwibmJzIiwiYnl0ZXMyQ29sb3IiLCJjb2xvcjJSZ2JhIiwiYnl0ZXMyUmdiYSIsIk1hdGhVdGlscyIsInNwbGl0U3BsaW5lIiwiTiIsIm8iLCJkbCIsImdldFBvaW50IiwidjEiLCJkaXN0YW5jZVRvIiwiY29weSIsImdldExpbmVhckluZGVjZXMiLCJkZWwiLCJkRGVsIiwicmVmaW5lUG9seSIsInBvbHkiLCJtYXhEbCIsIlZlY3RvcjIiLCJWZWN0b3IzIiwiSW1hZ2VCYXNlIiwiY29udGV4dCIsInduZCIsImRvYyIsImVsZW1lbnQiLCJib2R5IiwicmVuZGVyQ2FudmFzIiwiY3R4IiwicmVuZGVyQ2FudmFzQ3R4IiwicmVzVyIsInJlc0giLCJzZXRSZW5kZXJDYW52YXMiLCJzZXRSZXNvbHV0aW9uIiwiZGlzcG9zZSIsInJlbmRlckJsYW5rUGFnZSIsImJlZ2luUGF0aCIsImZpbGxTdHlsZSIsInJlY3QiLCJmaWxsIiwicmVuZGVySW1hZ2UiLCJpbWFnZSIsInB1c2hDdHgiLCJjbGVhclJlY3QiLCJkcmF3SW1hZ2UiLCJwb3BDdHgiLCJub3JtVG9Db252IiwicmVuZGVySGl0IiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2VQYXRoIiwic2F2ZSIsInNjYWxlIiwicmVzdG9yZSIsInJlbmRlck5vdEZvdW5kUGFnZSIsImZpbmlzaFJlbmRlciIsIm9uQ2hhbmdlIiwiZmluaXNoTG9hZCIsIm9uTG9hZCIsInN0YXJ0UmVuZGVyIiwiZ2V0U2ltdWxhdGVkRG9jIiwidW5kZWZpbmVkIiwiZ2V0Q29udGV4dCIsIkV2ZW50Q29udmVydGVyIiwiZW5hYmxlZCIsInNldEVuYWJsZSIsInZsIiwibUNhcE9iamVjdCIsIm5vdGlmeSIsIkV2ZW50IiwibUhvdk9iamVjdCIsImdldENhbGxiYWNrIiwib2JqZWN0IiwiZSIsInR5cGUiLCJjYWxsYmFjayIsInByb3BzIiwidmlldyIsImpFIiwiY29udmVydCIsImZpbHRlciIsImdldE9iamVjdCIsImNvbnZlcnRUb3VjaCIsImNvbnZlcnRNb3VzZSIsInRDYXBPYmplY3QiLCJ0ZXN0IiwiSW1hZ2VGYWN0b3J5IiwiY2FjaGUiLCJDYWNoZSIsImJ1aWxkIiwiaW5mbyIsIndpZHRoVGV4ZWxzIiwiaGVpZ2h0VGV4ZWxzIiwiaW5qZWN0b3IiLCJJbnRlcmFjdGl2ZUltYWdlIiwic3JjIiwiU3RhdGljSW1hZ2UiLCJQZGZJbWFnZSIsIkJsYW5rSW1hZ2UiLCJCb29rUHJvcHNCdWlsZGVyIiwib25SZWFkeSIsInN0eWxlIiwiZGVmYXVsdHMiLCJjYWxjU2l6ZSIsImNhbGNUZXhlbHMiLCJzaGVldCIsImNhbGNQcm9wcyIsInBhZ2VzIiwiY292ZXIiLCJwYWdlIiwiY2FsY1NoZWV0cyIsInNoZWV0cyIsImdldFNoZWV0cyIsImdldFByb3BzIiwiZ2V0UGFnZUNhbGxiYWNrIiwiYmluZHMiLCJwYWdlQ2FsbGJhY2siLCJyZWFkeSIsIlNoZWV0QmxvY2siLCJ2aXN1YWwiLCJmaXJzdCIsImxhc3QiLCJhbmdsZSIsInN0YXRlIiwibG9hZGVkUG9pbnRzIiwibG9hZFBvaW50cyIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJzaGFwZSIsInBTcGxpbmUiLCJDYXRtdWxsUm9tQ3VydmUzIiwiaW50ZXJwb2xhdGlvblBvaW50cyIsImlTcGxpbmUiLCJzaGVldEJsb2NrIiwicmVzWCIsImFTcGxpbmVzIiwiZ2VvbWV0cnkiLCJjbG9uZSIsInNpZGVGYWNlcyIsImZhY2VzIiwic2lkZVRleHR1cmUiLCJUZXh0dXJlIiwid3JhcFQiLCJSZXBlYXRXcmFwcGluZyIsInJlcGVhdCIsIm5lZWRzVXBkYXRlIiwibWF0ZXJpYWxzIiwiTWVzaFBob25nTWF0ZXJpYWwiLCJzZXRUZXh0dXJlIiwibWVzaCIsIk1lc2giLCJjYXN0U2hhZG93IiwicmVjZWl2ZVNoYWRvdyIsInRocmVlIiwidXNlckRhdGEiLCJzZWxmIiwibWFya2VycyIsIm1hcmtlciIsInVzZSIsInZlcnRpY2VzIiwiaXMiLCJBcnJheSIsImFwcGx5IiwiXyIsIlRocmVlVXRpbHMiLCJjcmVhdGVNYXJrZXIiLCJzaXplIiwidmVydGV4IiwiYWRkIiwiY29ybmVyIiwibWF4RGlzdGFuY2UiLCJPWiIsImF4aXMiLCJnZXRTaXplIiwiZ2V0VG9wQ2VybmVycyIsIm9mZiIsIlBJIiwicmVzWiIsImdldFRvcFNpemUiLCJ2cyIsImdldFRvcFdvcmxkUm90YXRpb24iLCJxIiwiZ2V0VG9wV29ybGRQb3NpdGlvbiIsInZpIiwibG9jYWxUb1dvcmxkIiwiZ2V0SW50ZXJwb2xhdGlvblBvaW50cyIsImluZHMiLCJtb2QiLCJLIiwid2F2ZSIsImNsb3NlZEFuZ2xlIiwiYmluZGVyVHVybiIsIm9wZW5lZEFuZ2xlIiwiY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMiLCJmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXMiLCJnZXRQb2ludHNBdEFuZ2xlIiwib3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMiLCJobCIsImhyIiwib2Zmc2V0IiwiZGVwdGgiLCJpbkFuZ2xlIiwiaEFuZ2xlIiwiZ2V0UG9pbnRzQXRBbmdsZUFuZEhzIiwibGVmdCIsInJpZ2h0IiwiaW52ZXJzZSIsInNldFBvaW50cyIsInlzIiwicmVzWSIsInBsYW5lIiwiUGxhbmUiLCJub3JtYWwiLCJwbGFuZU9mZnNldCIsImZsZXhpYmxlQ29ybmVyIiwicHJvaiIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50Iiwibm9ybWFsaXplIiwicHJvamVjdFBvaW50Iiwic3ViIiwiZGlzdGFuY2UiLCJkMkFuZ2xlIiwiY29ybmVyRGV2aWF0aW9uIiwiZXhwIiwiYmVuZGluZyIsImFwcGx5QXhpc0FuZ2xlIiwicG9pbnQiLCJwb3NpdGlvbiIsImNvbXB1dGVWZXJ0ZXhOb3JtYWxzIiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwidmVydGljZXNOZWVkVXBkYXRlIiwibWFya3VwIiwiY29tcHV0ZVZlcnRpY2VzIiwiZ2V0UG9pbnRzQXRIcyIsImhzIiwiYmwiLCJwMiIsImRwIiwibG4iLCJzcCIsInNpbiIsImNvcyIsIm5wcyIsImFuZ2xlcyIsInhwcyIsInlwcyIsImludGVycG9sYXRlIiwiZGVmIiwiZ3Jhdml0eSIsImNhY2hlZFBhZ2VzIiwicmVuZGVySW5hY3RpdmVQYWdlcyIsInJlbmRlckluYWN0aXZlUGFnZXNPbk1vYmlsZSIsInJlbmRlcldoaWxlRmxpcHBpbmciLCJwYWdlc0ZvclByZWRpY3RpbmciLCJwcmVsb2FkUGFnZXMiLCJydGwiLCJpbnRlcmFjdGl2ZUNvcm5lcnMiLCJzdGFydFZlbG9jaXR5IiwiZmxleGliaWxpdHkiLCJzaWRlIiwiYmluZGVyVGV4dHVyZSIsInBhZGRpbmciLCJtYXNzIiwiY3NzTGF5ZXJQcm9wcyIsInN0eWxlcyIsInZvbHVtZSIsImZsYXQiLCJDU1MzRE9iamVjdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJPYmplY3QzRCIsIkNTUzNEU3ByaXRlIiwiQ1NTM0RSZW5kZXJlciIsIl93aWR0aCIsIl9oZWlnaHQiLCJfd2lkdGhIYWxmIiwiX2hlaWdodEhhbGYiLCJtYXRyaXgiLCJNYXRyaXg0IiwiY2FtZXJhIiwiZm92Iiwib2JqZWN0cyIsImRvbUVsZW1lbnQiLCJvdmVyZmxvdyIsImNhbWVyYUVsZW1lbnQiLCJXZWJraXRUcmFuc2Zvcm1TdHlsZSIsIk1velRyYW5zZm9ybVN0eWxlIiwidHJhbnNmb3JtU3R5bGUiLCJhcHBlbmRDaGlsZCIsImlzSUUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzZXRDbGVhckNvbG9yIiwic2V0U2l6ZSIsImVwc2lsb24iLCJ2YWx1ZSIsImdldENhbWVyYUNTU01hdHJpeCIsImVsZW1lbnRzIiwiZ2V0T2JqZWN0Q1NTTWF0cml4IiwiY2FtZXJhQ1NTTWF0cml4IiwibWF0cml4M2QiLCJyZW5kZXJPYmplY3QiLCJtYXRyaXhXb3JsZEludmVyc2UiLCJ0cmFuc3Bvc2UiLCJjb3B5UG9zaXRpb24iLCJtYXRyaXhXb3JsZCIsImNhY2hlZFN0eWxlIiwiaWQiLCJXZWJraXRUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJkaXN0YW5jZVRvQ2FtZXJhU3F1YXJlZCIsImdldERpc3RhbmNlVG9TcXVhcmVkIiwiY2hpbGRyZW4iLCJvYmplY3QxIiwib2JqZWN0MiIsInNldEZyb21NYXRyaXhQb3NpdGlvbiIsImRpc3RhbmNlVG9TcXVhcmVkIiwiek9yZGVyIiwic2NlbmUiLCJvcmRlciIsInNvcnQiLCJ6TWF4IiwidHJhdmVyc2UiLCJpbmRleCIsInpJbmRleCIsInJlbmRlciIsInByb2plY3Rpb25NYXRyaXgiLCJXZWJraXRQZXJzcGVjdGl2ZSIsIk1velBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmUiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsInBhcmVudCIsIl9DU1MzRE9iamVjdCIsIl9DU1MzRFNwcml0ZSIsIkNTU0xheWVyIiwiaW5pdCIsImRlbGF5IiwiZmIzZFFGaWx0ZXIiLCJhcHBlbmRUbyIsImhlYWQiLCJyZW1vdmUiLCJqQ29udGFpbmVyIiwid2lkdGhQeHMiLCJoZWlnaHRQeHMiLCJzZXREYXRhIiwiY2FsbEludGVybmFsIiwiZXJyb3IiLCJjbGVhckludGVybmFscyIsImNzcyIsImh0bWwiLCJqcyIsImV2YWwiLCJwZW5kZWRDYWxsIiwiY2xiIiwidGltZXN0YW1wIiwiRGF0ZSIsIm5vdyIsInNldFRpbWVvdXQiLCJpc0hpZGRlbiIsImhhc0NsYXNzIiwiaGlkZSIsImFkZENsYXNzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzaG93IiwicmVtb3ZlQ2xhc3MiLCJtYXhTaXplIiwiSW5maW5pdHkiLCJzaXplb2YiLCJjb3VudFNpemVvZiIsIm9zIiwiTWFwIiwiZm9yRWFjaCIsImdldCIsImxvY2tlZCIsImRlbGV0ZSIsImZyZWVTcGFjZSIsImFyciIsImtleSIsInJlY3Vyc2lvblNpemVvZiIsImdldFRpbWVzdGFtcCIsInB1dCIsIkNvbnRyb2xsZXIiLCJoYW5kbGVEZWZhdWx0IiwiZGlzcGF0Y2hBc3luYyIsInRoZW4iLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnREaXNwYXRjaGVyIiwiQ3VzdG9tRXZlbnRDb252ZXJ0ZXIiLCJjdXN0b21UZXN0IiwiZURvYyIsImN1c3RvbXMiLCJ0YXJnZXQiLCJhZGRDdXN0b20iLCJjdXN0b20iLCJ0ZXN0SW50ZXJzZWN0aW9uIiwiRmluZGVyIiwiaXNEZWxpbWV0ciIsIkRFTElNSVRFUiIsIm1lcmdlIiwiYXMiLCJzdHJzIiwiY2hhckF0Iiwic3RyIiwiYWRkSGl0cyIsImNoYXJzIiwicGF0dGVybiIsImRlbGltZXRlciIsImhpdHMiLCJhZGRDb250ZXh0IiwiZGVscyIsImNvbnRleHRMZW5ndGgiLCJwcmV2RGVscyIsImNvbnRleHRzIiwic3Vic3RyIiwiZ2V0SGl0cyIsImdldENvbnRleHRzIiwidG9Mb3dlckNhc2UiLCJsc3RyIiwiRnVsbFNjcmVlblgiLCJhdmFpbGFibGUiLCJhY3RpdmF0ZWQiLCJub2RlIiwiY2xhc3NYIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZWZIYW5kbGVyIiwicmVxdWVzdCIsImNhbmNlbCIsImRlZk5vZGUiLCJGdWxsU2NyZWVuIiwiR2xvYmFsV29ya2VyT3B0aW9ucyIsIndvcmtlclNyYyIsIlBERkpTX0xPQ0FMRSIsIkdMT0JBTF9QQVRIUyIsInBkZkpzV29ya2VyIiwiY01hcFVybCIsInBkZkpzQ01hcFVybCIsImNNYXBQYWNrZWQiLCJkaXNhYmxlQXV0b0ZldGNoIiwiZGlzYWJsZVN0cmVhbSIsImltYWdlUmVzb3VyY2VzUGF0aCIsImV4dGVybmFsTGlua1RhcmdldCIsIkxpbmtUYXJnZXQiLCJCTEFOSyIsIlBkZiIsImxvYWRpbmdQcm9ncmVzcyIsImhhbmRsZXJRdWV1ZSIsInByb2dyZXNEYXRhIiwibG9hZGVkIiwidG90YWwiLCJ0YXNrIiwiZ2V0RG9jdW1lbnQiLCJyYW5nZUNodW5rU2l6ZSIsIm9uUHJvZ3Jlc3MiLCJvbGQiLCJpc05hTiIsInByb21pc2UiLCJudW1QYWdlcyIsImFsbCIsImdldFBhZ2UiLCJjYXRjaCIsImVycm9ySGFuZGxlciIsImRvdWJsZWRQYWdlcyIsImdldFBhZ2VTaXplIiwiZ2V0UGFnZVR5cGUiLCJnZXRQYWdlc051bSIsImdldERlc3RpbmF0aW9uIiwiZGVzdCIsImRlc3RQcm9taXNlIiwiZ2V0UGFnZUluZGV4IiwibnVtYmVyIiwic3BsaWNlIiwic2V0TG9hZGluZ1Byb2dyZXNzQ2xiIiwic2V0RXJyb3JIYW5kbGVyIiwiZWgiLCJyb3RhdGUiLCJnZXRIYW5kbGVyIiwiVGhyZWVFdmVudENvbnZlcnRlckZzIiwib2JqZWN0c1Rlc3QiLCJvYmplY3RzQW5kRmFjZXNUZXN0IiwiZmFjZSIsIm1hdGVyaWFsSW5kZXgiLCJ2aXN1YWxXb3JsZCIsImNvb3JkcyIsInJheWNhc3RlciIsInRocmVlcyIsImFkZFRocmVlIiwicmVtb3ZlVGhyZWUiLCJzZXRDb29yZHNGcm9tRXZlbnQiLCJzZXRGcm9tQ2FtZXJhIiwiaW50ZXJzZWN0cyIsImludGVyc2VjdE9iamVjdHMiLCJ2ZXJ0aWNlczJVVnMiLCJpbmRlY2VzIiwiY29udmVyQ2xiIiwidmlzIiwiY29tcHV0ZUZhY2VWZXJ0ZXhVdnMiLCJ1dnMiLCJ1dnNpIiwiZmFjZVZlcnRleFV2cyIsIlNwaGVyZUdlb21ldHJ5IiwiZmluZFV2VHJpcyIsImZvdW5kIiwiZmluZEludGVybmFsVmVydGljZXMiLCJ2ZXJ0ZXhOb3JtYWxzIiwidmFsdWVzIiwiV2lkZ2V0Q29udHJvbGxlciIsInZpc2libGUiLCJ0b2dsZSIsImZpcmVDaGFuZ2UiLCJ1cGRhdGVWaWV3Iiwic2V0U3RhdGUiLCJlbmFibGUiLCJhY3RpdmUiLCJUYXJnZXQiLCJmbiIsIkZsaXBCb29rIiwib3B0aW9ucyIsInBkZkxpbmtzSGFuZGxlciIsInNvdW5kcyIsInVzZXJNZXNzYWdlQ3RybCIsInRvY0N0cmwiLCJ0aHVtYm5haWxzIiwiYm9va21hcmtzIiwic2hhcmVDdHJsIiwiY3RybCIsImJvb2tQcmludGVyIiwiYm9vayIsInByb3BzQnVpbGRlciIsImJvb2tCdWlsZGVyIiwicGVuZGluZ0Rpc3Bvc2UiLCJwYXJlbnRDb250YWluZXIiLCJhY3RpdmF0ZUZ1bGxTY3JlZW4iLCJCb29rVmlldyIsIkRldGVjdG9yIiwid2ViZ2wiLCJhZGRHZXRXZWJHTE1lc3NhZ2UiLCJnZXRWaWV3IiwibG9hZGluZ0N0cmwiLCJMb2FkaW5nQ29udHJvbGxlciIsInByb2dyZXNzIiwiVXNlck1lc3NhZ2VDb250cm9sbGVyIiwiVmlzdWFsV29ybGQiLCJnZXRDb250YWluZXIiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwcm9wZXJ0aWVzQ2FsbGJhY2siLCJCb29rIiwiQm9va1ByaW50ZXIiLCJ0ZW1wbGF0ZSIsInByaW50U3R5bGUiLCJCb29rQ29udHJvbGxlciIsImNvbnRyb2xzUHJvcHMiLCJzZXRJbmplY3RvciIsInciLCJib29rQ3RybCIsImFkZEhhbmRsZXIiLCJzZXRQcmludGVyIiwic2VhcmNoIiwiU2VhcmNoIiwiZ2V0U2VhcmNoVmlldyIsImdldFBhZ2VzIiwib25RdWVyeSIsInNldFF1ZXJ5IiwiYmluZCIsInNldFJlc3VsdHMiLCJyZXN1bHRzIiwibGFzdFBhZ2UiLCJUaHVtYm5haWxzIiwiZ2V0VGh1bWJuYWlsc1ZpZXciLCJrV3RvSCIsIlRvY0NvbnRyb2xsZXIiLCJzZXRUaHVtYm5haWxzIiwic2V0U2VhcmNoIiwic2V0VG9jQ3RybCIsIlBkZkxpbmtzSGFuZGxlciIsImhhbmRsZUV2ZW50IiwiZ2V0T3V0bGluZSIsIm91dGxpbmUiLCJCb29rbWFya3MiLCJnZXRCb29rbWFya3NWaWV3Iiwic2V0Qm9va21hcmtzIiwicGRmTGlua3MiLCJzZXRIYW5kbGVyIiwiU291bmRzRW52aXJvbWVudCIsInNldFNvdW5kcyIsInN1YnNjcmliZUZsaXBzIiwiYXV0b05hdmlnYXRvciIsIkF1dG9OYXZpZ2F0b3IiLCJhdXRvTmF2aWdhdGlvbiIsIlNoYXJlQ29udHJvbGxlciIsInNoYXJlTGlua0J1aWxkZXIiLCJ1IiwiUmVnRXhwIiwidXJsUGFyYW0iLCJoYXNoIiwic2V0U2hhcmVDdHJsIiwib25FcnJvciIsInNldEVycm9yIiwibWVzc2FnZSIsInBkZiIsIlBkZkJvb2tQcm9wc0J1aWxkZXIiLCJib29rU3R5bGUiLCJzZXRQcm9ncmVzcyIsIm9uUGFnZUNhbGxiYWNrRXJyb3IiLCJDbGJCb29rUHJvcHNCdWlsZGVyIiwiY29udGFpbmVycyIsImF0dHIiLCJwcm90b3R5cGUiLCJUeXBlRXJyb3IiLCJPIiwic3RhcnQiLCJhcmd1bWVudHMiLCJyZWxhdGl2ZVN0YXJ0IiwiZW5kIiwicmVsYXRpdmVFbmQiLCJmaW5hbCIsImZpbmQiLCJkZWZpbmVQcm9wZXJ0eSIsInByZWRpY2F0ZSIsImxpc3QiLCJ0aGlzQXJnIiwiY2FsbCIsImZpbmRJbmRleCIsImVzY2FwZSIsIlN0cmluZyIsInJlcGxhY2VBbGwiLCJuYXZpZ2F0ZXMiLCJwYWdlTiIsImZiM2QiLCJpbnN0YW5jZXMiLCJnb1RvUGFnZSIsImdldFBhZ2VOdW1iZXIiLCJnZXRQYXJhbWV0ZXJCeU5hbWUiLCJyZWdleCIsImV4ZWMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUludCIsIkJpbmRlciIsImhpZGRlbiIsImJhY2tTaXplIiwiYmFja0ciLCJCb3hHZW9tZXRyeSIsIm9wYWNpdHkiLCJ0cmFuc3BhcmVudCIsImJhY2tNIiwidGV4dHVyZUxvYWRlciIsImxvYWQiLCJ0ZXh0dXJlIiwic2V0SGV4IiwibWluRmlsdGVyIiwiTGluZWFyRmlsdGVyIiwiYmFjayIsImJhY2tSVCIsImJhY2tSUiIsImJhY2tMVCIsImJhY2tMUiIsImxlZnRQaXZvdCIsInJpZ2h0UGl2b3QiLCJ0cjEiLCJxdWF0ZXJuaW9uIiwic2V0RnJvbUF4aXNBbmdsZSIsInRyMiIsInNldExlZnQiLCJzZXRSaWdodCIsImpvaW5MZWZ0Q292ZXIiLCJkaXNjb25uZWN0TGVmdENvdmVyIiwiam9pblJpZ2h0Q292ZXIiLCJkaXNjb25uZWN0UmlnaHRDb3ZlciIsImNzc0ZzIiwicGxheSIsInBsYXllciIsImZiM2ROb1BsYXkiLCJwZW5kaW5nUGxheWVycyIsInBsYXlWaWRlbyIsInBhdXNlIiwicGF1c2VWaWRlbyIsIm1vdXNlQ29udHJvbGxlciIsInByZXBhcmVQcm9wcyIsInpvb20iLCJzaW5nbGVQYWdlIiwiYXV0b1Jlc29sdXRpb24iLCJ1c2VyRGlyZWN0aW9uIiwibGFzdFRvcFBhZ2UiLCJkaXJlY3Rpb24iLCJwYWdlTWFuYWdlciIsIlBhZ2VNYW5hZ2VyIiwibGF5ZXJNYW5hZ2VyIiwiQ3NzTGF5ZXJzTWFuYWdlciIsInNlYXJjaEVuZ2luZSIsIlNlYXJjaEVuZ2luZSIsIm9uUGFnZUhpdHNDaGFuZ2VkIiwicXVlcnkiLCJyZWZyZXNoUGFnZVF1ZXJ5IiwiYmluZGVyIiwiY292ZXJQIiwiZW5hYmxlTW91c2UiLCJsZWZ0Q292ZXIiLCJDb3ZlciIsInNldExlZnRDb3ZlclRleHR1cmUiLCJzdWJzY3JpYmVTaGVldEJsb2NrIiwicmlnaHRDb3ZlciIsInNldFJpZ2h0Q292ZXJUZXh0dXJlIiwidGhyZWVTaGVldEJsb2NrcyIsInNoZWV0QmxvY2tzIiwiYWRkU2hlZXRCbG9jayIsInNldFBhZ2VUZXh0dXJlIiwib3BlbmVkQm94IiwiQm94MyIsInNldEZyb21PYmplY3QiLCJ1bmlvbiIsImxhc3RNb3VzZVBvcyIsInNoZWV0UGh5c2ljcyIsIlNoZWV0UGh5c2ljcyIsInVwZGF0ZSIsInBhZ2VYIiwicGFnZVkiLCJhZGRSZW5kZXJDYWxsYmFjayIsIm9uIiwib25QaWNrQ2FsbGJhY2siLCJkcmFnIiwib25EcmFnQ2FsbGJhY2siLCJvblJlbGVhc2VDYWxsYmFjayIsImRyYWdBbmdsZSIsInRtcCIsImJveHMiLCJhZGRPYmplY3QiLCJyZWZyZXNoWm9vbSIsImlzUHJvY2Vzc2luZyIsIm5vdGlmeUJlZm9yZUFuaW1hdGlvbiIsIm5vdGlmeUFmdGVyQW5pbWF0aW9uIiwidXBkYXRlVGhyZWUiLCJyZW1vdmVPYmplY3QiLCJyZW1vdmVSZW5kZXJDYWxsYmFjayIsInJlbW92ZVNoZWV0QmxvY2tzIiwicmVtb3ZlU2hlZXRCbG9jayIsImhhc1BlbmRpbmdQbGF5ZXJzIiwicmVzb2x2ZVBlbmRpbmdQbGF5ZXJzIiwic2V0QXV0b1Jlc29sdXRpb24iLCJzZXRab29tIiwiZ2V0Qm9va1BhZ2VzIiwic2V0RmxpcFByb2dyZXNzQ2xiIiwiZmxpcFByb2dyZXNzQ2xiIiwiaXNBY3RpdmVQYWdlIiwiZ2V0QmxvY2tCeVBhZ2UiLCJibG9jayIsImdldEJsb2NrUGFnZXMiLCJyYW5nZSIsImdldFRvcFBhZ2VzIiwiZ2V0UGFnZVN0YXRlIiwiZW5hYmxlTG9hZGluZ0FuaW1hdGlvbiIsImdldExlZnRGbGlwcGluZyIsImdldFJpZ2h0RmxpcHBpbmciLCJnZXRDbG9zZWRCbG9ja0FuZ2xlIiwicGh5c2ljSWQiLCJnZXRQYXJhbWV0ciIsImZsaXBMZWZ0IiwicHJvZ3Jlc3NDbGIiLCJjb25uZWN0UGh5c2ljcyIsInNldFNoZWV0QmxvY2tzIiwic3BsaXRTaGVldEJsb2NrIiwiZmluaXNoQW5pbWF0aW9uQ2xiIiwiZmxpcFJpZ2h0IiwiY2xlYXJIb3ZlckluZm8iLCJ0dXJuT25FdmVudHMiLCJob3ZlckluZm8iLCJmb3JjZSIsImNvcm5lckZvcmNlIiwieFNlZ21lbnQiLCJjb21wdXRlVGFyZ2V0Iiwic2VnIiwidXYiLCJjb3JuZXJUYXJnZXQiLCJkcmFnRm9yY2VDbGIiLCJnZXREcmFnQ29ybmVyRm9yY2VDbGIiLCJkcmFnSW5mbyIsInR1cm5PZmZFdmVudHMiLCJnZXRGbGlwcGluZyIsImZsaXAiLCJjb3JuZXJDYWxsYmFjayIsInBlbmRpbmdzIiwiaG92ZXJBbmdsZSIsImhvdmVyIiwicG9zc2libGUiLCJuZXh0QmxvY2siLCJzZXRQYXJhbWV0ciIsImdldFRhcmdldEZvcmNlQ2xiIiwiaG92ZXJDb3JuZXJGb3JjZUNsYiIsImNvcm5lckNsaWNrRGF0YSIsInBvdyIsImV2ZW50Q29udmVydGVyIiwiQ2lyY2xlVGFyZ2V0IiwibW91c2VDYWxsYmFjayIsInRyYW5zZmVyRXZlbnRUb1RleHR1cmUiLCJ0b3VjaENhbGxiYWNrIiwibW91c2VFdmVudHMiLCJ0b3VjaEV2ZW50cyIsImJsb2NrcyIsIm1hdGVyaWFsIiwibWVyZ2VTaGVldEJsb2NrcyIsImNhbGNCbG9ja0ZvcmNlIiwidmVsb2NpdHkiLCJjb3JuZXJIZWlnaHQiLCJjYWxjQmxvY2tDb3JuZXJGb3JjZSIsImFuaW1hdGlvbk5vdGlmaWNhdGlvbiIsInJlamVjdCIsImdldFVzZXJEaXJlY3Rpb24iLCJjb3ZlckhlaWdodCIsInNpbXVsYXRlQ2xiIiwicmVtb3ZlQ2xiIiwiYW5nbCIsImNoIiwibGFzdFQiLCJ0cmlnZ2VyIiwic2ltdWxhdGUiLCJsZWZ0U2l6ZSIsIm5ld0Jsb2NrIiwiZmlyc3RCbG9jayIsImxhc3RCbG9jayIsImNyZWF0ZVNpZGVUZXh0dXJlIiwibWVyZ2VQcm9wcyIsInNlY29uZCIsImZsZXhpYmxlQ29ybmVySyIsImNzc0xheWVyc0xvYWRlciIsImxvYWRlciIsIm5scyIsImNzc0xheWVySnNPYmplY3QiLCJjbElmRXgiLCJubyIsImNzc0xheWVySnNPYmplY3RJbml0Iiwicm8iLCJwcmV2ZW50RGVmYXVsdCIsIllvdVR1YmVBcGkiLCJZVCIsIlBsYXllciIsInZpZGVvSWQiLCJlYWNoIiwic2hvd24iLCJuYXZpZ2F0aW9uQ29udHJvbHMiLCJvcmJpdCIsImdldE9yYml0IiwidXBkYXRlVmlld0lmU3RhdGUiLCJiaW5kQWN0aW9ucyIsInNtYXJ0UGFuIiwiYWN0aW9ucyIsImlzU2luZ2xlUGFnZUF2YWlsYWJsZSIsImFjdGl2ZUZvck1vYmlsZSIsImlzTW9iaWxlIiwic3RhdHMiLCJsaWdodGluZyIsImRlZmF1bHQiLCJhY3RpdmVTaWRlIiwiYm94MCIsImJveDEiLCJib29rV2lkdGgiLCJib29rV2F0Y2hlciIsIk9iamVjdDNEV2F0Y2hlciIsIngwIiwiU3RhdHMiLCJ0b3AiLCJzZXRFeHRyYUxpZ2h0aW5nIiwib25TY3JlZW5Nb2RlQ2hhbmdlZCIsIm9uVXBkYXRlVmlldyIsImdldFBhcmVudENvbnRhaW5lciIsImNtZFNtYXJ0UGFuIiwibG9hZGluZ0FuaW1hdGlvbiIsInNraW4iLCJpbml0TG9hZGluZ0FuaW1hdGlvbiIsImNvZWZmaWNpZW50IiwidGVtcGxhdGVPYmplY3QiLCJhcHBMb2FkZWQiLCJlbmFibGVOYXZpZ2F0aW9uIiwicHJpbnRlciIsInNldEVuYWJsZWQiLCJjYW5ab29tSW4iLCJjYW5ab29tT3V0IiwiY2FuRGVmYXVsdFpvb20iLCJzZXRCb29rWm9vbSIsImNtZFpvb21JbiIsImRlbHRhIiwiem9vbUluIiwiY21kWm9vbU91dCIsInpvb21PdXQiLCJzZXRTY2FsZSIsImNtZERlZmF1bHRab29tIiwiY21kVG9jIiwiY21kU2hhcmUiLCJjbWRGYXN0QmFja3dhcmQiLCJjYW5GbGlwTGVmdCIsInN0YXJ0RmxpcCIsImNtZEJhY2t3YXJkIiwiY21kQmlnQmFja3dhcmQiLCJjbWRGb3J3YXJkIiwiY2FuRmxpcFJpZ2h0IiwiY21kQmlnRm9yd2FyZCIsImNtZEZhc3RGb3J3YXJkIiwiY21kU2F2ZSIsImRvd25sb2FkVVJMIiwiY2xpY2siLCJjbWRQcmludCIsInByaW50IiwiY21kRnVsbFNjcmVlbiIsIm1pbkF6aW11dGhBbmdsZSIsIm1heEF6aW11dGhBbmdsZSIsIm1pblBvbGFyQW5nbGUiLCJtYXhQb2xhckFuZ2xlIiwiY21kU2luZ2xlUGFnZSIsImNtZFNvdW5kcyIsImNtZFN0YXRzIiwiYXBwZW5kIiwiY21kTGlnaHRpbmdVcCIsImNtZExpZ2h0aW5nRG93biIsImNtZFBlbmRpbmdQbGF5IiwicGFnZU51bSIsImN1cnJlbnQiLCJmbGlwcyIsImNvdnMiLCJjdiIsInNldENsYiIsImZsIiwidGltZSIsIm5leHQiLCJmbGlwUmVzIiwiZW5kRmxpcCIsImdldFBhZ2VGb3JHVUkiLCJpbnBQYWdlIiwiaXNDbWRWaXNpYmxlIiwibmFycm93VmlldyIsImVuYWJsZWRJbk5hcnJvdyIsInVwZGF0ZVZpZXdTdGF0ZSIsInZpZXdTdGF0ZSIsImZsaXBwZXJzRW5hYmxlIiwiZ2V0QWN0aW9ucyIsImlzU3dpcHBpbmciLCJ0b3VjaENtZFN3aXBlIiwiY29kZSIsImNtZHMiLCJhY3RpdmF0ZSIsImNtZFBhbkxlZnQiLCJwYW4iLCJzcGVlZCIsImNtZFBhblJpZ2h0IiwiY21kUGFuVXAiLCJjbWRQYW5Eb3duIiwibW91c2VDbWRSb3RhdGUiLCJtb3VzZUNtZERyYWdab29tIiwibW91c2VDbWRQYW4iLCJtb3VzZUNtZFdoZWVsWm9vbSIsImRlbHRhWSIsInRvdWNoQ21kUm90YXRlIiwidG91Y2hDbWRab29tIiwidG91Y2hab29tRGF0YSIsInRvdWNoQ21kUGFuIiwidG91Y2giLCJ0b3VjaGVzIiwib3JpZ2luYWxFdmVudCIsInN3aXBlRGF0YSIsImhhbmRsZWQiLCJ5MCIsIndpZFNldHRpbmdzIiwiZVRvQSIsIkV2ZW50c1RvQWN0aW9ucyIsImFkZEFjdGlvbiIsIm1vdXNlQnV0dG9ucyIsIlJpZ2h0IiwiYWN0aW9uIiwiZmxhZ3MiLCJzZXRBY3Rpb25zIiwibGV2ZWxzIiwic3R5bGVTaGVldCIsInBkZlNyYyIsImNhbmNlbGVkIiwiZnJhbWUiLCJwcmludFduZCIsImNhbGxNYW51YWxseSIsInVzZUlGcmFtZSIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwicmVuZGVyQ29udGVudCIsImNvbnRlbnQiLCJwcmludERvYyIsIndyaXRlIiwiY2xvc2UiLCJTZXQiLCJyZW5kZXJIdG1sIiwicmVuZGVySGVhZCIsIndyYXAiLCJsaW5rcyIsIm1hdGNoIiwibGluayIsImZhaWwiLCJyZXNwb25zZVRleHQiLCJkZWZhdWx0U3R5bGVTaGVldCIsImlzQ2hyb21pdW0iLCJjaHJvbWUiLCJ3aW5OYXYiLCJ2ZW5kb3JOYW1lIiwidmVuZG9yIiwiaXNJRWVkZ2UiLCJpc0lPU0Nocm9tZSIsImNvbnRhaW5lciIsImluaXRWaWV3IiwiYm9va21hcmtzVmlldyIsInRodW1ibmFpbHNWaWV3Iiwic2VhcmNoVmlldyIsImdldEhhbmRsZXJzIiwiaGFuZGxlcnMiLCJjYWxsTGF0ZXIiLCJQQUdFX0hBTkRMRVJfREVMQVkiLCJvbkl0ZW1TdGF0ZUNoYW5nZWQiLCJnZXRGb3JtcyIsImdldExpbmtzIiwiZ2V0V2lkZ2V0cyIsImdldElucHV0cyIsImdldFRleHRzIiwiZ2V0VGVtcGxhdGUiLCJyZWwiLCJzY3JpcHQiLCJWaWV3IiwiaW1hZ2VGYWN0b3J5Iiwid3JhcHBlcnMiLCJnZXRBY3RpdmVzIiwiYWNzIiwibGF5ZXJzIiwiZ2V0TGF5ZXJzIiwiZmluaXNoIiwic2wiLCJTaGVldENzc0xheWVyIiwicGFnZU51bWJlciIsIndhaXQiLCJwYWdlUXVlcnkiLCJwYWdlQ2FjaGUiLCJyZXNvdXJjZXNDYWNoZSIsImNhbnZhc2VzIiwibmV4dENhbnZhcyIsImxvYWRpbmdzIiwicmVuZGVyUXVldWUiLCJwcmVkaWN0ZWRSZXF1ZXN0cyIsInRtcE1hdGVyaWFsIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJQbGFuZUdlb21ldHJ5IiwibG9hZGluZyIsImNyZWF0ZUxvYWRpbmdUZXh0dXJlIiwibG9hZFByZWRpY3RlZFBhZ2VzIiwidXBkYXRlUmVuZGVyUXVldWUiLCJzcHJpdGVUaWxlcyIsImFuaW1hdGlvbiIsIkxvYWRpbmdBbmltYXRpb24iLCJhbmltYXRvciIsIlRleHR1cmVBbmltYXRvciIsImNyZWF0ZVNwcml0ZSIsImlzQ292ZXIiLCJzZXR1cE1hdGVyaWFsIiwiaXNBY3RpdmUiLCJyZW1vdmVGcm9tTG9hZGluZ3MiLCJyZW1vdmVGcm9tUmVuZGVyUXVldWUiLCJ3cmFwcGVyIiwicHVzaEluUmVuZGVyUXVldWUiLCJlcyIsImFyZ3MiLCJyZXNvbHZlUGVuZGluZ3MiLCJydGxQYWdlTiIsInBpIiwiaXNUb3AiLCJzZXRNYXRlcmlhbCIsImNhbGNSZXNvbHV0aW9uIiwiaW50ZXJhY3RpdmUiLCJDb2xvciIsIm9uVXBkYXRlIiwicmVuZGVyaW5nIiwiaXNTaW5nbGVQYWdlIiwidWQiLCJuZWFyIiwidHJhbnNmZXJFdmVudHMiLCJtb3VzZXVwIiwibW91c2VvdXQiLCJlbnQiLCJ0b09iamVjdCIsImdldE9yTG9hZFRleHR1cmVPYmplY3QiLCJ0b0RvYyIsIm9iIiwicGFnZURlc2NyaXB0aW9uIiwidmlld3BvcnQiLCJnZXRWaWV3cG9ydCIsImN1cnNvcnMiLCJkZWZhdWx0SGFuZGxlciIsImRlc3RpbmF0aW9uIiwiY2FsbEhhbmRsZXJzIiwiZXZlbnQiLCJhbm5vIiwiYW5ub3RhdGlvbiIsInBvcCIsInByb2Nlc3MiLCJzdGFtcCIsImdldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJpdGVtcyIsIml0ZW0iLCJsaW5rQnVpbGRlciIsImNtZENsb3NlU2hhcmUiLCJjbGlja0xpbmsiLCJibGFuayIsImNtZEZhY2Vib29rIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0TGluayIsImNtZFR3aXR0ZXIiLCJjbWRFbWFpbCIsImNtZCIsImxheWVyIiwiYWRkQ3NzT2JqZWN0IiwicmVtb3ZlQ3NzT2JqZWN0Iiwicm90YXRpb24iLCJ0YXJnZXRGb3JjZUNsYiIsImciLCJ0bCIsInRhcmdldEFuZ2xlIiwiZmxidCIsImRyYWdDb3JuZXJGb3JjZUNsYiIsImZwcyIsInN0YXJ0RHQiLCJtYXJnaW4iLCJpbmZNIiwiYXR0ZW1wdHMiLCJtYXhJdGVyYXRpb25zIiwiZm9yY2VDbGIiLCJjb3JuZXJGb3JjZUNsYiIsImNmIiwiZ2V0UGFyYW1ldHJNYXAiLCJUIiwiYXR0ZW1wdCIsIml0Iiwibm9zIiwiaW50ZWdyYXRlIiwiY2kiLCJmaW5kQ29sbGlzaW9ucyIsInNjb3MiLCJzb2x2ZUNvbGxpc2lvbiIsImdzIiwiaTAiLCJmaW5kQW5kU29sdmVDb3JuZXJDb2xsaXNpb25zIiwicmVtb3ZlU3RhdGljcyIsImFsIiwiZENoIiwiZHYiLCJtbSIsImF2IiwiYnYiLCJpc0NvbGxpc2lvbiIsImFsZiIsImNvc0FsZiIsImJyZiIsImF1ZGlvIiwiQXVkaW8iLCJjdXJyZW50VGltZSIsImVtaXR0ZXIiLCJ0YWIiLCJvbk5hdmlnYXRlIiwibmF2aWdhdGVUaHVtYm5haWxzIiwibmF2aWdhdGVTZWFyY2giLCJuYXZpZ2F0ZUJvb2ttYXJrcyIsImlzQm9va21hcmtzIiwiY21kQm9va21hcmtzIiwiY21kVGh1bWJuYWlscyIsImNtZFNlYXJjaCIsImNtZENsb3NlVG9jIiwiZnJvbnRHZW9tZXRyeSIsInRyYW5zbGF0ZSIsImJhY2tHZW9tZXRyeSIsInJvdGF0ZVkiLCJsZWZ0R2VvbWV0cnkiLCJyaWdodEdlb21ldHJ5IiwidG9wR2VvbWV0cnkiLCJyb3RhdGVYIiwiYm90dG9tR2VvbWV0cnkiLCJHZW9tZXRyeSIsImFkZEZhY2VzIiwiZnMiLCJGYWNlMyIsIm1hcFZlcnRpY2VzIiwiZHN0IiwiZXEiLCJmcm9udE1hcCIsImJhY2tNYXAiLCJsZWZ0TWFwIiwicmlnaHRNYXAiLCJMZWZ0IiwiTWlkZGxlIiwiZ2V0VGl0bGUiLCJ0aXRsZSIsImdldEl0ZW1zIiwibm9kZXMiLCJtYXBOb2RlcyIsImxpIiwibWluaW1pemVkIiwicmVuZGVyTm9kZSIsInJlbmRlck5vZGVzIiwiZXhwYW5kIiwibWluaW1pemUiLCJsZXZlbCIsImdldFdlYkdMRXJyb3JNZXNzYWdlIiwiZm9udEZhbWlseSIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInRleHRBbGlnbiIsImJhY2tncm91bmQiLCJpbm5lckhUTUwiLCJXZWJHTFJlbmRlcmluZ0NvbnRleHQiLCJwYXJhbWV0ZXJzIiwiY2FudmFzIiwiQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIiwid29ya2VycyIsIldvcmtlciIsImZpbGVhcGkiLCJGaWxlIiwiRmlsZVJlYWRlciIsIkZpbGVMaXN0IiwiQmxvYiIsIkRvY01vdXNlU2ltdWxhdG9yIiwiakZyYW1lIiwiYkVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJyZXNlbmRQcm9wZXJ0aWVzIiwiZ2V0RGVmYXVsdFJlc2VuZFByb3BlcnRpZXMiLCJ1bmRlZmluZWRQcm9wZXJ0aWVzIiwiZ2V0RGVmYXVsdFVuZGVmaW5lZFByb3BlcnRpZXMiLCJvbkRvY0NoYW5nZUNsYnMiLCJ0ZXJtcyIsIkhPVkVSIiwiQUNUSVZFIiwic3R5bGVTaGVldHMiLCJzcyIsImNzc1J1bGVzIiwiY3NzVGV4dCIsInRlcm0iLCJzZWxlY3RvclRleHQiLCJjb252ZXJ0Q29vcmRzIiwiakVsZW1lbnQiLCJ0cmlnZ2VyRXZlbnQiLCJhZHZhbmNlZFByb3BzIiwidGltZVN0YW1wIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJlbnRlckVsZW1lbnQiLCJsZWF2ZUVsZW1lbnQiLCJhY3RpdmF0ZUVsZW1lbnQiLCJkZWFjdGl2YXRlRWxlbWVudCIsImFkZERvY0NoYW5nZUNsYiIsImVsZW1lbnRGcm9tUG9pbnQiLCJjaGlsZE5vZGVzIiwiY2hpbGQiLCJFbGVtZW50IiwiakMiLCJnZXRFbGVtZW50Iiwib2ZmMCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImNhcEVsZW1lbnQiLCJsZWF2ZWQiLCJob3ZFbGVtZW50IiwicmVsYXRlZFRhcmdldCIsIkRvbTJJbWFnZSIsInV0aWwiLCJuZXdVdGlsIiwiaW5saW5lciIsIm5ld0lubGluZXIiLCJmb250RmFjZXMiLCJuZXdGb250RmFjZXMiLCJpbWFnZXMiLCJuZXdJbWFnZXMiLCJ0b1N2ZyIsInRvUG5nIiwidG9KcGVnIiwidG9CbG9iIiwidG9QaXhlbERhdGEiLCJpbXBsIiwiY2xvbmVOb2RlIiwiZW1iZWRGb250cyIsImlubGluZUltYWdlcyIsImFwcGx5T3B0aW9ucyIsIm1ha2VTdmdEYXRhVXJpIiwiYmdjb2xvciIsImJhY2tncm91bmRDb2xvciIsInByb3BlcnR5IiwiZHJhdyIsImdldEltYWdlRGF0YSIsInRvRGF0YVVSTCIsInF1YWxpdHkiLCJjYW52YXNUb0Jsb2IiLCJkb21Ob2RlIiwibWFrZUltYWdlIiwibmV3Q2FudmFzIiwiZmlsbFJlY3QiLCJyb290IiwibWFrZU5vZGVDb3B5IiwiY2xvbmVDaGlsZHJlbiIsInByb2Nlc3NDbG9uZSIsImlzQ2FudmFzIiwib3JpZ2luYWwiLCJjbG9uZUNoaWxkcmVuSW5PcmRlciIsImFzQXJyYXkiLCJjaGlsZENsb25lIiwiaXNFbGVtZW50IiwiY2xvbmVTdHlsZSIsImNsb25lUHNldWRvRWxlbWVudHMiLCJjb3B5VXNlcklucHV0IiwiZml4U3ZnIiwiY29weVN0eWxlIiwic291cmNlIiwiY29weVByb3BlcnRpZXMiLCJzZXRQcm9wZXJ0eSIsImdldFByb3BlcnR5UHJpb3JpdHkiLCJjbG9uZVBzZXVkb0VsZW1lbnQiLCJjbGFzc05hbWUiLCJ1aWQiLCJzdHlsZUVsZW1lbnQiLCJmb3JtYXRQc2V1ZG9FbGVtZW50U3R5bGUiLCJzZWxlY3RvciIsImZvcm1hdENzc1RleHQiLCJmb3JtYXRDc3NQcm9wZXJ0aWVzIiwiY3JlYXRlVGV4dE5vZGUiLCJmb3JtYXRQcm9wZXJ0eSIsImlzVGV4dEFyZWEiLCJpc0lucHV0Iiwic2V0QXR0cmlidXRlIiwiaXNTVkciLCJpc1NWR1JlY3QiLCJhdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJyZXNvbHZlQWxsIiwic3R5bGVOb2RlIiwiaW5saW5lQWxsIiwiWE1MU2VyaWFsaXplciIsInNlcmlhbGl6ZVRvU3RyaW5nIiwiZXNjYXBlWGh0bWwiLCJ4aHRtbCIsInBhcnNlRXh0ZW5zaW9uIiwibWltZVR5cGUiLCJkYXRhQXNVcmwiLCJpc0RhdGFVcmwiLCJyZXNvbHZlVXJsIiwiZ2V0QW5kRW5jb2RlIiwiaXNJbWFnZSIsIm1pbWVzIiwiV09GRiIsIkpQRUciLCJleHRlbnNpb24iLCJiaW5hcnlTdHJpbmciLCJhdG9iIiwiYmluYXJ5QXJyYXkiLCJVaW50OEFycmF5IiwiY2hhckNvZGVBdCIsImJhc2VVcmwiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImZvdXJSYW5kb21DaGFycyIsInRvU3RyaW5nIiwic2xpY2UiLCJ1cmkiLCJJbWFnZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJUSU1FT1VUIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvbnRpbWVvdXQiLCJ0aW1lb3V0IiwicmVzcG9uc2VUeXBlIiwic2VuZCIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJlbmNvZGVyIiwib25sb2FkZW5kIiwicmVzdWx0IiwicmVhZEFzRGF0YVVSTCIsInJlc3BvbnNlIiwic3RyaW5nIiwibXMiLCJhcmciLCJhcnJheUxpa2UiLCJhcnJheSIsImxlZnRCb3JkZXIiLCJweCIsInJpZ2h0Qm9yZGVyIiwic2Nyb2xsV2lkdGgiLCJ0b3BCb3JkZXIiLCJib3R0b21Cb3JkZXIiLCJzY3JvbGxIZWlnaHQiLCJzdHlsZVByb3BlcnR5IiwicGFyc2VGbG9hdCIsIkhUTUxDYW52YXNFbGVtZW50IiwiSFRNTFRleHRBcmVhRWxlbWVudCIsIkhUTUxJbnB1dEVsZW1lbnQiLCJTVkdFbGVtZW50IiwiU1ZHUmVjdEVsZW1lbnQiLCJIVE1MSW1hZ2VFbGVtZW50IiwiVVJMX1JFR0VYIiwic2hvdWxkUHJvY2VzcyIsInJlYWRVcmxzIiwiaW5saW5lIiwiZGF0YVVybCIsInVybEFzUmVnZXgiLCJub3RoaW5nVG9JbmxpbmUiLCJ1cmxzIiwicmVhZEFsbCIsIndlYkZvbnRzIiwid2ViRm9udCIsImNzc1N0cmluZ3MiLCJnZXRDc3NSdWxlcyIsInNlbGVjdFdlYkZvbnRSdWxlcyIsInJ1bGVzIiwibmV3V2ViRm9udCIsInJ1bGUiLCJDU1NSdWxlIiwiRk9OVF9GQUNFX1JVTEUiLCJsb2ciLCJ3ZWJGb250UnVsZSIsInBhcmVudFN0eWxlU2hlZXQiLCJuZXdJbWFnZSIsImlubGluZUJhY2tncm91bmQiLCJpbmxpbmVkIiwiRHJhZyIsImludGVyc2VjdGlvbiIsInNlbGVjdGVkIiwiY29udHJvbHNTdGF0ZSIsImdldENvbnRyb2xzU3RhdGUiLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VEb3duIiwib25Nb3VzZVVwIiwicmF5Iiwib3JpZ2luIiwic2V0Q29udHJvbHNTdGF0ZSIsImdldFdvcmxkRGlyZWN0aW9uIiwiaW50ZXJzZWN0UGxhbmUiLCJnZXRFdmVudEZsYWdzIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiZ2V0UG9zaXRpb24iLCJjb250ZXh0TWVudSIsIm1vdXNlRG93biIsIm1vdXNlTW92ZSIsIm1vdXNlVXAiLCJtb3VzZVdoZWVsIiwibW91c2VNb3ZlRG9jIiwibW91c2VVcERvYyIsImRibGNsaWNrIiwidG91Y2hTdGFydCIsInRvdWNoTW92ZSIsInRvdWNoRW5kIiwia2V5RG93biIsImtleVByZXNzIiwia2V5VXAiLCJmaXJlQWN0aW9ucyIsImJ1dHRvbiIsInBpY2tlZCIsImNsaWNrcyIsInRvdWNoUGljayIsInBvcyIsInRvdWNoUGlja2VkIiwia2V5Q29kZSIsIm1vZEtleXMiLCJDdHJsIiwiU2hpZnQiLCJBbHQiLCJfaGFzV2Via2l0RnVsbFNjcmVlbiIsIl9oYXNNb3pGdWxsU2NyZWVuIiwiX2hhc01zRnVsbHNjcmVlbiIsIndlYmtpdElzRnVsbFNjcmVlbiIsIm1vekZ1bGxTY3JlZW4iLCJtc0Z1bGxzY3JlZW5FbGVtZW50IiwiYXNzZXJ0Iiwid2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4iLCJtb3pSZXF1ZXN0RnVsbFNjcmVlbiIsIm1zUmVxdWVzdEZ1bGxzY3JlZW4iLCJ3ZWJraXRDYW5jZWxGdWxsU2NyZWVuIiwibW96Q2FuY2VsRnVsbFNjcmVlbiIsIm1zRXhpdEZ1bGxzY3JlZW4iLCJkb2N1bWVudEVsZW1lbnQiLCJpSWQiLCJoYXNGZWF0dXJlIiwiaW1hZ2VMb2FkIiwic3ZnUmVuZGVyIiwiZnJhbWVMb2FkIiwic2ltdWxhdG9yIiwiY2FsY1RpbWVUbyIsInVwZGF0ZUludGVydmFsIiwic2hhZG93Qmx1ciIsInNoYWRvd0NvbG9yIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJmb250IiwidGV4dEJhc2VsaW5lIiwiZmlsbFRleHQiLCJkYSIsIl9hIiwiX3IiLCJjeCIsImN5IiwibngiLCJueSIsImFyYyIsImdldEltYWdlIiwic2hvd1Byb2dyZXNzIiwibG9hZGluZ01zZyIsImdldExvYWRpbmdNc2ciLCJkZWZhdWx0TG9hZGluZ01zZyIsIk1vdXNlRXZlbnRDb252ZXJ0ZXIiLCJib3VuZEJveENsYiIsInRlc3RTY2FsZSIsImVsZW1lbnRTaXplIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInZ4IiwidnkiLCJib3giLCJjb21wdXRlQ2xpZW50Qm91bmRCb3giLCJtb3ZlUGFuIiwic2V0UGFkZGluZyIsInZUb0NhbWVyYSIsInByb2plY3QiLCJ4cyIsInpzIiwic2V0T2JqZWN0IiwiY29tcHV0ZUNvcnIiLCJjb3JyIiwiY2VudGVyVmlldyIsIkt4IiwiS3kiLCJnZXRTY2FsZSIsIm1hcmciLCJwYWQiLCJkcGFkIiwidGYiLCJZIiwidmQiLCJPcmJpdCIsIm1pbkRpc3RhbmNlIiwibWluWm9vbSIsIm1heFpvb20iLCJlbmFibGVEYW1waW5nIiwiZGFtcGluZ0ZhY3RvciIsImVuYWJsZVpvb20iLCJ6b29tU3BlZWQiLCJlbmFibGVSb3RhdGUiLCJyb3RhdGVTcGVlZCIsImVuYWJsZVBhbiIsImF1dG9Sb3RhdGUiLCJhdXRvUm90YXRlU3BlZWQiLCJ0YXJnZXQwIiwicG9zaXRpb24wIiwiem9vbTAiLCJnZXRQb2xhckFuZ2xlIiwic3BoZXJpY2FsIiwicGhpIiwiZ2V0QXppbXV0aGFsQW5nbGUiLCJ0aGV0YSIsInJlc2V0Iiwic2NvcGUiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiY2hhbmdlRXZlbnQiLCJfc3BlZWQiLCJkb2xseUluIiwiZ2V0Wm9vbVNjYWxlIiwiZG9sbHlPdXQiLCJuZXdTY2FsZSIsInF1YXQiLCJRdWF0ZXJuaW9uIiwic2V0RnJvbVVuaXRWZWN0b3JzIiwidXAiLCJxdWF0SW52ZXJzZSIsImxhc3RQb3NpdGlvbiIsImxhc3RRdWF0ZXJuaW9uIiwiYXBwbHlRdWF0ZXJuaW9uIiwic2V0RnJvbVZlY3RvcjMiLCJyb3RhdGVMZWZ0IiwiZ2V0QXV0b1JvdGF0aW9uQW5nbGUiLCJzcGhlcmljYWxEZWx0YSIsIm1ha2VTYWZlIiwicmFkaXVzIiwicGFuT2Zmc2V0Iiwic2V0RnJvbVNwaGVyaWNhbCIsImxvb2tBdCIsInpvb21DaGFuZ2VkIiwiRVBTIiwiZG90IiwiU3BoZXJpY2FsIiwicm90YXRlVXAiLCJwYW5MZWZ0Iiwib2JqZWN0TWF0cml4Iiwic2V0RnJvbU1hdHJpeENvbHVtbiIsIm11bHRpcGx5U2NhbGFyIiwicGFuVXAiLCJkZWx0YVgiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsInRhcmdldERpc3RhbmNlIiwidGFuIiwiY2xpZW50SGVpZ2h0IiwiT3J0aG9ncmFwaGljQ2FtZXJhIiwiY2xpZW50V2lkdGgiLCJib3R0b20iLCJkb2xseVNjYWxlIiwib2Zmc2V0RG9sbHkiLCJ3aGVlbERvbGx5IiwibTAwIiwibTAxIiwibTAyIiwibTEwIiwibTExIiwibTEyIiwibTIwIiwibTIxIiwibTIyIiwidHJpbSIsInNldEhpdHMiLCJyZWN0U2l6ZSIsImNyZWF0ZVBvbHkiLCJzZXRBbm5vdGF0aW9ucyIsImFubm9zIiwidGFyZ2V0cyIsInN1YnR5cGUiLCJhUG9zIiwiYVN6IiwiUG9seVRhcmdldCIsImFubm9DbGIiLCJmaW5kZXIiLCJyZW5kZXJIaXRzIiwidGVzdFN6IiwidGV4dERpdiIsImJhc2VPZmZzZXQiLCJoaXQiLCJVdGlsIiwiZm9udE5hbWUiLCJhdGFuMiIsInZlcnRpY2FsIiwiZm9udEhlaWdodCIsImZvbnRBc2NlbnQiLCJhc2NlbnQiLCJkZXNjZW50IiwidGVzdFNwYW4iLCJpd2lkdGgiLCJyZWxhdGl2ZU9mZnNldCIsImNhbGNWaWV3cG9ydCIsIm9mZnNldFgiLCJnZXRBbm5vdGF0aW9ucyIsImNhbnZhc0NvbnRleHQiLCJwcmV2UmVzdWx0cyIsIm5hdmlnYXRlIiwiZG9RdWVyeSIsInF1ZXJ5U3RhbXAiLCJodG1scyIsImNyb3NzT3JpZ2luIiwiaW1hZ2VFcnJvciIsImltZyIsInRpbGVzSG9yaXoiLCJ0aWxlc1ZlcnQiLCJudW1UaWxlcyIsInRpbGVEaXNwRHVyYXRpb24iLCJ0aWxlc0hvcml6b250YWwiLCJ0aWxlc1ZlcnRpY2FsIiwibnVtYmVyT2ZUaWxlcyIsInRpbGVEaXNwbGF5RHVyYXRpb24iLCJjdXJyZW50RGlzcGxheVRpbWUiLCJjdXJyZW50VGlsZSIsIm1pbGxpU2VjIiwiY3VycmVudENvbHVtbiIsImN1cnJlbnRSb3ciLCJUaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIiLCJUaHJlZUV2ZW50Q29udmVydGVyIiwiVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyIiwibGFzdFRvdWNoZXMiLCJUb3VjaEV2ZW50Q29udmVydGVyIiwidGh1bWJuYWlsc0NsYiIsInF1ZXVlIiwiaGVhZGluZyIsInRodW1ibmFpbCIsImRhdGFUaHVtYm5haWwiLCJzZXRMb2FkUXVldWUiLCJzZXRJbWFnZSIsImdldEFjdGl2ZSIsInNjcm9sbFRvcCIsImJ1aWx0IiwiVG91Y2hDb252ZXJ0ZXIiLCJzaG93TWVzc2FnZSIsInRleHQiLCJjbGFzc1Byb3BlcnR5IiwiYXR0cmlidXRlUHJvcGVydHkiLCJhdHRyaWJ1dGVOYW1lIiwicmVtb3ZlQXR0ciIsImhhbmRsZUxpbmtFdmVudCIsImhhbmRsZUlucHV0RXZlbnQiLCJoYW5kbGVGb3JtRXZlbnQiLCJnZXRUaW1lIiwicGVuZGluZyIsImxvYWRGaWxlcyIsImZpbGVzIiwidGFza3MiLCJ1cmxSZXNvbHZlciIsImxhc3RJbmRleE9mIiwicGFydHMiLCJwYXJ0Iiwib2JqVG9BdHRyc1N0ciIsImNoZWNrSWZyYW1lU2l6ZSIsIm9uUmVzaXplIiwiczAiLCJzMSIsImZpcmVMaW5rc09uTG9hZEV2ZW50IiwibGlua0xvYWRlZCIsImpMaW5rIiwiakxpbmtzIiwiaXNJT1MiLCJNU1N0cmVhbSIsImlzU2FmYXJpIiwiaW5pdFVybCIsInN0eWxlRGF0YSIsInRlbXBsYXRlTmFtZSIsInRleHRDc3MiLCJyMSIsIkpTT04iLCJwYXJzZSIsImxpbmtDb250cm9scyIsIndpZGdldENvbnRyb2xzIiwiaW5wdXRDb250cm9scyIsImZvcm1Db250cm9scyIsInRleHRDb250cm9scyIsInN0YXRlU2V0dGVycyIsInNldHRlciIsInNldExpbmtDb250cm9sU3RhdGUiLCJzZXRXaWRnZXRDb250cm9sU3RhdGUiLCJzZXRJbnB1dENvbnRyb2xTdGF0ZSIsInNldFRleHRDb250cm9sU3RhdGUiLCJzdG9wIiwiZ2V0U3R5bGVEYXRhIiwic2V0Q29udHJvbFN0YXRlIiwic3RhdGVIYW5kbGVycyIsInN0IiwibGlua1N0YXRlSGFuZGxlcnMiLCJ3aWRnZXRTdGF0ZUhhbmRsZXJzIiwiaW5wdXRTdGF0ZUhhbmRsZXJzIiwidGV4dFN0YXRlSGFuZGxlcnMiLCJ1c2VIZWxwZXJzIiwiY2hlY2tVcGRhdGVGbGFnIiwicmVuZGVyQ2FsbGJhY2tzIiwiZGlhZyIsImdldERpYWciLCJjbG9jayIsIkNsb2NrIiwiUmF5Y2FzdGVyIiwiU2NlbmUiLCJjc3NTY2VuZSIsInJlbmRlcmVyIiwiV2ViR0xSZW5kZXJlciIsImFscGhhIiwicHJlY2lzaW9uIiwiZ2V0UHJlY2lzaW9uIiwiYW50aWFsaWFzIiwic2V0UGl4ZWxSYXRpbyIsImNzc1JlbmRlcmVyIiwiVGV4dHVyZUxvYWRlciIsImFtYmllbnRMaWdodCIsIkFtYmllbnRMaWdodCIsImxpZ2h0IiwiRGlyZWN0aW9uYWxMaWdodCIsImNvbnRyb2xzIiwidG1wVmVjdG9yIiwiQXhpc0hlbHBlciIsIm9uV2luZG93UmVzaXplIiwiYW5pbWF0ZSIsImZpbHRlckRhdGEiLCJ0eXBlcyIsImNvbnRhaW5zIiwic2NyZWVuIiwiaW50ZW5zaXR5IiwidXBkYXRlQ2FtZXJhIiwiYXNwZWN0IiwidXBkYXRlUmVuZGVyZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkZWx0YVRpbWUiLCJnZXREZWx0YSIsImdldFBpeGVsIiwicmVhZFBpeGVscyIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwib25ZVFJlYWR5Iiwic2V0Q29uZmlnIiwiWVRDb25maWciLCJhc3luYyIsImN1cnJlbnRTY3JpcHQiLCJub25jZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5zZXJ0QmVmb3JlIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1EQUEyQyxjQUFjOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7O0FDaEVBLElBQU1BLEtBQUtDLEtBQUEsR0FBb0JDLE9BQU9DLE1BQTNCLEdBQW1DQyxRQUFRLFFBQVIsQ0FBOUM7QUFBQSxJQUNNQyxlQUFlSixLQUFBLEdBQXlCQyxPQUFPSSxXQUFoQyxHQUE2Q0YsUUFBUSxhQUFSLENBRGxFO0FBQUEsSUFFTUcsU0FBU04sS0FBQSxHQUFtQkMsT0FBT00sS0FBMUIsR0FBaUNKLFFBQVEsT0FBUixDQUZoRDtBQUFBLElBR01LLFNBQVNSLEtBQUEsR0FBbUJDLE9BQU9RLEtBQTFCLEdBQWlDTixRQUFRLE9BQVIsQ0FIaEQ7QUFBQSxJQUlNTyxZQUFZVixLQUFBLEdBQW1CQyxPQUFPVSxRQUExQixHQUFvQ1IsUUFBUSxXQUFSLENBSnREO0FBQUEsSUFLTVMsU0FBU1osS0FBQSxHQUFtQkMsT0FBT1ksUUFBMUIsR0FBb0NWLFFBQVEsT0FBUixDQUxuRDtBQUFBLElBTU1XLE1BQU0sU0FB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QTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxzQ0FBc0M7QUFDM0U7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQzs7Ozs7Ozs7QUMvTkQ7QUFDQSxlQUFlLEtBQXNELGlGQUFpRixrQkFBa0IsaUJBQWlCLGNBQWMscUJBQXFCLFNBQVMsY0FBYyxZQUFZLG9CQUFvQixxREFBcUQsSUFBSSx3Q0FBd0MsZ0NBQWdDLE1BQU0sT0FBTyxlQUFlLFlBQVksZUFBZSx1Q0FBdUM7QUFDbGYseUJBQXlCLEtBQUssbUhBQW1ILHNGQUFzRixLQUFLLE9BQU8sMERBQTBELDRCQUE0QixnQkFBZ0IsSUFBSSxnQ0FBZ0Msa0JBQWtCLG1EQUFtRCx5QkFBeUI7QUFDM2QsbUNBQW1DLFNBQVMsbUJBQW1CLGFBQWEsMEJBQTBCLHdCQUF3Qix3SkFBd0osVUFBVSxXQUFXLDRCQUE0QixhQUFhLHlCQUF5QixtREFBbUQscUJBQXFCLGNBQWMsb0JBQW9CLGNBQWM7QUFDcmUsb0JBQW9CLGNBQWMsaUJBQWlCLG9CQUFvQixPQUFPLDJCQUEyQixnQkFBZ0IsZ0JBQWdCLGNBQWMsZ0JBQWdCLG9CQUFvQixjQUFjLGtEQUFrRCxxQ0FBcUMsd0JBQXdCLGNBQWMsaUJBQWlCLHNDQUFzQyxTQUFTIiwiZmlsZSI6ImpzL2Rpc3QvM2RmbGlwYm9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNzYpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGY3ODMyZTkzMGU5OTUyNTA2Y2M2IiwiY29uc3QgXyQgPSBHTE9CQUxfTElCUy5qUXVlcnk/IHdpbmRvdy5qUXVlcnk6IHJlcXVpcmUoJ2pxdWVyeScpLFxyXG4gICAgICBfaHRtbDJjYW52YXMgPSBHTE9CQUxfTElCUy5odG1sMmNhbnZhcz8gd2luZG93Lmh0bWwyY2FudmFzOiByZXF1aXJlKCdodG1sMmNhbnZhcycpLFxyXG4gICAgICBfVEhSRUUgPSBHTE9CQUxfTElCUy5USFJFRT8gd2luZG93LlRIUkVFOiByZXF1aXJlKCd0aHJlZScpLFxyXG4gICAgICBfUmVhY3QgPSBHTE9CQUxfTElCUy5SZWFjdD8gd2luZG93LlJlYWN0OiByZXF1aXJlKCdyZWFjdCcpLFxyXG4gICAgICBfUmVhY3RET00gPSBHTE9CQUxfTElCUy5SZWFjdD8gd2luZG93LlJlYWN0RE9NOiByZXF1aXJlKCdyZWFjdC1kb20nKSxcclxuICAgICAgX1BERkpTID0gR0xPQkFMX0xJQlMuUERGSlM/IHdpbmRvdy5wZGZqc0xpYjogcmVxdWlyZSgncGRmanMnKSxcclxuICAgICAgX3RyID0gKHMpPT4gKHdpbmRvdy5pYmVyZXphbnNreSB8fCB7fSkudHIgJiYgd2luZG93LmliZXJlemFuc2t5LnRyKHMpIHx8IHM7XHJcblxyXG5leHBvcnQge1xyXG4gIF8kIGFzICQsXHJcbiAgX2h0bWwyY2FudmFzIGFzIGh0bWwyY2FudmFzLFxyXG4gIF9USFJFRSBhcyBUSFJFRSxcclxuICBfUmVhY3QgYXMgUmVhY3QsXHJcbiAgX1JlYWN0RE9NIGFzIFJlYWN0RE9NLFxyXG4gIF9QREZKUyBhcyBQREZKUyxcclxuICBfdHIgYXMgdHJcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2xpYnMuanMiLCJjb25zdCBfJCA9IEdMT0JBTF9MSUJTLmpRdWVyeT8gd2luZG93LmpRdWVyeTogcmVxdWlyZSgnanF1ZXJ5JyksXHJcbiAgICAgIF9odG1sMmNhbnZhcyA9IEdMT0JBTF9MSUJTLmh0bWwyY2FudmFzPyB3aW5kb3cuaHRtbDJjYW52YXM6IHJlcXVpcmUoJ2h0bWwyY2FudmFzJyksXHJcbiAgICAgIF9USFJFRSA9IEdMT0JBTF9MSUJTLlRIUkVFPyB3aW5kb3cuVEhSRUU6IHJlcXVpcmUoJ3RocmVlJyksXHJcbiAgICAgIF9QREZKUyA9IEdMT0JBTF9MSUJTLlBERkpTPyB3aW5kb3cuUERGSlM6IHJlcXVpcmUoJ3BkZmpzJyksXHJcbiAgICAgIF90ciA9IChzKT0+ICh3aW5kb3cuaWJlcmV6YW5za3kgfHwge30pLnRyICYmIHdpbmRvdy5pYmVyZXphbnNreS50cihzKSB8fCBzO1xyXG5cclxuaWYod2luZG93LkZCM0RfTE9DQUxFKSB7XHJcbiAgd2luZG93LmliZXJlemFuc2t5ID0ge1xyXG4gICAgLi4ud2luZG93LmliZXJlemFuc2t5LFxyXG4gICAgdHI6IChzKT0+IChGQjNEX0xPQ0FMRS5kaWN0aW9uYXJ5IHx8IHt9KVtzXSB8fCBzXHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICBfJCBhcyAkLFxyXG4gIF9odG1sMmNhbnZhcyBhcyBodG1sMmNhbnZhcyxcclxuICBfVEhSRUUgYXMgVEhSRUUsXHJcbiAgX1BERkpTIGFzIFBERkpTLFxyXG4gIF90ciBhcyB0clxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9saWJzLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzZU1hdGhVdGlscyB7XHJcbiAgc3RhdGljIHN1bSA9IFtCYXNlTWF0aFV0aWxzLnN1bTEsIEJhc2VNYXRoVXRpbHMuc3VtMiwgQmFzZU1hdGhVdGlscy5zdW0zLCBCYXNlTWF0aFV0aWxzLnN1bTRdO1xyXG4gIHN0YXRpYyBlcHMgPSAxZS00O1xyXG5cclxuICBzdGF0aWMgc3VtMShrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzdW0yKGthLGEsa2IsYikge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAga2EqYVswXStrYipiWzBdLFxyXG4gICAgICBrYSphWzFdK2tiKmJbMV1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VtMyhrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXSxcclxuICAgICAga2EqYVsxXStrYipiWzFdLFxyXG4gICAgICBrYSphWzJdK2tiKmJbMl1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc3VtNChrYSxhLGtiLGIpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIGthKmFbMF0ra2IqYlswXSxcclxuICAgICAga2EqYVsxXStrYipiWzFdLFxyXG4gICAgICBrYSphWzJdK2tiKmJbMl0sXHJcbiAgICAgIGthKmFbM10ra2IqYlszXVxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByazQoZHksIHQsIGR0LCB5LCBzdW09QmFzZU1hdGhVdGlscy5zdW1beS5sZW5ndGgtMV0pIHtcclxuICAgIGNvbnN0IGsxPWR5KHQseSksXHJcbiAgICAgICAgICBrMj1keSh0K2R0LzIsc3VtKDEseSxkdC8yLGsxKSksXHJcbiAgICAgICAgICBrMz1keSh0K2R0LzIsc3VtKDEseSxkdC8yLGsyKSksXHJcbiAgICAgICAgICBrND1keSh0K2R0LHN1bSgxLHksZHQsazMpKTtcclxuICAgIHJldHVybiBzdW0oMSx5LGR0LzYsc3VtKDEsc3VtKDEsazEsMixrMiksMSxzdW0oMixrMywxLGs0KSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgcmV0dXJuIHlbMF0rKHlbMV0teVswXSkvKHhbMV0teFswXSkqKHhpLXhbMF0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGludGVycG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgbGV0IHlpO1xyXG4gICAgaWYoeFswXT54WzFdKSB7XHJcbiAgICAgIHg9eC5yZXZlcnNlKCk7XHJcbiAgICAgIHk9eS5yZXZlcnNlKCk7XHJcbiAgICB9XHJcbiAgICBpZih4aTx4WzBdKSB7XHJcbiAgICAgIHlpPXlbMF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHhpPnhbMV0pIHtcclxuICAgICAgeWk9eVsxXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB5aT1CYXNlTWF0aFV0aWxzLmV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geWk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsY1NjYWxlKHNyY1csIHNyY0gsIGRzdFcsIGRzdEgpIHtcclxuICAgIHJldHVybiBkc3RXL3NyY1c7IC8vIE1hdGgubWluKGRzdFcvc3JjVywgZHN0SC9zcmNIKVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIG11bE0oYSwgYikge1xyXG4gICAgY29uc3Qgcj1bXTtcclxuICAgIGZvcihsZXQgaT0wO2k8YS5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHIucHVzaChbXSk7XHJcbiAgICAgIGZvcihsZXQgaj0wO2o8YlswXS5sZW5ndGg7KytqKSB7XHJcbiAgICAgICAgcltpXVtqXSA9IDA7XHJcbiAgICAgICAgZm9yKGxldCBrPTA7azxiLmxlbmd0aDsrK2spIHtcclxuICAgICAgICAgIHJbaV1bal0rPWFbaV1ba10qYltrXVtqXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRyYW5zTShtKSB7XHJcbiAgICBjb25zdCByPVtdO1xyXG4gICAgZm9yKGxldCBpPTA7aTxtLmxlbmd0aDsrK2kpIHtcclxuICAgICAgZm9yKGxldCBqPTA7ajxtWzBdLmxlbmd0aDsrK2opIHtcclxuICAgICAgICBpZighcltqXSkge1xyXG4gICAgICAgICAgcltqXT1bXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcltqXVtpXT1tW2ldW2pdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBtYXQoZGF0YSkge1xyXG4gICAgbGV0IHM9MDtcclxuICAgIGZvcihsZXQgeCBvZiBkYXRhKSB7XHJcbiAgICAgIHMrPXg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcy9kYXRhLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkaXNwKGRhdGEpIHtcclxuICAgIGNvbnN0IE09QmFzZU1hdGhVdGlscy5tYXQoZGF0YSk7XHJcbiAgICBsZXQgcz0wO1xyXG4gICAgZm9yKGxldCB4IG9mIGRhdGEpIHtcclxuICAgICAgcys9KHgtTSkqKHgtTSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcy9kYXRhLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVkaWN0MShkYXRhLCBudW0pIHtcclxuICAgIGNvbnN0IHI9W10sIGw9ZGF0YS5sZW5ndGgsIEQ9QmFzZU1hdGhVdGlscy5kaXNwKGRhdGEpO1xyXG4gICAgaWYoRDxsICYmIGw+MSkge1xyXG4gICAgICBjb25zdCBhbT1bXSwgYm09W107XHJcbiAgICAgIGZvcihsZXQgaT0wO2k8bDsrK2kpIHtcclxuICAgICAgICBhbS5wdXNoKFtpLDFdKTtcclxuICAgICAgICBibS5wdXNoKFtkYXRhW2ldXSk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgdGE9QmFzZU1hdGhVdGlscy50cmFuc00oYW0pLCBhPUJhc2VNYXRoVXRpbHMubXVsTSh0YSxhbSksIGI9QmFzZU1hdGhVdGlscy5tdWxNKHRhLGJtKSxcclxuICAgICAgZD0oYVswXVswXSphWzFdWzFdLWFbMV1bMF0qYVswXVsxXSksXHJcbiAgICAgIHA9W1xyXG4gICAgICAgIC0oYVswXVsxXSpiWzFdWzBdLWJbMF1bMF0qYVsxXVsxXSkvZCxcclxuICAgICAgICAoYVswXVswXSpiWzFdWzBdLWFbMV1bMF0qYlswXVswXSkvZFxyXG4gICAgICBdO1xyXG4gICAgICBmb3IobGV0IGk9MDtpPG51bTsrK2kpIHtcclxuICAgICAgICBjb25zdCB2ID0gTWF0aC5yb3VuZChwWzBdKihpK2wpK3BbMV0pO1xyXG4gICAgICAgIGlmKHIuaW5kZXhPZih2KT09PS0xKSB7XHJcbiAgICAgICAgICByLnB1c2godik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBwcmVkaWN0KGRhdGEsIG51bSkge1xyXG4gICAgY29uc3Qgcj1bXSwgbD1kYXRhLmxlbmd0aDtcclxuICAgIGxldCBzZ25zPTA7XHJcbiAgICBmb3IobGV0IGk9MDtpPGwtMTsrK2kpIHtcclxuICAgICAgc2ducys9TWF0aC5zaWduKGRhdGFbaSsxXS1kYXRhW2ldKTtcclxuICAgIH1cclxuICAgIGlmKE1hdGguYWJzKHNnbnMpPD0obC0xKSUyKSB7XHJcbiAgICAgIHNnbnMgPSAtMTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBzZ25zID0gTWF0aC5zaWduKHNnbnMpO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBpPTAsIGN1cj1kYXRhW2wtMV07IGk8bnVtICYmIGN1cj4wOyArK2kpIHtcclxuICAgICAgY3VyKz1zZ25zO1xyXG4gICAgICByLnB1c2goY3VyKTtcclxuICAgIH1cclxuICAgIHJldHVybiByO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFVuaXF1ZSgpIHtcclxuICAgIHJldHVybiBNYXRoLmNlaWwoMWU5Kk1hdGgucmFuZG9tKCkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldFNwbGluZVBvaW50cyhzcGxpbmUsIHBzKSB7XHJcbiAgICBpZihzcGxpbmUucG9pbnRzLmxlbmd0aCE9PXBzLngubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybignc2V0U3BsaW5lUG9pbnRzOiBiYWQgcG9pbnRzJyk7XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IGk9MDsgaTxzcGxpbmUucG9pbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHNwbGluZS5wb2ludHNbaV0uc2V0KHBzLnhbaV0sIHBzLnlbaV0sIHBzLno/IHBzLnpbaV06IDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1hcGwyTChscywgbGVuLCBuLCBmKSB7XHJcbiAgICBjb25zdCBkTCA9IGxlbi8obi0xKTtcclxuICAgIGxldCBMPTA7XHJcbiAgICBmb3IobGV0IGk9MCwgZD1sc1swXTsgaTxscy5sZW5ndGgtMSAmJiBMPGxlbiswLjEqZEw7ICsraSwgZCs9bHNbaV0pIHtcclxuICAgICAgaWYoTWF0aC5hYnMoTC1kKTxNYXRoLmFicyhMLWQtbHNbaSsxXSkpIHtcclxuICAgICAgICBmKGksIEwpO1xyXG4gICAgICAgIEwrPWRMO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZihMPGxlbiswLjEqZEwpIHtcclxuICAgICAgY29uc29sZS53YXJuKCdtYXBsMkw6IGxzIGlzIG5vdCBlbm91Z2h0Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGV0MihhLGIsYyxkKSB7XHJcbiAgICByZXR1cm4gYSpkLWIqYztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzb2x2ZTJMaW4oYTEsYjEsYTIsYjIpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBjb25zdCBkPUJhc2VNYXRoVXRpbHMuZGV0MihhMVswXSxhMVsxXSxhMlswXSxhMlsxXSk7XHJcbiAgICBpZihNYXRoLmFicyhkKT5CYXNlTWF0aFV0aWxzLmVwcykge1xyXG4gICAgICBjb25zdCBkeD1CYXNlTWF0aFV0aWxzLmRldDIoYjEsYTFbMV0sYjIsYTJbMV0pLCBkeT1CYXNlTWF0aFV0aWxzLmRldDIoYTFbMF0sYjEsYTJbMF0sYjIpO1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgeDogZHgvZCxcclxuICAgICAgICB5OiBkeS9kXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzSW5zaWRlUG9seShwcywgcCkge1xyXG4gICAgbGV0IGRvbmUgPSBmYWxzZSwgY3Q7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxwcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBpZihCYXNlTWF0aFV0aWxzLnYyZGlzdChwLCBwc1tpXSk8QmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICBjdD0xO1xyXG4gICAgICAgIGRvbmUgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB3aGlsZSghZG9uZSkge1xyXG4gICAgICBkb25lID0gdHJ1ZTtcclxuICAgICAgY3QgPSAwO1xyXG4gICAgICBsZXQgbnAgPSB7eDogcC54K01hdGgucmFuZG9tKCktMC41LCB5OiBwLnkrTWF0aC5yYW5kb20oKS0wLjV9LCBybiA9IHt4OiBucC54LXAueCwgeTogbnAueS1wLnl9LCBhMT1bcm4ueSwgLXJuLnhdLCBiMT1wLngqcm4ueS1wLnkqcm4ueDtcclxuICAgICAgZm9yKGxldCBpPTA7IGk8cHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBwMD1wc1tpXSwgcDE9cHNbKGkrMSklcHMubGVuZ3RoXSwgbiA9IHt4OiBwMS54LXAwLngsIHk6IHAxLnktcDAueX0sIGEyPVtuLnksIC1uLnhdLCBiMj1wMC54Km4ueS1wMC55Km4ueCxcclxuICAgICAgICAgIGlwID0gQmFzZU1hdGhVdGlscy5zb2x2ZTJMaW4oYTEsYjEsYTIsYjIpO1xyXG4gICAgICAgIGlmKGlwKSB7XHJcbiAgICAgICAgICBpZihCYXNlTWF0aFV0aWxzLnYyZGlzdChpcCwgcDApPEJhc2VNYXRoVXRpbHMuZXBzIHx8IEJhc2VNYXRoVXRpbHMudjJkaXN0KGlwLCBwMSk8QmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICAgICAgZG9uZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2UgaWYoaXAueD5NYXRoLm1pbihwMC54LHAxLngpLUJhc2VNYXRoVXRpbHMuZXBzJiZpcC54PE1hdGgubWF4KHAwLngscDEueCkrQmFzZU1hdGhVdGlscy5lcHMgJiZcclxuICAgICAgICAgICAgICAgICAgaXAueT5NYXRoLm1pbihwMC55LHAxLnkpLUJhc2VNYXRoVXRpbHMuZXBzJiZpcC55PE1hdGgubWF4KHAwLnkscDEueSkrQmFzZU1hdGhVdGlscy5lcHMpIHtcclxuICAgICAgICAgICAgaWYoQmFzZU1hdGhVdGlscy52MmRpc3QoaXAsIHApPEJhc2VNYXRoVXRpbHMuZXBzKSB7XHJcbiAgICAgICAgICAgICAgY3Q9MTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBjb25zdCB0bj17eDogaXAueC1wLngsIHk6IGlwLnktcC55fTtcclxuICAgICAgICAgICAgICBjdCArPSB0bi54KnJuLngrdG4ueSpybi55PjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjdCUyO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzSW5zaWRlQ29udlBvbHkocHMsIHApIHtcclxuICAgIGxldCBzZyA9IFswLCAwXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHBzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAwPXBzW2ldLCBwMT1wc1soaSsxKSVwcy5sZW5ndGhdLCBhPXt4OiBwMC54LXAueCwgeTogcDAueS1wLnl9LCBiPXt4OiBwMS54LXAueCwgeTogcDEueS1wLnl9O1xyXG4gICAgICArK3NnWyhhLngqYi55LWEueSpiLng8MCkrMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gfnNnLmluZGV4T2YocHMubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2Mmxlbih2Mikge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh2Mi54KnYyLngrdjIueSp2Mi55KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2MmRpc3QodjIxLCB2MjIpIHtcclxuICAgIHJldHVybiBCYXNlTWF0aFV0aWxzLnYybGVuKHtcclxuICAgICAgeDogdjIyLngtdjIxLngsXHJcbiAgICAgIHk6IHYyMi55LXYyMS55XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb21wdXRlU3F1YXJlKHBzKSB7XHJcbiAgICBjb25zdCBhID0gW107XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxwcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBhLnB1c2goQmFzZU1hdGhVdGlscy52MmRpc3QocHNbaV0sIHBzWyhpKzEpJXBzLmxlbmd0aF0pKTtcclxuICAgICAgcCArPSAwLjUqYVtpXTtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLnNxcnQocCoocC1hWzBdKSoocC1hWzFdKSoocC1hWzJdKSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUludGVycENvZWZzKHRyaSwgcCkge1xyXG4gICAgY29uc3QgcyA9IEJhc2VNYXRoVXRpbHMuY29tcHV0ZVNxdWFyZSh0cmkpLCBjb2Vmcz1bXSwgbCA9IHRyaS5sZW5ndGg7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxsOyArK2kpIHtcclxuICAgICAgY29lZnNbaV0gPSBCYXNlTWF0aFV0aWxzLmNvbXB1dGVTcXVhcmUoW3AsIHRyaVsoaSsxKSVsXSwgdHJpWyhpKzIpJWxdXSkvcztcclxuICAgIH1cclxuICAgIHJldHVybiBjb2VmcztcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0Jhc2VNYXRoVXRpbHMuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XHJcblxyXG4gIHN0YXRpYyBNT0JJTEVfRElBRyA9IDExO1xyXG5cclxuICBzdGF0aWMgbm9ybWFsaXplVXJsKHVybCkge1xyXG4gICAgZnVuY3Rpb24gc3BsaXQocykge1xyXG4gICAgICByZXR1cm4gcy5yZXBsYWNlKC9cXFxcL2csICcvJykuc3BsaXQoJy8nKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGJhc2UgPSBzcGxpdCh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcbiAgICB1cmwgPSBzcGxpdCh1cmwpO1xyXG4gICAgaWYoYmFzZVsyXT09PXVybFsyXSkge1xyXG4gICAgICB1cmxbMF0gPSBiYXNlWzBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybC5qb2luKCcvJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXh0ZW5kcyhkZXIsIGJhc2UpIHtcclxuICAgIGZvcihsZXQgbmFtZSBpbiBiYXNlKSB7XHJcbiAgICAgIGlmKCFkZXIuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcclxuICAgICAgICBkZXJbbmFtZV0gPSBiYXNlW25hbWVdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGVmYXVsdENtcChhLCBiKSB7XHJcbiAgICByZXR1cm4gYS1iO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGxvd2VyQm91bmQoYSwgeCwgY21wKSB7XHJcbiAgICBjbXAgPSBjbXAgfHwgVXRpbHMuZGVmYXVsdENtcDtcclxuICAgIGxldCBsID0gMCwgaCA9IGEubGVuZ3RoLTE7XHJcbiAgICB3aGlsZShoLWw+MSkge1xyXG4gICAgICBsZXQgbWlkID0gTWF0aC5mbG9vcigobCArIGgpIC8gMik7XHJcbiAgICAgIGlmKGNtcCh4LCBhW21pZF0pPDApIHtcclxuICAgICAgICBoID0gbWlkO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGwgPSBtaWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjbXAoeCwgYVtoXSk+PTA/IGg6IGw7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9VdGlscy5qcyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEdyYXBoVXRpbHMge1xyXG5cclxuICBzdGF0aWMgY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIGNvbnN0IGMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIGlmKHdpZHRoKSB7XHJcbiAgICAgIGMud2lkdGggPSB3aWR0aDtcclxuICAgIH1cclxuICAgIGlmKGhlaWdodCkge1xyXG4gICAgICBjLmhlaWdodCA9IGhlaWdodDtcclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGV4dHJhcG9sYXRlTGluZWFyKHgseSx4aSkge1xyXG4gICAgcmV0dXJuIHlbMF0rKHlbMV0teVswXSkvKHhbMV0teFswXSkqKHhpLXhbMF0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGludGVycG9sYXRlMDEoeTEseTIsdCkge1xyXG4gICAgcmV0dXJuIEdyYXBoVXRpbHMuZXh0cmFwb2xhdGVMaW5lYXIoWzAsMV0sW3kxLHkyXSx0KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRDb2xvckJ5dGVzKGNvbG9yKSB7XHJcbiAgICByZXR1cm4gWyhjb2xvcj4+MTYpJjB4RkYsIChjb2xvcj4+OCkmMHhGRiwgY29sb3ImMHhGRl07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaW52ZXJzZUNvbG9yKGNvbG9yLCB0PTEpIHtcclxuICAgIGNvbnN0IGJzPUdyYXBoVXRpbHMuZ2V0Q29sb3JCeXRlcyhjb2xvciksXHJcbiAgICAgICAgICBpYnM9WzB4RkYtYnNbMF0sMHhGRi1ic1sxXSwweEZGLWJzWzJdXSxcclxuICAgICAgICAgIG5icz1bTWF0aC5yb3VuZChHcmFwaFV0aWxzLmludGVycG9sYXRlMDEoYnNbMF0saWJzWzBdLHQpKSxNYXRoLnJvdW5kKEdyYXBoVXRpbHMuaW50ZXJwb2xhdGUwMShic1sxXSxpYnNbMV0sdCkpLE1hdGgucm91bmQoR3JhcGhVdGlscy5pbnRlcnBvbGF0ZTAxKGJzWzJdLGlic1syXSx0KSldO1xyXG4gICAgcmV0dXJuIEdyYXBoVXRpbHMuYnl0ZXMyQ29sb3IobmJzKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjb2xvcjJSZ2JhKGNvbG9yLCBhKSB7XHJcbiAgICByZXR1cm4gR3JhcGhVdGlscy5ieXRlczJSZ2JhKEdyYXBoVXRpbHMuZ2V0Q29sb3JCeXRlcyhjb2xvciksIGEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJ5dGVzMlJnYmEoYnMsIGEpIHtcclxuICAgIHJldHVybiAncmdiYSgnK2JzLmpvaW4oJywnKSsnLCcrYSsnKSc7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYnl0ZXMyQ29sb3IoYnMpIHtcclxuICAgIHJldHVybiBic1syXXwoYnNbMV08PDgpfChic1swXTw8MTYpXHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0dyYXBoVXRpbHMuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEJhc2VNYXRoVXRpbHMgZnJvbSAnLi9CYXNlTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhVdGlscyBleHRlbmRzIEJhc2VNYXRoVXRpbHMge1xyXG4gIHN0YXRpYyB2MSA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblxyXG4gIHN0YXRpYyBzcGxpdFNwbGluZShzcGxpbmUsIE4pIHtcclxuICAgIGNvbnN0IG8gPSB7bGVuOiAwLCBsczogWzBdfSwgZGw9MS9OO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8PU47ICsraSkge1xyXG4gICAgICBjb25zdCBwID0gc3BsaW5lLmdldFBvaW50KGkqZGwpO1xyXG4gICAgICBpZihpKSB7XHJcbiAgICAgICAgY29uc3QgZCA9IE1hdGhVdGlscy52MS5kaXN0YW5jZVRvKHApO1xyXG4gICAgICAgIG8ubGVuICs9IGQ7XHJcbiAgICAgICAgby5scy5wdXNoKGQpO1xyXG4gICAgICB9XHJcbiAgICAgIE1hdGhVdGlscy52MS5jb3B5KHApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG87XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0TGluZWFySW5kZWNlcyhzcGxpbmUsIG4pIHtcclxuICAgIGNvbnN0IGRlbCA9IDUwMDAsIGREZWwgPSAxL2RlbDtcclxuICAgIGNvbnN0IGxzPVswXTtcclxuICAgIGxldCBsID0gMDtcclxuICAgIGZvcihsZXQgaT0wOyBpPD1kZWw7ICsraSkge1xyXG4gICAgICBjb25zdCBwID0gc3BsaW5lLmdldFBvaW50KGkqZERlbCk7XHJcbiAgICAgIGlmKGkpIHtcclxuICAgICAgICBjb25zdCBkPU1hdGhVdGlscy52MS5kaXN0YW5jZVRvKHApO1xyXG4gICAgICAgIGwgKz0gZDtcclxuICAgICAgICBscy5wdXNoKGQpO1xyXG4gICAgICB9XHJcbiAgICAgIE1hdGhVdGlscy52MS5jb3B5KHApO1xyXG4gICAgfVxyXG4gICAgbHMucHVzaCgxZTcpO1xyXG5cclxuICAgIGNvbnN0IHJlcyA9IFtdLCBkbCA9IGwvKG4tMSk7XHJcbiAgICBmb3IobGV0IGk9MCwgTD0wLCBkPWxzWzBdOyBpPGxzLmxlbmd0aC0xOyArK2ksIGQrPWxzW2ldKSB7XHJcbiAgICAgIGlmKE1hdGguYWJzKEwtZCk8TWF0aC5hYnMoTC1kLWxzW2krMV0pKSB7XHJcbiAgICAgICAgcmVzLnB1c2goaSpkRGVsKTtcclxuICAgICAgICBMKz1kbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVmaW5lUG9seShwb2x5LCBtYXhEbCkge1xyXG4gICAgY29uc3QgcmVzID0gW107XHJcbiAgICBmb3IobGV0IGk9MDsgaTxwb2x5Lmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHAwID0gcG9seVtpXSwgcDEgPSBwb2x5WyhpKzEpJXBvbHkubGVuZ3RoXSwgbCA9IEJhc2VNYXRoVXRpbHMudjJkaXN0KHAwLCBwMSksIG4gPSBNYXRoLmNlaWwobC9tYXhEbCksIGRsID0gbC9uO1xyXG4gICAgICByZXMucHVzaChwMCk7XHJcbiAgICAgIGZvcihsZXQgaj0xOyBqPG47ICsraikge1xyXG4gICAgICAgIHJlcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IyKFxyXG4gICAgICAgICAgcDAueCtqKmRsKihwMS54LXAwLngpL2wsXHJcbiAgICAgICAgICBwMC55K2oqZGwqKHAxLnktcDAueSkvbFxyXG4gICAgICAgICkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvTWF0aFV0aWxzLmpzIiwiaW1wb3J0IEdyYXBoVXRpbHMgZnJvbSAnLi9HcmFwaFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlQmFzZSB7XHJcblxyXG4gIHN0YXRpYyByZW5kZXJDYW52YXMgPSAgR3JhcGhVdGlscy5jcmVhdGVDYW52YXMoKTtcclxuICBzdGF0aWMgcmVuZGVyQ2FudmFzQ3R4ID0gSW1hZ2VCYXNlLnJlbmRlckNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcikge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMud25kID0gY29udGV4dC53bmQ7XHJcbiAgICB0aGlzLmRvYyA9IGNvbnRleHQuZG9jO1xyXG4gICAgdGhpcy5lbGVtZW50ID0gY29udGV4dC5lbGVtZW50IHx8IGNvbnRleHQuZG9jLmJvZHk7XHJcbiAgICB0aGlzLmMgPSBjb250ZXh0LnJlbmRlckNhbnZhcyB8fCBJbWFnZUJhc2UucmVuZGVyQ2FudmFzO1xyXG4gICAgdGhpcy5jdHggPSBjb250ZXh0LnJlbmRlckNhbnZhc0N0eCB8fCBJbWFnZUJhc2UucmVuZGVyQ2FudmFzQ3R4O1xyXG4gICAgdGhpcy5yZXNXID0gdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5yZXNIID0gdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgfVxyXG5cclxuICBzZXRSZW5kZXJDYW52YXMoYywgY3R4KSB7XHJcbiAgICB0aGlzLmMgPSBjO1xyXG4gICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgfVxyXG5cclxuICBzZXRSZXNvbHV0aW9uKHJlcykge1xyXG4gICAgY29uc3QgayA9IHJlcy53aWR0aC90aGlzLnJlc1c7XHJcbiAgICB0aGlzLnJlc1cgPSByZXMud2lkdGg7XHJcbiAgICB0aGlzLnJlc0ggPSBrKnRoaXMucmVzSDsgLy8gcmVzLmhlaWdodDtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgcmVuZGVyQmxhbmtQYWdlKCkge1xyXG4gICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEodGhpcy5jb2xvciwgMSk7XHJcbiAgICB0aGlzLmN0eC5yZWN0KDAsIDAsIHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCk7XHJcbiAgICB0aGlzLmN0eC5maWxsKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJbWFnZShpbWFnZSkge1xyXG4gICAgdGhpcy5wdXNoQ3R4KCk7XHJcbiAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jLndpZHRoLCB0aGlzLmMuaGVpZ2h0KTtcclxuICAgIHRoaXMuY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XHJcbiAgICB0aGlzLnBvcEN0eCgpO1xyXG4gIH1cclxuXHJcbiAgbm9ybVRvQ29udihwKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiBwLngqdGhpcy5jLndpZHRoLFxyXG4gICAgICB5OiAoMS1wLnkpKnRoaXMuYy5oZWlnaHRcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZW5kZXJIaXQocG9seSkge1xyXG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwwLDAuNCknO1xyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgbGV0IHAgPSB0aGlzLm5vcm1Ub0NvbnYocG9seVswXSk7XHJcbiAgICBjdHgubW92ZVRvKHAueCwgcC55KTtcclxuICAgIGZvcihsZXQgaT0xOyBpPHBvbHkubGVuZ3RoOyArK2kpIHtcclxuICAgICAgcCA9IHRoaXMubm9ybVRvQ29udihwb2x5W2ldKTtcclxuICAgICAgY3R4LmxpbmVUbyhwLngsIHAueSk7XHJcbiAgICB9XHJcbiAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICBjdHguZmlsbCgpO1xyXG4gIH1cclxuXHJcbiAgcHVzaEN0eCgpIHtcclxuICAgIGlmKE1hdGguYWJzKHRoaXMucmVzVy10aGlzLmMud2lkdGgpPj0xKSB7XHJcbiAgICAgIHRoaXMuYy53aWR0aCA9IHRoaXMucmVzVztcclxuICAgIH1cclxuICAgIGlmKE1hdGguYWJzKHRoaXMucmVzSC10aGlzLmMuaGVpZ2h0KT49MSkge1xyXG4gICAgICB0aGlzLmMuaGVpZ2h0ID0gdGhpcy5yZXNIO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jdHguc2F2ZSgpO1xyXG4gICAgdGhpcy5jdHguc2NhbGUodGhpcy5jLndpZHRoL3RoaXMud2lkdGgsIHRoaXMuYy5oZWlnaHQvdGhpcy5oZWlnaHQpO1xyXG4gICAgcmV0dXJuIHRoaXMuY3R4O1xyXG4gIH1cclxuXHJcbiAgcG9wQ3R4KCkge1xyXG4gICAgdGhpcy5jdHgucmVzdG9yZSgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTm90Rm91bmRQYWdlKCkge1xyXG4gICAgdGhpcy5yZW5kZXJCbGFua1BhZ2UoKTtcclxuICB9XHJcblxyXG4gIGZpbmlzaFJlbmRlcigpIHtcclxuICAgIGlmKHRoaXMub25DaGFuZ2UpIHtcclxuICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLmMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZmluaXNoTG9hZCgpIHtcclxuICAgIGlmKHRoaXMub25Mb2FkKSB7XHJcbiAgICAgIHRoaXMub25Mb2FkKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5zdGFydFJlbmRlcigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0U2ltdWxhdGVkRG9jKCkge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0ltYWdlQmFzZS5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIC8vIHZpcnR1YWxzXHJcbiAgLy8gZ2V0T2JqZWN0KGUsIGRhdGEpO1xyXG4gIC8vIGdldENhbGxiYWNrKG9iamVjdCk7XHJcbiAgLy8gdGVzdChvYmplY3QxLCBvYmplY3QxKTtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MpIHtcclxuICAgIHRoaXMud25kID0gd25kO1xyXG4gICAgdGhpcy5kb2MgPSBkb2M7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgc2V0RW5hYmxlKHZsKSB7XHJcbiAgICBpZighdmwpIHtcclxuICAgICAgaWYodGhpcy5tQ2FwT2JqZWN0KSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnkodGhpcy5tQ2FwT2JqZWN0LCAkLkV2ZW50KCdtb3VzZXVwJyksICdtb3VzZXVwJyk7XHJcbiAgICAgICAgdGhpcy5tQ2FwT2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHRoaXMubUhvdk9iamVjdCkge1xyXG4gICAgICAgIHRoaXMubm90aWZ5KHRoaXMubUhvdk9iamVjdCwgJC5FdmVudCgnbW91c2VvdXQnKSwgJ21vdXNlb3V0Jyk7XHJcbiAgICAgICAgdGhpcy5tSG92T2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmVuYWJsZWQgPSB2bDtcclxuICB9XHJcblxyXG4gIGdldENhbGxiYWNrKG9iamVjdCkge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcblxyXG4gIG5vdGlmeShvYmplY3QsIGUsIHR5cGUpIHtcclxuICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5nZXRDYWxsYmFjayhvYmplY3QpO1xyXG4gICAgaWYoY2FsbGJhY2spIHtcclxuICAgICAgY29uc3QgcHJvcHMgPSB7XHJcbiAgICAgICAgLi4uZSxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHZpZXc6IHRoaXMud25kXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGpFID0gJC5FdmVudCh0eXBlLCBwcm9wcyk7XHJcbiAgICAgIGNhbGxiYWNrKGpFLCBvYmplY3QpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udmVydChlLCBkYXRhKSB7XHJcbiAgICBpZighdGhpcy5lbmFibGVkKSByZXR1cm47XHJcblxyXG4gICAgaWYodGhpcy5maWx0ZXIpIHtcclxuICAgICAgZSA9IHRoaXMuZmlsdGVyKHRoaXMuZWxlbWVudCwgZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5nZXRPYmplY3QoZSwgZGF0YSksXHJcbiAgICAgIG5vdGlmeSA9IH5lLnR5cGUuaW5kZXhPZigndG91Y2gnKT8gdGhpcy5jb252ZXJ0VG91Y2goZSwgZGF0YSwgb2JqZWN0KTogdGhpcy5jb252ZXJ0TW91c2UoZSwgZGF0YSwgb2JqZWN0KTtcclxuICAgIGlmKG5vdGlmeSAmJiBvYmplY3QpIHtcclxuICAgICAgdGhpcy5ub3RpZnkob2JqZWN0LCBlLCBlLnR5cGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udmVydFRvdWNoKGUsIGRhdGEsIG9iamVjdCkge1xyXG4gICAgbGV0IG5vdGlmeSA9IHRydWU7XHJcbiAgICBzd2l0Y2goZS50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ3RvdWNoc3RhcnQnOiB7XHJcbiAgICAgICAgaWYodGhpcy50Q2FwT2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLnRDYXBPYmplY3QsIGUsICd0b3VjaGVuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnRDYXBPYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAndG91Y2hlbmQnOiB7XHJcbiAgICAgICAgaWYodGhpcy50Q2FwT2JqZWN0ICYmICF0aGlzLnRlc3QodGhpcy50Q2FwT2JqZWN0LCBvYmplY3QpKSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLnRDYXBPYmplY3QsIGUsICd0b3VjaGVuZCcpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYob2JqZWN0ICYmIHRoaXMudGVzdCh0aGlzLnRDYXBPYmplY3QsIG9iamVjdCkpIHtcclxuICAgICAgICAgIHRoaXMubm90aWZ5KG9iamVjdCwgZSwgJ3RvdWNodGFwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudENhcE9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICd0b3VjaHRhcCc6IHtcclxuICAgICAgICBub3RpZnkgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vdGlmeTtcclxuICB9XHJcblxyXG4gIGNvbnZlcnRNb3VzZShlLCBkYXRhLCBvYmplY3QpIHtcclxuICAgIGxldCBub3RpZnkgPSB0cnVlO1xyXG4gICAgc3dpdGNoKGUudHlwZSkge1xyXG4gICAgICBjYXNlICdtb3VzZWRvd24nOiB7XHJcbiAgICAgICAgaWYodGhpcy5tQ2FwT2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1DYXBPYmplY3QsIGUsICdtb3VzZXVwJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubUNhcE9iamVjdCA9IG9iamVjdDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZXVwJzoge1xyXG4gICAgICAgIGlmKHRoaXMubUNhcE9iamVjdCAmJiAhdGhpcy50ZXN0KHRoaXMubUNhcE9iamVjdCwgb2JqZWN0KSkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy5tQ2FwT2JqZWN0LCBlLCAnbW91c2V1cCcpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2NsaWNrJzoge1xyXG4gICAgICAgIG5vdGlmeSA9IHRoaXMudGVzdCh0aGlzLm1DYXBPYmplY3QsIG9iamVjdCk7XHJcbiAgICAgICAgdGhpcy5tQ2FwT2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNlZW50ZXInOlxyXG4gICAgICBjYXNlICdtb3VzZW92ZXInOlxyXG4gICAgICBjYXNlICdtb3VzZW1vdmUnOiB7XHJcbiAgICAgICAgaWYoIXRoaXMudGVzdCh0aGlzLm1Ib3ZPYmplY3QsIG9iamVjdCkgJiYgdGhpcy5tSG92T2JqZWN0KSB7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeSh0aGlzLm1Ib3ZPYmplY3QsIGUsICdtb3VzZW91dCcpO1xyXG4gICAgICAgICAgdGhpcy5tSG92T2JqZWN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighdGhpcy5tSG92T2JqZWN0ICYmIG9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkob2JqZWN0LCBlLCAnbW91c2VvdmVyJyk7XHJcbiAgICAgICAgICB0aGlzLm1Ib3ZPYmplY3QgPSBvYmplY3Q7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5vdGlmeSA9IGUudHlwZSA9PT0gJ21vdXNlbW92ZSc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnbW91c2VsZWF2ZSc6XHJcbiAgICAgIGNhc2UgJ21vdXNlb3V0Jzoge1xyXG4gICAgICAgIGlmKHRoaXMubUhvdk9iamVjdCkge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnkodGhpcy5tSG92T2JqZWN0LCBlLCAnbW91c2VvdXQnKTtcclxuICAgICAgICAgIHRoaXMubUhvdk9iamVjdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbm90aWZ5ID0gZmFsc2U7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBub3RpZnk7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9FdmVudENvbnZlcnRlci5qcyIsImltcG9ydCBDYWNoZSBmcm9tICcuL0NhY2hlJztcclxuaW1wb3J0IEJsYW5rSW1hZ2UgZnJvbSAnLi9CbGFua0ltYWdlJztcclxuaW1wb3J0IFN0YXRpY0ltYWdlIGZyb20gJy4vU3RhdGljSW1hZ2UnO1xyXG5pbXBvcnQgUGRmSW1hZ2UgZnJvbSAnLi9QZGZJbWFnZSc7XHJcbmltcG9ydCBJbnRlcmFjdGl2ZUltYWdlIGZyb20gJy4vSW50ZXJhY3RpdmVJbWFnZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZUZhY3Rvcnkge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYWNoZSkge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMuY2FjaGUgPSBjYWNoZSB8fCBuZXcgQ2FjaGUoKTtcclxuICB9XHJcblxyXG4gIGJ1aWxkKGluZm8sIG49MCwgd2lkdGhUZXhlbHM9MjEwLCBoZWlnaHRUZXhlbHM9Mjk3LCBjb2xvcj0weEZGRkZGRiwgaW5qZWN0b3I9dW5kZWZpbmVkKSB7XHJcbiAgICBsZXQgaW1hZ2U7XHJcbiAgICBzd2l0Y2goaW5mby50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ2h0bWwnOiB7XHJcbiAgICAgICAgaW1hZ2UgPSBuZXcgSW50ZXJhY3RpdmVJbWFnZSh0aGlzLmNvbnRleHQsIHdpZHRoVGV4ZWxzLCBoZWlnaHRUZXhlbHMsIGNvbG9yLCBpbmZvLnNyYywgdGhpcy5jYWNoZSwgaW5qZWN0b3IpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2ltYWdlJzoge1xyXG4gICAgICAgIGltYWdlID0gbmV3IFN0YXRpY0ltYWdlKHRoaXMuY29udGV4dCwgd2lkdGhUZXhlbHMsIGhlaWdodFRleGVscywgY29sb3IsIGluZm8uc3JjKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdwZGYnOiB7XHJcbiAgICAgICAgaW1hZ2UgPSBuZXcgUGRmSW1hZ2UodGhpcy5jb250ZXh0LCB3aWR0aFRleGVscywgaGVpZ2h0VGV4ZWxzLCBjb2xvciwgaW5mby5zcmMsIG4pO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2JsYW5rJzpcclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIGltYWdlID0gbmV3IEJsYW5rSW1hZ2UodGhpcy5jb250ZXh0LCB3aWR0aFRleGVscywgaGVpZ2h0VGV4ZWxzLCBjb2xvcik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpbWFnZTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvSW1hZ2VGYWN0b3J5LmpzIiwiaW1wb3J0IHtwcm9wcyBhcyAgYm9va1Byb3BzfSBmcm9tICcuLi9wcm9wcy9ib29rJztcclxuaW1wb3J0IEJhc2VNYXRoVXRpbHMgZnJvbSAnQmFzZU1hdGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rUHJvcHNCdWlsZGVyIHtcclxuICBjb25zdHJ1Y3RvcihvblJlYWR5LCBzdHlsZSkge1xyXG4gICAgdGhpcy5vblJlYWR5ID0gb25SZWFkeTtcclxuICAgIHRoaXMuZGVmYXVsdHMgPSBib29rUHJvcHMoc3R5bGUpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBjYWxjU2l6ZSh3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICBjb25zdCBzY2FsZSA9IEJhc2VNYXRoVXRpbHMuY2FsY1NjYWxlKHdpZHRoLCBoZWlnaHQsIHRoaXMuZGVmYXVsdHMud2lkdGgsIHRoaXMuZGVmYXVsdHMuaGVpZ2h0KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoOiBzY2FsZSp3aWR0aCxcclxuICAgICAgaGVpZ2h0OiBzY2FsZSpoZWlnaHRcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYWxjVGV4ZWxzKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIGNvbnN0IHNoZWV0ID0gdGhpcy5kZWZhdWx0cy5zaGVldCwgc2NhbGUgPSBCYXNlTWF0aFV0aWxzLmNhbGNTY2FsZSh3aWR0aCwgaGVpZ2h0LCBzaGVldC53aWR0aFRleGVscywgc2hlZXQuaGVpZ2h0VGV4ZWxzKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHdpZHRoVGV4ZWxzOiBzY2FsZSp3aWR0aCxcclxuICAgICAgaGVpZ2h0VGV4ZWxzOiBzY2FsZSpoZWlnaHRcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYWxjUHJvcHMod2lkdGgsIGhlaWdodCkge1xyXG4gICAgdGhpcy5wcm9wcyA9IHtcclxuICAgICAgLi4udGhpcy5kZWZhdWx0cyxcclxuICAgICAgcGFnZXM6IHRoaXMucGFnZXMsXHJcbiAgICAgIC4uLnRoaXMuY2FsY1NpemUod2lkdGgsIGhlaWdodCksXHJcbiAgICAgIHNoZWV0OiB7XHJcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0cy5zaGVldCxcclxuICAgICAgICAuLi50aGlzLmNhbGNUZXhlbHMod2lkdGgsIGhlaWdodClcclxuICAgICAgfSxcclxuICAgICAgY292ZXI6IHtcclxuICAgICAgICAuLi50aGlzLmRlZmF1bHRzLmNvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0cy5wYWdlLFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FsY1NoZWV0cyhwYWdlcykge1xyXG4gICAgcmV0dXJuIHRoaXMuc2hlZXRzID0gTWF0aC5jZWlsKE1hdGgubWF4KDAsIHBhZ2VzLTQpLzIpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2hlZXRzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2hlZXRzO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wcztcclxuICB9XHJcblxyXG4gIGdldFBhZ2VDYWxsYmFjaygpIHtcclxuICAgIHJldHVybiB0aGlzLmJpbmRzLnBhZ2VDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHJlYWR5KCkge1xyXG4gICAgaWYodGhpcy5vblJlYWR5KSB7XHJcbiAgICAgIHRoaXMub25SZWFkeSh0aGlzLmdldFByb3BzKCksIHRoaXMuZ2V0U2hlZXRzKCksIHRoaXMuZ2V0UGFnZUNhbGxiYWNrKCkpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tQcm9wc0J1aWxkZXIuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IHNoZWV0QmxvY2sgZnJvbSAnLi4vbW9kZWxzL3NoZWV0QmxvY2snO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJ01hdGhVdGlscyc7XHJcbmltcG9ydCBUaHJlZVV0aWxzIGZyb20gJ1RocmVlVXRpbHMnO1xyXG4vLyBpbXBvcnQgVGhyZWVNYXJrdXAgZnJvbSAnLi9UaHJlZU1hcmt1cCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGVldEJsb2NrIHtcclxuXHJcbiAgY29uc3RydWN0b3IodmlzdWFsLCBwLCBmaXJzdCwgbGFzdCwgYW5nbGU9MCwgc3RhdGU9J2Nsb3NlZCcsIGhlaWdodD0wKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgLi4ucCxcclxuICAgICAgZmlyc3QsXHJcbiAgICAgIGxhc3RcclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMuZ2V0UHJvcHMoKTtcclxuXHJcbiAgICBjb25zdCBsb2FkZWRQb2ludHMgPSB0aGlzLmxvYWRQb2ludHMoKTtcclxuICAgIE9iamVjdC5rZXlzKGxvYWRlZFBvaW50cykubWFwKChrKT0+IHtcclxuICAgICAgdGhpc1trXSA9IGxvYWRlZFBvaW50c1trXVtwcm9wcy5zaGFwZV0gfHwgbG9hZGVkUG9pbnRzW2tdWzBdO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5wU3BsaW5lID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoW10pO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8dGhpcy5pbnRlcnBvbGF0aW9uUG9pbnRzLnhbMF0ubGVuZ3RoOyArK2kpIHtcclxuICAgIFx0dGhpcy5wU3BsaW5lLnBvaW50cy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaVNwbGluZSA9IG5ldyBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzKFtdKTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHNoZWV0QmxvY2sucmVzWDsgKytpKSB7XHJcbiAgICBcdHRoaXMuaVNwbGluZS5wb2ludHMucHVzaChuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFTcGxpbmVzID0gW107XHJcblxyXG4gICAgLy90aGlzLnRocmVlID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblxyXG4gICAgdGhpcy5nZW9tZXRyeSA9IHNoZWV0QmxvY2suZ2VvbWV0cnkuY2xvbmUoKTtcclxuXHJcbiAgICB0aGlzLnAuc2lkZUZhY2VzID0gW3tcclxuICAgICAgICBmaXJzdDogMCxcclxuICAgICAgICBsYXN0OiBzaGVldEJsb2NrLmZhY2VzWzBdXHJcbiAgICAgIH0sIHtcclxuICAgICAgICBmaXJzdDogc2hlZXRCbG9jay5mYWNlc1swXSxcclxuICAgICAgICBsYXN0OiBzaGVldEJsb2NrLmZhY2VzWzFdXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgdGhpcy5zaWRlVGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKCk7XHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlLndyYXBUID0gVEhSRUUuUmVwZWF0V3JhcHBpbmc7XHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlLnJlcGVhdC5zZXQoMCwgbGFzdC1maXJzdCk7XHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlLmltYWdlID0gcHJvcHMuc2lkZVRleHR1cmU7XHJcbiAgICB0aGlzLnNpZGVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLm1hdGVyaWFscyA9IFtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdGhpcy5zaWRlVGV4dHVyZX0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7bWFwOiB0aGlzLnNpZGVUZXh0dXJlfSksXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKHttYXA6IHRoaXMuc2lkZVRleHR1cmV9KSxcclxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdGhpcy5zaWRlVGV4dHVyZX0pXHJcbiAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMF0sIDIqZmlyc3QpO1xyXG4gICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMV0sIDIqbGFzdC0xKTtcclxuXHJcbiAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFscyk7XHJcbiAgICB0aGlzLm1lc2guY2FzdFNoYWRvdyA9IGZhbHNlO1xyXG4gICAgdGhpcy5tZXNoLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcclxuICAgIC8vIHRoaXMubWVzaC5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcclxuXHJcbiAgICAvL3RoaXMudGhyZWUuYWRkKHRoaXMubWVzaCk7XHJcbiAgICB0aGlzLnRocmVlID0gdGhpcy5tZXNoO1xyXG4gICAgdGhpcy50aHJlZS51c2VyRGF0YS5zZWxmID0gdGhpcztcclxuXHJcbiAgICB0aGlzLm1hcmtlcnMgPSBbXTtcclxuICAgIGlmKHRoaXMucC5tYXJrZXIudXNlKSB7XHJcbiAgICAgIGNvbnN0IGw9dGhpcy5nZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGg7XHJcbiAgICAgIGxldCBpcztcclxuICAgICAgLy8gaXMgPSBbMCwgc2hlZXRCbG9jay5yZXNYLTEsIChzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYLCBzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTFdO1xyXG4gICAgICBpcyA9IEFycmF5LmFwcGx5KDAsIEFycmF5KGwpKS5tYXAoKF8sIGkpPT4gaSk7XHJcblxyXG4gICAgICBmb3IobGV0IGkgb2YgaXMpIHtcclxuICAgICAgICBjb25zdCBtYXJrZXIgPSBUaHJlZVV0aWxzLmNyZWF0ZU1hcmtlcih0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW2ldLCBpPGwvMj8weEZGMDAwMDoweDAwRkYwMCwgdGhpcy5wLm1hcmtlci5zaXplKTtcclxuICAgICAgICB0aGlzLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICBtYXJrZXIsXHJcbiAgICAgICAgICB2ZXJ0ZXg6IGlcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRocmVlLmFkZChtYXJrZXIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jb3JuZXIgPSB7XHJcbiAgICAgIHVzZTogdHJ1ZSxcclxuICAgICAgaGVpZ2h0OiAwLFxyXG4gICAgICBtYXhEaXN0YW5jZTogMCxcclxuICAgICAgcG9pbnRzOiBbXSxcclxuICAgICAgT1o6IG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwxKSxcclxuICAgICAgYXhpczogbmV3IFRIUkVFLlZlY3RvcjMoKVxyXG4gICAgfTtcclxuICAgIHRoaXMuc2V0KDAsICdjbG9zZWQnLCBoZWlnaHQsIGZpcnN0LCBsYXN0KTsgLy8gY2FsY3VsYXRlIGNvcm5lciBwb2ludHNcclxuXHJcbiAgICB0aGlzLnNldChhbmdsZSwgc3RhdGUsIGhlaWdodCwgZmlyc3QsIGxhc3QpOyAvLyBpbml0IHBvc2l0aW9uXHJcblxyXG4gICAgLy8gaWYoIVNoZWV0QmxvY2subWFya3VwKSB7XHJcbiAgICAvLyAgIFNoZWV0QmxvY2subWFya3VwPXRydWU7XHJcbiAgICAvLyAgIHRoaXMubWFya3VwID0gbmV3IFRocmVlTWFya3VwKHRoaXMsIDAsIFt7XHJcbiAgICAvLyAgICAgeDogMCxcclxuICAgIC8vICAgICB5OiAwLFxyXG4gICAgLy8gICB9LCB7XHJcbiAgICAvLyAgICAgeDogMC41LFxyXG4gICAgLy8gICAgIHk6IDFcclxuICAgIC8vICAgfSwge1xyXG4gICAgLy8gICAgIHg6IDEsXHJcbiAgICAvLyAgICAgeTogMFxyXG4gICAgLy8gICB9XS5tYXAoKHApPT5uZXcgVEhSRUUuVmVjdG9yMihwLngsIHAueSkpLCB7fSk7XHJcbiAgICAvLyB9XHJcblxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGZvcihsZXQgbSBvZiB0aGlzLm1hdGVyaWFscykge1xyXG4gICAgICBpZihtLm1hcCkge1xyXG4gICAgICAgIG0ubWFwID0gbnVsbDtcclxuICAgICAgICBtLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICBtLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLm1hdGVyaWFscztcclxuICAgIHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2l6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLnAubGFzdC10aGlzLnAuZmlyc3Q7XHJcbiAgfVxyXG5cclxuICBnZXRQcm9wcygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC4uLnRoaXMucC5wYWdlLFxyXG4gICAgICBzaGVldHM6IHRoaXMucC5zaGVldHNcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRUb3BDZXJuZXJzKCkge1xyXG4gICAgY29uc3Qgb2ZmID0gdGhpcy5hbmdsZT5NYXRoLlBJLzI/IHRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoLzI6IDA7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbb2ZmXSxcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW3NoZWV0QmxvY2sucmVzWC0xK29mZl0sXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1soc2hlZXRCbG9jay5yZXNaLTEpKnNoZWV0QmxvY2sucmVzWCtvZmZdLFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbc2hlZXRCbG9jay5yZXNaKnNoZWV0QmxvY2sucmVzWC0xK29mZl1cclxuICAgICAgXTtcclxuICB9XHJcblxyXG4gIGdldFRvcFNpemUoKSB7XHJcbiAgICAvLyBjb25zdCBsPXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoLCBvZmYgPSB0aGlzLmFuZ2xlPk1hdGguUEkvMj8gbC8yOiAwLFxyXG4gICAgLy8gICB2MCA9IHRoaXMuZ2VvbWV0cnkudmVydGljZXNbb2ZmXSwgdjEgPSB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW3NoZWV0QmxvY2sucmVzWipzaGVldEJsb2NrLnJlc1gtMStvZmZdO1xyXG4gICAgLy8gLy8gaXMgPSBbMCwgc2hlZXRCbG9jay5yZXNYLTEsIChzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYLCBzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTFdO1xyXG4gICAgLy8gcmV0dXJuIHtcclxuICAgIC8vICAgd2lkdGg6IE1hdGguYWJzKHYxLngtdjAueCksXHJcbiAgICAvLyAgIGhlaWdodDogTWF0aC5hYnModjEuei12MC56KVxyXG4gICAgLy8gfTtcclxuICAgIGNvbnN0IHZzID0gdGhpcy5nZXRUb3BDZXJuZXJzKCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogdnNbMF0uZGlzdGFuY2VUbyh2c1sxXSksXHJcbiAgICAgIGhlaWdodDogdnNbMF0uZGlzdGFuY2VUbyh2c1syXSlcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRUb3BXb3JsZFJvdGF0aW9uKHEpIHtcclxuICAgIHEueCA9IC1NYXRoLlBJLzI7XHJcbiAgICByZXR1cm4gcTtcclxuICB9XHJcblxyXG4gIGdldFRvcFdvcmxkUG9zaXRpb24odikge1xyXG4gICAgY29uc3QgbD10aGlzLmdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCwgb2ZmID0gdGhpcy5hbmdsZT5NYXRoLlBJLzI/IGwvMjogMCwgdnMgPSBbXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tvZmZdLFxyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGljZXNbc2hlZXRCbG9jay5yZXNYLTErb2ZmXSxcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzWyhzaGVldEJsb2NrLnJlc1otMSkqc2hlZXRCbG9jay5yZXNYK29mZl0sXHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tzaGVldEJsb2NrLnJlc1oqc2hlZXRCbG9jay5yZXNYLTErb2ZmXVxyXG4gICAgICBdO1xyXG4gICAgdi5zZXQoMCwgMCwgMCk7XHJcbiAgICBmb3IobGV0IHZpIG9mIHZzKSB7XHJcbiAgICAgIHYueCArPSAwLjI1KnZpLng7XHJcbiAgICAgIHYueSArPSAwLjI1KnZpLnk7XHJcbiAgICAgIHYueiArPSAwLjI1KnZpLno7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRocmVlLmxvY2FsVG9Xb3JsZCh2KTtcclxuICAgIHJldHVybiB2O1xyXG4gIH1cclxuXHJcbiAgZ2V0SW50ZXJwb2xhdGlvblBvaW50cyhpbmRzLCBtb2QpIHtcclxuICAgIGNvbnN0IHBzID0ge3g6IFtdLCB5OiBbXX0sIEsgPSB0aGlzLmdldFByb3BzKCkud2F2ZTtcclxuICAgIGZvcihsZXQgaSBvZiBpbmRzKSB7XHJcbiAgICAgIHBzLngucHVzaChbLi4udGhpcy5pbnRlcnBvbGF0aW9uUG9pbnRzLnhbaV1dKTtcclxuICAgICAgcHMueS5wdXNoKH5tb2QuaW5kZXhPZihpKT8gdGhpcy5pbnRlcnBvbGF0aW9uUG9pbnRzLnlbaV0ubWFwKChuKT0+IEsqbik6IFsuLi50aGlzLmludGVycG9sYXRpb25Qb2ludHMueVtpXV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBzO1xyXG4gIH1cclxuXHJcbiAgc2V0KGFuZ2xlLCBzdGF0ZT10aGlzLnN0YXRlLCBoZWlnaHQ9dGhpcy5jb3JuZXIuaGVpZ2h0LCBmaXJzdD10aGlzLnAuZmlyc3QsIGxhc3Q9dGhpcy5wLmxhc3QpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgIGxldCBjbG9zZWRBbmdsZSwgYmluZGVyVHVybjtcclxuICAgIGlmKHR5cGVvZiBhbmdsZT09PSdvYmplY3QnKSB7XHJcbiAgICAgIHRoaXMuYW5nbGUgPSBhbmdsZS5vcGVuZWRBbmdsZTtcclxuICAgICAgY2xvc2VkQW5nbGUgPSBhbmdsZS5jbG9zZWRBbmdsZTtcclxuICAgICAgYmluZGVyVHVybiA9IGFuZ2xlLmJpbmRlclR1cm4+UEkvMj9QSS1hbmdsZS5iaW5kZXJUdXJuOmFuZ2xlLmJpbmRlclR1cm47XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jb3JuZXIuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgaWYodGhpcy5wLmZpcnN0IT09Zmlyc3QgfHwgdGhpcy5wLmxhc3QhPT1sYXN0KSB7XHJcbiAgICAgIHRoaXMuc2lkZVRleHR1cmUucmVwZWF0LnNldCgwLCBsYXN0LWZpcnN0KTtcclxuICAgICAgdGhpcy5zaWRlVGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIGlmKHRoaXMucC5maXJzdCE9PWZpcnN0KSB7XHJcbiAgICAgICAgdGhpcy5wLnNldFRleHR1cmUodGhpcy5tYXRlcmlhbHNbMF0sIDIqZmlyc3QpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHRoaXMucC5sYXN0IT09bGFzdCkge1xyXG4gICAgICAgIHRoaXMucC5zZXRUZXh0dXJlKHRoaXMubWF0ZXJpYWxzWzFdLCAyKmxhc3QtMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMucC5maXJzdCA9IGZpcnN0O1xyXG4gICAgdGhpcy5wLmxhc3QgPSBsYXN0O1xyXG4gICAgbGV0IHBvaW50cztcclxuICAgIGNvbnN0IHByb3BzID0gdGhpcy5nZXRQcm9wcygpO1xyXG4gICAgaWYodGhpcy5zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHtcclxuICAgICAgcG9pbnRzID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uUG9pbnRzKHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMsIHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLnN0YXRlID09PSAnb3BlbmVkJykge1xyXG4gICAgICBpZihjbG9zZWRBbmdsZSE9PXVuZGVmaW5lZCAmJiBNYXRoLmFicyhjbG9zZWRBbmdsZS1QSS8yKT4xZS0yKSB7XHJcbiAgICAgICAgcG9pbnRzID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uUG9pbnRzKHRoaXMuZmxhdEludGVycG9sYXRpb25JbmRlY2VzLCBbXSk7XHJcbiAgICAgICAgY29uc3QgcHMgPSB0aGlzLmdldFBvaW50c0F0QW5nbGUodGhpcy5nZXRJbnRlcnBvbGF0aW9uUG9pbnRzKHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMsIHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMpLCBjbG9zZWRBbmdsZT5QSS8yP1BJLWNsb3NlZEFuZ2xlOmNsb3NlZEFuZ2xlKTtcclxuICAgICAgICBwb2ludHMueCA9IFtwcy54LC4uLnBvaW50cy54XTtcclxuICAgICAgICBwb2ludHMueSA9IFtwcy55LC4uLnBvaW50cy55XTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhwcyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcG9pbnRzID0gdGhpcy5nZXRJbnRlcnBvbGF0aW9uUG9pbnRzKHRoaXMub3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMsIHRoaXMuY2xvc2VkSW50ZXJwb2xhdGlvbkluZGVjZXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBsZXQgaGwsIGhyLCBvZmZzZXQgPSAwLjUqcHJvcHMuc2hlZXRzKnByb3BzLmRlcHRoO1xyXG4gICAgaWYodGhpcy5zdGF0ZT09PSdjbG9zZWQnKSB7XHJcbiAgICAgIG9mZnNldCAtPSA3ZS02KnRoaXMucC5zY2FsZTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuYW5nbGU8PVBJLzIpIHtcclxuICAgICAgaGwgPSAocHJvcHMuc2hlZXRzLWZpcnN0KSpwcm9wcy5kZXB0aDtcclxuICAgICAgaHIgPSAocHJvcHMuc2hlZXRzLWxhc3QpKnByb3BzLmRlcHRoO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGhsID0gZmlyc3QqcHJvcHMuZGVwdGg7XHJcbiAgICAgIGhyID0gbGFzdCpwcm9wcy5kZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBpbkFuZ2xlID0gdGhpcy5hbmdsZT5QSS8yP1BJLXRoaXMuYW5nbGU6dGhpcy5hbmdsZSwgaEFuZ2xlID0gdGhpcy5zdGF0ZSA9PT0gJ2Nsb3NlZCc/IGluQW5nbGU6IChiaW5kZXJUdXJuPT09dW5kZWZpbmVkPyBQSS8yOiBiaW5kZXJUdXJuKTtcclxuICAgIGNvbnN0IFtsZWZ0LCByaWdodF0gPSB0aGlzLmdldFBvaW50c0F0QW5nbGVBbmRIcyhwb2ludHMsIGluQW5nbGUsIGhBbmdsZSwgW2hsL3Byb3BzLndpZHRoLCBoci9wcm9wcy53aWR0aF0pO1xyXG4gICAgaWYodGhpcy5hbmdsZT5QSS8yKSB7XHJcbiAgICAgIHRoaXMuaW52ZXJzZShsZWZ0KTtcclxuICAgICAgdGhpcy5pbnZlcnNlKHJpZ2h0KTtcclxuICAgICAgb2Zmc2V0ID0gLW9mZnNldDtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0UG9pbnRzKGxlZnQsIHJpZ2h0LCBvZmZzZXQpO1xyXG4gIH1cclxuXHJcbiAgc2V0UG9pbnRzKGxlZnQsIHJpZ2h0LCBvZmZzZXQpIHtcclxuICAgIGNvbnN0IHAgPSB0aGlzLmdldFByb3BzKCk7XHJcbiAgICBsZXQgaSA9IDA7XHJcblxyXG4gICAgY29uc3QgeXMgPSBbcmlnaHQsIGxlZnRdO1xyXG4gICAgZm9yKGxldCB5ID0gMDsgeTxzaGVldEJsb2NrLnJlc1k7ICsreSkge1xyXG4gICAgICBmb3IobGV0IHogPSAwOyB6PHNoZWV0QmxvY2sucmVzWjsgKyt6KSB7XHJcbiAgICAgICAgZm9yKGxldCB4ID0gMDsgeDxzaGVldEJsb2NrLnJlc1g7ICsreCkge1xyXG4gICAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tpKytdLnNldChcclxuICAgICAgICAgICAgeXNbeV0ueFt4XSpwLndpZHRoK29mZnNldCxcclxuICAgICAgICAgICAgeXNbeV0ueVt4XSpwLndpZHRoLFxyXG4gICAgICAgICAgICB6KnAuaGVpZ2h0LyhzaGVldEJsb2NrLnJlc1otMSktMC41KnAuaGVpZ2h0XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYoaSE9PXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoKSB7XHJcbiAgICAgIGNvbnNvbGUud2Fybignc2V0UG9pbnRzOiBiYWQgbWFwcGluZyEnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZih0aGlzLmNvcm5lci51c2UgJiYgIXRoaXMuY29ybmVyLnBvaW50cy5sZW5ndGgpIHtcclxuICAgICAgY29uc3QgcGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKSwgbm9ybWFsID0gcGxhbmUubm9ybWFsLCBwbGFuZU9mZnNldCA9ICgxLXRoaXMuZ2V0UHJvcHMoKS5mbGV4aWJsZUNvcm5lcikqTWF0aC5taW4ocC53aWR0aCwgcC5oZWlnaHQpLCBwcm9qID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICAgICAgcGxhbmUuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQobmV3IFRIUkVFLlZlY3RvcjMoLTEsMCwtMSkubm9ybWFsaXplKCksIG5ldyBUSFJFRS5WZWN0b3IzKHBsYW5lT2Zmc2V0K29mZnNldCwgMCwgMC41KnAuaGVpZ2h0KSk7XHJcbiAgICAgIGZvcihsZXQgaT0wLCBsPXRoaXMuZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoO2k8bDsrK2kpIHtcclxuICAgICAgICBwbGFuZS5wcm9qZWN0UG9pbnQodGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tpXSwgcHJvaik7XHJcbiAgICAgICAgcHJvai5zdWIodGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1tpXSk7XHJcbiAgICAgICAgaWYocHJvai54Km5vcm1hbC54K3Byb2oueSpub3JtYWwueStwcm9qLnoqbm9ybWFsLno+MCkge1xyXG4gICAgICAgICAgY29uc3QgZCA9IHByb2oubGVuZ3RoKCkvcGxhbmVPZmZzZXQ7XHJcbiAgICAgICAgICB0aGlzLmNvcm5lci5tYXhEaXN0YW5jZSA9IE1hdGgubWF4KHRoaXMuY29ybmVyLm1heERpc3RhbmNlLCBkKTtcclxuICAgICAgICAgIHRoaXMuY29ybmVyLnBvaW50cy5wdXNoKHt2ZXJ0ZXg6IGksIGRpc3RhbmNlOiBkfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYodGhpcy5jb3JuZXIudXNlICYmIE1hdGguYWJzKHRoaXMuY29ybmVyLmhlaWdodCk+MWUtMykge1xyXG4gICAgICBjb25zdCBkMkFuZ2xlID0gKGQpPT4gcC5jb3JuZXJEZXZpYXRpb24qdGhpcy5jb3JuZXIuaGVpZ2h0LygxK01hdGguZXhwKC1wLmJlbmRpbmcqKGQtMC41KnRoaXMuY29ybmVyLm1heERpc3RhbmNlKSkpO1xyXG4gICAgICB0aGlzLmNvcm5lci5heGlzLnNldCgtMSwwLDEpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICB0aGlzLmNvcm5lci5heGlzLmFwcGx5QXhpc0FuZ2xlKHRoaXMuY29ybmVyLk9aLCB0aGlzLmFuZ2xlKTtcclxuICAgICAgZm9yKGxldCBwb2ludCBvZiB0aGlzLmNvcm5lci5wb2ludHMpIHtcclxuICAgICAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzW3BvaW50LnZlcnRleF0uYXBwbHlBeGlzQW5nbGUodGhpcy5jb3JuZXIuYXhpcywgZDJBbmdsZShwb2ludC5kaXN0YW5jZSkpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3IobGV0IG0gb2YgdGhpcy5tYXJrZXJzKSB7XHJcbiAgICAgIG0ubWFya2VyLnBvc2l0aW9uLmNvcHkodGhpcy5nZW9tZXRyeS52ZXJ0aWNlc1ttLnZlcnRleF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ2VvbWV0cnkuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtcclxuICAgIC8vdGhpcy5nZW9tZXRyeS5jb21wdXRlRmFjZU5vcm1hbHMoKTtcclxuICAgIHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XHJcbiAgICAvL3RoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XHJcbiAgICB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9IHRydWU7XHJcblxyXG4gICAgaWYodGhpcy5tYXJrdXApIHtcclxuICAgICAgdGhpcy5tYXJrdXAuY29tcHV0ZVZlcnRpY2VzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbnZlcnNlKHBzKSB7XHJcbiAgICBmb3IobGV0IGkgPSAwO2k8cHMueC5sZW5ndGg7ICsraSkge1xyXG4gICAgICBwcy54W2ldPS1wcy54W2ldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBzO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9pbnRzQXRIcyhwcywgYW5nbGUsIGhzKSB7XHJcbiAgICBjb25zdCBOID0gMTAwMDtcclxuICAgIE1hdGhVdGlscy5zZXRTcGxpbmVQb2ludHModGhpcy5wU3BsaW5lLCBwcyk7XHJcbiAgICBsZXQgYmwgPSBNYXRoVXRpbHMuc3BsaXRTcGxpbmUodGhpcy5wU3BsaW5lLCBOKSwgcj1bXTtcclxuICAgIHtcclxuICAgICAgY29uc3QgcDEgPSB7Li4udGhpcy5wU3BsaW5lLmdldFBvaW50KChOLTEpL04pfSwgcDIgPSB7Li4udGhpcy5wU3BsaW5lLmdldFBvaW50KDEpfSxcclxuICAgICAgICBkcCA9IHt4OiBwMi54LXAxLngsIHk6IHAyLnktcDEueX0sIGxuID0gTWF0aC5zcXJ0KGRwLngqZHAueCtkcC55KmRwLnkpLFxyXG4gICAgICAgIHNwID0gdGhpcy5wU3BsaW5lLnBvaW50c1t0aGlzLnBTcGxpbmUucG9pbnRzLmxlbmd0aC0xXTtcclxuICAgICAgc3Auc2V0KHNwLngrMC4xKmRwLngvbG4sIHNwLnkrMC4xKmRwLnkvbG4sIDApO1xyXG4gICAgICBibCA9IE1hdGhVdGlscy5zcGxpdFNwbGluZSh0aGlzLnBTcGxpbmUsIE4pO1xyXG4gICAgfVxyXG4gICAgYmwubHMucHVzaCgxZTcpO1xyXG4gICAgTWF0aFV0aWxzLm1hcGwyTChibC5scywgYmwubGVuLCBzaGVldEJsb2NrLnJlc1gsIChpKT0+IHtcclxuICAgICAgZm9yKGxldCBqPTA7IGo8aHMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBpZighaSkge1xyXG4gICAgICAgICAgcltqXSA9IHt4OiBbLWhzW2pdKk1hdGguc2luKGFuZ2xlKV0sIHk6IFtoc1tqXSpNYXRoLmNvcyhhbmdsZSldfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBwMCA9IHsuLi50aGlzLnBTcGxpbmUuZ2V0UG9pbnQoKGktMSkvTil9LFxyXG4gICAgICAgICAgICAgICAgcDEgPSB0aGlzLnBTcGxpbmUuZ2V0UG9pbnQoaS9OKSxcclxuICAgICAgICAgICAgICAgIHg9LShwMS55LXAwLnkpLCB5PShwMS54LXAwLngpLCBsPU1hdGguc3FydCh4KngreSp5KTtcclxuICAgICAgICAgIHJbal0ueC5wdXNoKHAxLngreC9sKmhzW2pdKTtcclxuICAgICAgICAgIHJbal0ueS5wdXNoKHAxLnkreS9sKmhzW2pdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IG5wcz1bXTtcclxuICAgIGZvcihsZXQgaj0wOyBqPGhzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgIG5wc1tqXT17eDpbXSx5OltdfTtcclxuICAgICAgTWF0aFV0aWxzLnNldFNwbGluZVBvaW50cyh0aGlzLmlTcGxpbmUsIHJbal0pO1xyXG4gICAgICBjb25zdCBsID0gTWF0aFV0aWxzLnNwbGl0U3BsaW5lKHRoaXMuaVNwbGluZSwgTik7XHJcbiAgICAgIGwubHMucHVzaCgxZTcpO1xyXG4gICAgICBNYXRoVXRpbHMubWFwbDJMKGwubHMsIDEsIHNoZWV0QmxvY2sucmVzWCwgKGkpPT4ge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLmlTcGxpbmUuZ2V0UG9pbnQoaS9OKTtcclxuICAgICAgICBucHNbal0ueC5wdXNoKHAueCk7XHJcbiAgICAgICAgbnBzW2pdLnkucHVzaChwLnkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBucHM7XHJcbiAgfVxyXG5cclxuICBnZXRQb2ludHNBdEFuZ2xlQW5kSHMocG9pbnRzLCBhbmdsZSwgaEFuZ2xlLCBocykge1xyXG4gICAgY29uc3QgcHMgPSB0aGlzLmdldFBvaW50c0F0QW5nbGUocG9pbnRzLCBhbmdsZSk7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRQb2ludHNBdEhzKHBzLCBoQW5nbGUsIGhzKTtcclxuICB9XHJcblxyXG4gIGdldFBvaW50c0F0QW5nbGUocG9pbnRzLCBhbmdsZSkge1xyXG4gICAgY29uc3QgcHM9e3g6IFtdLCB5OltdfSwgYW5nbGVzPVtdO1xyXG4gICAgYW5nbGUvPU1hdGguUEkvMjtcclxuICAgIGZvcihsZXQgaiA9IDA7IGo8cG9pbnRzLngubGVuZ3RoOyArK2opIHtcclxuICAgICAgYW5nbGVzLnB1c2goai8ocG9pbnRzLngubGVuZ3RoLTEpKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgaSA9IDA7IGk8cG9pbnRzLnhbMF0ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgeHBzID0gW10sIHlwcyA9IFtdO1xyXG4gICAgICBmb3IobGV0IGogPSAwOyBqPHBvaW50cy54Lmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgeHBzLnB1c2gocG9pbnRzLnhbal1baV0pO1xyXG4gICAgICAgIHlwcy5wdXNoKHBvaW50cy55W2pdW2ldKTtcclxuICAgICAgfVxyXG4gICAgICBwcy54LnB1c2godGhpcy5pbnRlcnBvbGF0ZShhbmdsZXMseHBzLGFuZ2xlKSk7XHJcbiAgICAgIHBzLnkucHVzaCh0aGlzLmludGVycG9sYXRlKGFuZ2xlcyx5cHMsYW5nbGUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcztcclxuICB9XHJcblxyXG4gIGludGVycG9sYXRlKHgseSx4aSkge1xyXG4gICAgaWYoIXRoaXMuYVNwbGluZXNbeC5sZW5ndGhdKSB7XHJcbiAgICAgIHRoaXMuYVNwbGluZXNbeC5sZW5ndGhdID0gbmV3IFRIUkVFLkNhdG11bGxSb21DdXJ2ZTMoW10pO1xyXG4gICAgICBjb25zdCBwcyA9IHRoaXMuYVNwbGluZXNbeC5sZW5ndGhdLnBvaW50cztcclxuICAgICAgZm9yKGxldCBpPTA7aTx4Lmxlbmd0aDsrK2kpIHtcclxuICAgICAgICBwcy5wdXNoKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBzcGxpbmUgPSB0aGlzLmFTcGxpbmVzW3gubGVuZ3RoXTtcclxuICAgIGZvcihsZXQgaT0wO2k8eC5sZW5ndGg7KytpKSB7XHJcbiAgICAgIHNwbGluZS5wb2ludHNbaV0uc2V0KHhbaV0sIHlbaV0sIDApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNwbGluZS5nZXRQb2ludChNYXRoLm1pbigxLCBNYXRoLm1heCh4aSwgMCkpKS55O1xyXG4gIH1cclxuXHJcbiAgbG9hZFBvaW50cygpIHtcclxuICAgIGNvbnN0IHg9W10seT1bXTtcclxuICAgIGZvcihsZXQgciBvZiBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSkge1xyXG4gICAgICB4LnB1c2gocipNYXRoLmNvcygwLjkqTWF0aC5QSS80KSk7XHJcbiAgICAgIHkucHVzaChyKk1hdGguc2luKDAuOSpNYXRoLlBJLzQpKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IG9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbMiwzLDRdLFxyXG4gICAgICBbMiwzLDQsNSw2XVxyXG4gICAgXSxcclxuICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbMCwxLDJdLFxyXG4gICAgICBbMCwxLDJdXHJcbiAgICBdLFxyXG4gICAgZmxhdEludGVycG9sYXRpb25JbmRlY2VzID0gW1xyXG4gICAgICBbNSw0XSxcclxuICAgICAgWzcsNl1cclxuICAgIF0sXHJcbiAgICBpbnRlcnBvbGF0aW9uUG9pbnRzID0gW1xyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgWzAsMC4yODc3LDAuNjM0NywwLjgxNzQsMS4wMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI4NiwwLjYzMiwwLjgxNSwwLjk5N10sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yNzksMC42MjMsMC44MDYsMC45ODhdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMTI2LDAuNDExLDAuNTkzLDAuNzc0XSxcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgeFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgeTogW1xyXG4gICAgICAgICAgWzAsMCwwLDAsMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4wMzAsMC4wMTAsMC4wMDIsMC4wMDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMDYwLDAuMDE3LDAuMDA0LDAuMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI1OSwwLjQ0MCwwLjQ0NiwwLjQyOV0sXHJcbiAgICAgICAgICBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSxcclxuICAgICAgICAgIHlcclxuICAgICAgICBdXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB4OiBbXHJcbiAgICAgICAgICBbMCwwLjI4NzcsMC42MzQ3LDAuODE3NCwxLjAwMDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMjg2LDAuNjMyLDAuODE1LDAuOTk3XSxcclxuICAgICAgICAgIFswLjAwMCwwLjI3OSwwLjYyMywwLjgwNiwwLjk4OF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4yMzMsMC41NjMsMC43NDYsMC45MjddLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMTQ0LDAuNDMzLDAuNjEzLDAuNzk2XSxcclxuICAgICAgICAgIFswLjAwMCwwLjA3MCwwLjI4OCwwLjQ1NSwwLjYyNl0sXHJcbiAgICAgICAgICBbMCwwLDAsMCwwXSxcclxuICAgICAgICAgIHhcclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMDMwLDAuMDEwLDAuMDAyLDAuMDAwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjA2MCwwLjAxNywwLjAwNCwwLjAwMF0sXHJcbiAgICAgICAgICBbMC4wMDAsMC4xNjgsMC4yNjksMC4yNzAsMC4yNTVdLFxyXG4gICAgICAgICAgWzAuMDAwLDAuMjQ1LDAuNDM1LDAuNDU4LDAuNDYwXSxcclxuICAgICAgICAgIFswLjAwMCwwLjI3OCwwLjU0NCwwLjYxNCwwLjY3M10sXHJcbiAgICAgICAgICBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXSxcclxuICAgICAgICAgIHlcclxuICAgICAgICBdXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaW50ZXJwb2xhdGlvblBvaW50cyxcclxuICAgICAgb3BlbmVkSW50ZXJwb2xhdGlvbkluZGVjZXMsXHJcbiAgICAgIGNsb3NlZEludGVycG9sYXRpb25JbmRlY2VzLFxyXG4gICAgICBmbGF0SW50ZXJwb2xhdGlvbkluZGVjZXNcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvU2hlZXRCbG9jay5qcyIsIlxyXG5leHBvcnQgZnVuY3Rpb24gcHJvcHMoc3R5bGUgPSAndm9sdW1lJykge1xyXG4gIC8vIGNvbnN0IHByb3BzID0ge1xyXG4gIC8vICAgaGVpZ2h0LFxyXG4gIC8vICAgd2lkdGgsXHJcbiAgLy8gICBncmF2aXR5LFxyXG4gIC8vICAgaW5qZWN0b3IsXHJcbiAgLy8gICBjYWNoZWRQYWdlcyxcclxuICAvLyAgIHJlbmRlckluYWN0aXZlUGFnZXMsXHJcbiAgLy8gICByZW5kZXJXaGlsZUZsaXBwaW5nLFxyXG4gIC8vICAgcGFnZXNGb3JQcmVkaWN0aW5nLFxyXG4gIC8vICAgcHJlbG9hZFBhZ2VzLFxyXG4gIC8vICAgc2hlZXQ6IHtcclxuICAvLyAgICAgc3RhcnRWZWxvY2l0eSxcclxuICAvLyAgICAgY29ybmVyRGV2aWF0aW9uLFxyXG4gIC8vICAgICBmbGV4aWJpbGl0eSxcclxuICAvLyAgICAgZmxleGlibGVDb3JuZXIsXHJcbiAgLy8gICAgIGJlbmRpbmcsXHJcbiAgLy8gICAgIHdhdmUsXHJcbiAgLy8gICAgIHNoYXBlLFxyXG4gIC8vICAgICB3aWR0aFRleGVscyxcclxuICAvLyAgICAgaGVpZ2h0VGV4ZWxzLFxyXG4gIC8vICAgICBjb2xvcixcclxuICAvLyAgICAgc2lkZVRleHR1cmVcclxuICAvLyAgIH0sXHJcbiAgLy8gICBjb3Zlcjoge1xyXG4gIC8vICAgICAuLi5zaGVldCxcclxuICAvLyAgICAgcGFkZGluZyxcclxuICAvLyAgICAgYmluZGVyVGV4dHVyZSxcclxuICAvLyAgICAgZGVwdGgsXHJcbiAgLy8gICAgIG1hc3NcclxuICAvLyAgIH0sXHJcbiAgLy8gICBwYWdlOiB7XHJcbiAgLy8gICAgIC4uLnNoZWV0LFxyXG4gIC8vICAgICBkZXB0aCxcclxuICAvLyAgICAgbWFzc1xyXG4gIC8vICAgfVxyXG4gIC8vIH07XHJcblxyXG4gIGNvbnN0IGRlZiA9IHtcclxuICAgIGhlaWdodDogMC4yOTcsXHJcbiAgICB3aWR0aDogMC4yMSxcclxuICAgIGdyYXZpdHk6IDEsXHJcbiAgICBjYWNoZWRQYWdlczogNTAsXHJcbiAgICByZW5kZXJJbmFjdGl2ZVBhZ2VzOiB0cnVlLFxyXG4gICAgcmVuZGVySW5hY3RpdmVQYWdlc09uTW9iaWxlOiB0cnVlLFxyXG4gICAgcmVuZGVyV2hpbGVGbGlwcGluZzogZmFsc2UsXHJcbiAgICBwYWdlc0ZvclByZWRpY3Rpbmc6IDUsXHJcbiAgICBwcmVsb2FkUGFnZXM6IDUsXHJcbiAgICBydGw6IGZhbHNlLFxyXG4gICAgaW50ZXJhY3RpdmVDb3JuZXJzOiB0cnVlLFxyXG4gICAgc2hlZXQ6IHtcclxuICAgICAgc3RhcnRWZWxvY2l0eTogMS4xLFxyXG4gICAgICBjb3JuZXJEZXZpYXRpb246IDAuMjUsXHJcbiAgICAgIGZsZXhpYmlsaXR5OiAxMCxcclxuICAgICAgZmxleGlibGVDb3JuZXI6IDAuNSxcclxuICAgICAgYmVuZGluZzogMTEsXHJcbiAgICAgIHdhdmU6IDAuNSxcclxuICAgICAgc2hhcGU6IDAsXHJcbiAgICAgIHdpZHRoVGV4ZWxzOiA1KjIxMCxcclxuICAgICAgaGVpZ2h0VGV4ZWxzOiA1KjI5NyxcclxuICAgICAgY29sb3I6IDB4RkZGRkZGLFxyXG4gICAgICBzaWRlOiAnY29sb3InXHJcbiAgICB9LFxyXG4gICAgY292ZXI6IHtcclxuICAgICAgYmluZGVyVGV4dHVyZTogJycsXHJcbiAgICAgIGRlcHRoOiAwLjAwMDMsXHJcbiAgICAgIHBhZGRpbmc6IDAsXHJcbiAgICAgIG1hc3M6IDAuMDAxXHJcbiAgICB9LFxyXG4gICAgcGFnZToge1xyXG4gICAgICBkZXB0aDogMC4wMDAxLFxyXG4gICAgICBtYXNzOiAwLjAwMVxyXG4gICAgfSxcclxuICAgIGNzc0xheWVyUHJvcHM6IHtcclxuICAgICAgd2lkdGg6IDEwMjRcclxuICAgIH1cclxuICB9LFxyXG4gIHN0eWxlcyA9IHtcclxuICAgIHZvbHVtZTogZGVmLFxyXG4gICAgZmxhdDoge1xyXG4gICAgICAuLi5kZWYsXHJcbiAgICAgIHNoZWV0OiB7XHJcbiAgICAgICAgLi4uZGVmLnNoZWV0LFxyXG4gICAgICAgIHdhdmU6IDAuMDUsXHJcbiAgICAgICAgc2lkZTogJ3RyYW5zcGFyZW50J1xyXG4gICAgICB9LFxyXG4gICAgICBjb3Zlcjoge1xyXG4gICAgICAgIC4uLmRlZi5jb3ZlcixcclxuICAgICAgICBkZXB0aDogMC4wMDAwMlxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZGVmLnBhZ2UsXHJcbiAgICAgICAgZGVwdGg6IDAuMDAwMDFcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgICd2b2x1bWUtcGFkZGluZ3MnOiB7XHJcbiAgICAgIC4uLmRlZixcclxuICAgICAgY292ZXI6IHtcclxuICAgICAgICAuLi5kZWYuY292ZXIsXHJcbiAgICAgICAgcGFkZGluZzogMC4wMDI1XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIHJldHVybiBzdHlsZXNbc3R5bGVdIHx8IGRlZjtcclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvcHJvcHMvYm9vay5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuVEhSRUUuQ1NTM0RPYmplY3QgPSBjbGFzcyBDU1MzRE9iamVjdCBleHRlbmRzIFRIUkVFLk9iamVjdDNEIHtcclxuICBjb25zdHJ1Y3RvcihlbGVtZW50PXVuZGVmaW5lZCkge1xyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICBpZihlbGVtZW50KSB7XHJcbiAgICAgIHRoaXMuc2V0KGVsZW1lbnQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0KGVsZW1lbnQpIHtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgXHR0aGlzLmVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5cclxuICBcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigncmVtb3ZlZCcsIGZ1bmN0aW9uKCkge1xyXG4gIFx0XHRpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgIT09IG51bGwpIHtcclxuICBcdFx0XHR0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xyXG4gIFx0XHR9XHJcbiAgXHR9KTtcclxuICB9XHJcbn07XHJcblxyXG5USFJFRS5DU1MzRFNwcml0ZSA9IGNsYXNzIENTUzNEU3ByaXRlIGV4dGVuZHMgVEhSRUUuQ1NTM0RPYmplY3Qge1xyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQpIHtcclxuICAgIHN1cGVyKGVsZW1lbnQpO1xyXG4gIH1cclxufTtcclxuXHJcblRIUkVFLkNTUzNEUmVuZGVyZXIgPSBjbGFzcyBDU1MzRFJlbmRlcmVyIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgXHR2YXIgX3dpZHRoLCBfaGVpZ2h0O1xyXG4gIFx0dmFyIF93aWR0aEhhbGYsIF9oZWlnaHRIYWxmO1xyXG5cclxuICBcdHZhciBtYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xyXG5cclxuICBcdHZhciBjYWNoZSA9IHtcclxuICBcdFx0Y2FtZXJhOiB7IGZvdjogMCwgc3R5bGU6ICcnIH0sXHJcbiAgXHRcdG9iamVjdHM6IHt9XHJcbiAgXHR9O1xyXG5cclxuICBcdHZhciBkb21FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2RpdicpO1xyXG4gIFx0ZG9tRWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG5cclxuICBcdHRoaXMuZG9tRWxlbWVudCA9IGRvbUVsZW1lbnQ7XHJcblxyXG4gIFx0dmFyIGNhbWVyYUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2Jyk7XHJcblxyXG4gIFx0Y2FtZXJhRWxlbWVudC5zdHlsZS5XZWJraXRUcmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XHJcbiAgXHRjYW1lcmFFbGVtZW50LnN0eWxlLk1velRyYW5zZm9ybVN0eWxlID0gJ3ByZXNlcnZlLTNkJztcclxuICBcdGNhbWVyYUVsZW1lbnQuc3R5bGUudHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xyXG5cclxuICBcdGRvbUVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNhbWVyYUVsZW1lbnQpO1xyXG5cclxuICBcdHZhciBpc0lFID0gL1RyaWRlbnQvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuXHJcbiAgXHR0aGlzLnNldENsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7fTtcclxuXHJcbiAgXHR0aGlzLmdldFNpemUgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gIFx0XHRyZXR1cm4ge1xyXG4gIFx0XHRcdHdpZHRoOiBfd2lkdGgsXHJcbiAgXHRcdFx0aGVpZ2h0OiBfaGVpZ2h0XHJcbiAgXHRcdH07XHJcblxyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XHJcblxyXG4gIFx0XHRfd2lkdGggPSB3aWR0aDtcclxuICBcdFx0X2hlaWdodCA9IGhlaWdodDtcclxuICBcdFx0X3dpZHRoSGFsZiA9IF93aWR0aCAvIDI7XHJcbiAgXHRcdF9oZWlnaHRIYWxmID0gX2hlaWdodCAvIDI7XHJcblxyXG4gIFx0XHRkb21FbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gIFx0XHRkb21FbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblxyXG4gIFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gIFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblxyXG4gIFx0fTtcclxuXHJcbiAgXHRmdW5jdGlvbiBlcHNpbG9uKCB2YWx1ZSkge1xyXG4gIFx0XHRyZXR1cm4gTWF0aC5hYnMoIHZhbHVlKSA8IDFlLTYgPyAwIDogdmFsdWU7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldENhbWVyYUNTU01hdHJpeCggbWF0cml4KSB7XHJcblxyXG4gIFx0XHR2YXIgZWxlbWVudHMgPSBtYXRyaXguZWxlbWVudHM7XHJcblxyXG4gIFx0XHRyZXR1cm4gJ21hdHJpeDNkKCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAwIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMiBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDMgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA0IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA1IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgNiBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDcgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA4IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA5IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTAgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEyIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxMyBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE0IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTUgXSkgK1xyXG4gIFx0XHQnKSc7XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXgpIHtcclxuXHJcbiAgXHRcdHZhciBlbGVtZW50cyA9IG1hdHJpeC5lbGVtZW50cztcclxuICBcdFx0dmFyIG1hdHJpeDNkID0gJ21hdHJpeDNkKCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAwIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMSBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDIgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAzIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA0IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA1IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA2IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA3IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgOCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDkgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMCBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDExIF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTIgXSkgKyAnLCcgK1xyXG4gIFx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMyBdKSArICcsJyArXHJcbiAgXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE0IF0pICsgJywnICtcclxuICBcdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTUgXSkgK1xyXG4gIFx0XHQnKSc7XHJcblxyXG4gIFx0XHRpZihpc0lFKSB7XHJcblxyXG4gIFx0XHRcdHJldHVybiAndHJhbnNsYXRlKC01MCUsLTUwJSknICtcclxuICBcdFx0XHRcdCd0cmFuc2xhdGUoJyArIF93aWR0aEhhbGYgKyAncHgsJyArIF9oZWlnaHRIYWxmICsgJ3B4KScgK1xyXG4gIFx0XHRcdFx0Y2FtZXJhQ1NTTWF0cml4ICtcclxuICBcdFx0XHRcdG1hdHJpeDNkO1xyXG5cclxuICBcdFx0fVxyXG5cclxuICBcdFx0cmV0dXJuICd0cmFuc2xhdGUoLTUwJSwtNTAlKScgKyBtYXRyaXgzZDtcclxuXHJcbiAgXHR9XHJcblxyXG4gIFx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgY2FtZXJhQ1NTTWF0cml4KSB7XHJcblxyXG4gIFx0XHRpZihvYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5DU1MzRE9iamVjdCkge1xyXG5cclxuICBcdFx0XHR2YXIgc3R5bGU7XHJcblxyXG4gIFx0XHRcdGlmKG9iamVjdCBpbnN0YW5jZW9mIFRIUkVFLkNTUzNEU3ByaXRlKSB7XHJcbiAgXHRcdFx0XHRtYXRyaXguY29weSggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcbiAgXHRcdFx0XHRtYXRyaXgudHJhbnNwb3NlKCk7XHJcbiAgXHRcdFx0XHRtYXRyaXguY29weVBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQpO1xyXG4gIFx0XHRcdFx0bWF0cml4LnNjYWxlKCBvYmplY3Quc2NhbGUpO1xyXG5cclxuICBcdFx0XHRcdG1hdHJpeC5lbGVtZW50c1sgMyBdID0gMDtcclxuICBcdFx0XHRcdG1hdHJpeC5lbGVtZW50c1sgNyBdID0gMDtcclxuICBcdFx0XHRcdG1hdHJpeC5lbGVtZW50c1sgMTEgXSA9IDA7XHJcbiAgXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDE1IF0gPSAxO1xyXG5cclxuICBcdFx0XHRcdHN0eWxlID0gZ2V0T2JqZWN0Q1NTTWF0cml4KCBtYXRyaXgsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHRcdH0gZWxzZSB7XHJcblxyXG4gIFx0XHRcdFx0c3R5bGUgPSBnZXRPYmplY3RDU1NNYXRyaXgoIG9iamVjdC5tYXRyaXhXb3JsZCwgY2FtZXJhQ1NTTWF0cml4KTtcclxuXHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0XHR2YXIgZWxlbWVudCA9IG9iamVjdC5lbGVtZW50O1xyXG4gIFx0XHRcdHZhciBjYWNoZWRTdHlsZSA9IGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdICYmIGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdLnN0eWxlO1xyXG5cclxuICBcdFx0XHRpZihjYWNoZWRTdHlsZSA9PT0gdW5kZWZpbmVkIHx8IGNhY2hlZFN0eWxlICE9PSBzdHlsZSkge1xyXG4gIFx0XHRcdFx0ZWxlbWVudC5zdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSBzdHlsZTtcclxuICBcdFx0XHRcdGVsZW1lbnQuc3R5bGUuTW96VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0XHRlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlO1xyXG5cclxuICBcdFx0XHRcdGNhY2hlLm9iamVjdHNbIG9iamVjdC5pZCBdID0geyBzdHlsZTogc3R5bGUgfTtcclxuICBcdFx0XHRcdGlmKGlzSUUpIHtcclxuICBcdFx0XHRcdFx0Y2FjaGUub2JqZWN0c1sgb2JqZWN0LmlkIF0uZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQgPSBnZXREaXN0YW5jZVRvU3F1YXJlZCggY2FtZXJhLCBvYmplY3QpO1xyXG4gIFx0XHRcdFx0fVxyXG4gIFx0XHRcdH1cclxuXHJcbiAgXHRcdFx0aWYoZWxlbWVudC5wYXJlbnROb2RlICE9PSBjYW1lcmFFbGVtZW50KSB7XHJcbiAgXHRcdFx0XHRjYW1lcmFFbGVtZW50LmFwcGVuZENoaWxkKCBlbGVtZW50KTtcclxuICBcdFx0XHR9XHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdGZvcih2YXIgaSA9IDAsIGwgPSBvYmplY3QuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKykge1xyXG5cclxuICBcdFx0XHRyZW5kZXJPYmplY3QoIG9iamVjdC5jaGlsZHJlblsgaSBdLCBjYW1lcmEsIGNhbWVyYUNTU01hdHJpeCk7XHJcblxyXG4gIFx0XHR9XHJcblxyXG4gIFx0fVxyXG5cclxuICBcdHZhciBnZXREaXN0YW5jZVRvU3F1YXJlZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgXHRcdHZhciBhID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0dmFyIGIgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uKG9iamVjdDEsIG9iamVjdDIpIHtcclxuXHJcbiAgXHRcdFx0YS5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdDEubWF0cml4V29ybGQpO1xyXG4gIFx0XHRcdGIuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QyLm1hdHJpeFdvcmxkKTtcclxuXHJcbiAgXHRcdFx0cmV0dXJuIGEuZGlzdGFuY2VUb1NxdWFyZWQoIGIpO1xyXG5cclxuICBcdFx0fTtcclxuXHJcbiAgXHR9KCk7XHJcblxyXG4gIFx0ZnVuY3Rpb24gek9yZGVyKCBzY2VuZSkge1xyXG5cclxuICBcdFx0dmFyIG9yZGVyID0gT2JqZWN0LmtleXMoIGNhY2hlLm9iamVjdHMpLnNvcnQoIGZ1bmN0aW9uKGEsIGIpIHtcclxuXHJcbiAgXHRcdFx0cmV0dXJuIGNhY2hlLm9iamVjdHNbIGEgXS5kaXN0YW5jZVRvQ2FtZXJhU3F1YXJlZCAtIGNhY2hlLm9iamVjdHNbIGIgXS5kaXN0YW5jZVRvQ2FtZXJhU3F1YXJlZDtcclxuXHJcbiAgXHRcdH0pO1xyXG4gIFx0XHR2YXIgek1heCA9IG9yZGVyLmxlbmd0aDtcclxuXHJcbiAgXHRcdHNjZW5lLnRyYXZlcnNlKCBmdW5jdGlvbihvYmplY3QpIHtcclxuXHJcbiAgXHRcdFx0dmFyIGluZGV4ID0gb3JkZXIuaW5kZXhPZiggb2JqZWN0LmlkICsgJycpO1xyXG5cclxuICBcdFx0XHRpZihpbmRleCAhPT0gLSAxKSB7XHJcblxyXG4gIFx0XHRcdFx0b2JqZWN0LmVsZW1lbnQuc3R5bGUuekluZGV4ID0gek1heCAtIGluZGV4O1xyXG5cclxuICBcdFx0XHR9XHJcblxyXG4gIFx0XHR9KTtcclxuXHJcbiAgXHR9XHJcblxyXG4gIFx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbihzY2VuZSwgY2FtZXJhKSB7XHJcblxyXG4gIFx0XHR2YXIgZm92ID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDUgXSAqIF9oZWlnaHRIYWxmO1xyXG5cclxuICBcdFx0aWYoY2FjaGUuY2FtZXJhLmZvdiAhPT0gZm92KSB7XHJcblxyXG4gIFx0XHRcdGRvbUVsZW1lbnQuc3R5bGUuV2Via2l0UGVyc3BlY3RpdmUgPSBmb3YgKyAncHgnO1xyXG4gIFx0XHRcdGRvbUVsZW1lbnQuc3R5bGUuTW96UGVyc3BlY3RpdmUgPSBmb3YgKyAncHgnO1xyXG4gIFx0XHRcdGRvbUVsZW1lbnQuc3R5bGUucGVyc3BlY3RpdmUgPSBmb3YgKyAncHgnO1xyXG5cclxuICBcdFx0XHRjYWNoZS5jYW1lcmEuZm92ID0gZm92O1xyXG5cclxuICBcdFx0fVxyXG5cclxuICBcdFx0c2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcclxuXHJcbiAgXHRcdGlmKGNhbWVyYS5wYXJlbnQgPT09IG51bGwpIGNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuICBcdFx0dmFyIGNhbWVyYUNTU01hdHJpeCA9ICd0cmFuc2xhdGVaKCcgKyBmb3YgKyAncHgpJyArXHJcbiAgXHRcdFx0Z2V0Q2FtZXJhQ1NTTWF0cml4KCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlKTtcclxuXHJcbiAgXHRcdHZhciBzdHlsZSA9IGNhbWVyYUNTU01hdHJpeCArXHJcbiAgXHRcdFx0J3RyYW5zbGF0ZSgnICsgX3dpZHRoSGFsZiArICdweCwnICsgX2hlaWdodEhhbGYgKyAncHgpJztcclxuXHJcbiAgXHRcdGlmKGNhY2hlLmNhbWVyYS5zdHlsZSAhPT0gc3R5bGUgJiYgISBpc0lFKSB7XHJcblxyXG4gIFx0XHRcdGNhbWVyYUVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNmb3JtID0gc3R5bGU7XHJcbiAgXHRcdFx0Y2FtZXJhRWxlbWVudC5zdHlsZS5Nb3pUcmFuc2Zvcm0gPSBzdHlsZTtcclxuICBcdFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlO1xyXG5cclxuICBcdFx0XHRjYWNoZS5jYW1lcmEuc3R5bGUgPSBzdHlsZTtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHRcdHJlbmRlck9iamVjdCggc2NlbmUsIGNhbWVyYSwgY2FtZXJhQ1NTTWF0cml4KTtcclxuXHJcbiAgXHRcdGlmKGlzSUUpIHtcclxuXHJcbiAgXHRcdFx0Ly8gSUUxMCBhbmQgMTEgZG9lcyBub3Qgc3VwcG9ydCAncHJlc2VydmUtM2QnLlxyXG4gIFx0XHRcdC8vIFRodXMsIHotb3JkZXIgaW4gM0Qgd2lsbCBub3Qgd29yay5cclxuICBcdFx0XHQvLyBXZSBoYXZlIHRvIGNhbGMgei1vcmRlciBtYW51YWxseSBhbmQgc2V0IENTUyB6LWluZGV4IGZvciBJRS5cclxuICBcdFx0XHQvLyBGWUk6IHotaW5kZXggY2FuJ3QgaGFuZGxlIG9iamVjdCBpbnRlcnNlY3Rpb25cclxuICBcdFx0XHR6T3JkZXIoIHNjZW5lKTtcclxuXHJcbiAgXHRcdH1cclxuXHJcbiAgXHR9O1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRIUkVFLkNTUzNEUmVuZGVyZXI7XHJcblxyXG5jb25zdCBfQ1NTM0RPYmplY3QgPSBUSFJFRS5DU1MzRE9iamVjdCwgX0NTUzNEU3ByaXRlID0gVEhSRUUuQ1NTM0RTcHJpdGU7XHJcbmV4cG9ydCB7XHJcbiAgX0NTUzNET2JqZWN0IGFzIENTUzNET2JqZWN0LFxyXG4gIF9DU1MzRFNwcml0ZSBhcyBDU1MzRFNwcml0ZVxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9DU1MzRFJlbmRlcmVyLmpzIiwiaW1wb3J0IHtUSFJFRSwgJH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCB7Q1NTM0RPYmplY3R9IGZyb20gJy4vQ1NTM0RSZW5kZXJlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDU1NMYXllciBleHRlbmRzIENTUzNET2JqZWN0IHtcclxuXHJcbiAgc3RhdGljIGRlbGF5O1xyXG4gIHN0YXRpYyBzdHlsZTtcclxuICBzdGF0aWMgaW5pdChkb2MsIGRlbGF5PTE1MCkge1xyXG4gICAgQ1NTTGF5ZXIuZGVsYXkgPSBkZWxheTtcclxuICAgIENTU0xheWVyLnN0eWxlID0gJChgPHN0eWxlIHR5cGU9dGV4dC9jc3M+XHJcbiAgICAgIC5jc3MtbGF5ZXIge1xyXG4gICAgXHRcdG9wYWNpdHk6IDE7XHJcbiAgICBcdFx0dHJhbnNpdGlvbjogb3BhY2l0eSAke2RlbGF5fW1zIGVhc2Utb3V0O1xyXG4gICAgICAgIHZpc2liaWxpdHk6IHZpc2libGU7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIFx0fVxyXG4gICAgXHQuY3NzLWxheWVyLmhpZGRlbiB7XHJcbiAgICBcdFx0dHJhbnNpdGlvbjogb3BhY2l0eSAke2RlbGF5fW1zIGVhc2UtaW4sIHZpc2liaWxpdHkgJHtkZWxheX1tcyBzdGVwLWVuZDtcclxuICAgIFx0XHRvcGFjaXR5OiAwO1xyXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgfVxyXG4gICAgPC9zdHlsZT5gLmZiM2RRRmlsdGVyKCkpLmFwcGVuZFRvKGRvYy5oZWFkKTtcclxuICB9XHJcbiAgc3RhdGljIGRpc3Bvc2UoKSB7XHJcbiAgICBDU1NMYXllci5zdHlsZS5yZW1vdmUoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIHByb3BzKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5wcm9wcyA9IHByb3BzO1xyXG4gICAgdGhpcy5qQ29udGFpbmVyID0gJCgnPGRpdiBjbGFzcz1cImhpZGRlbiBjc3MtbGF5ZXJcIj48L2Rpdj4nKTtcclxuICBcdGNvbnN0IHdpZHRoUHhzID0gcHJvcHMud2lkdGgsIGhlaWdodFB4cyA9IGhlaWdodC93aWR0aCp3aWR0aFB4cztcclxuICAgIHRoaXMuakNvbnRhaW5lci53aWR0aCh3aWR0aFB4cykuaGVpZ2h0KGhlaWdodFB4cyk7XHJcbiAgXHR0aGlzLnNjYWxlLnggLz0gd2lkdGhQeHMvd2lkdGg7XHJcbiAgXHR0aGlzLnNjYWxlLnkgLz0gd2lkdGhQeHMvd2lkdGg7XHJcblxyXG4gICAgdGhpcy5zZXREYXRhKCk7XHJcbiAgICB0aGlzLnNldCh0aGlzLmpDb250YWluZXJbMF0pO1xyXG4gIH1cclxuXHJcbiAgY2FsbEludGVybmFsKG5hbWUpIHtcclxuICAgIGlmKHRoaXMub2JqZWN0ICYmIHRoaXMub2JqZWN0W25hbWVdKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGhpcy5vYmplY3RbbmFtZV0oKTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuY2xlYXJJbnRlcm5hbHMoKTtcclxuICB9XHJcblxyXG4gIGNsZWFySW50ZXJuYWxzKCkge1xyXG4gICAgdGhpcy5jYWxsSW50ZXJuYWwoJ2Rpc3Bvc2UnKTtcclxuICAgICF0aGlzLmNzcyB8fCB0aGlzLmNzcy5yZW1vdmUoKTtcclxuICAgICF0aGlzLmh0bWwgfHwgdGhpcy5odG1sLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgc2V0RGF0YShjc3M9JycsIGh0bWw9JycsIGpzPScnKSB7XHJcbiAgICB0aGlzLmNsZWFySW50ZXJuYWxzKCk7XHJcblxyXG4gICAgdGhpcy5jc3MgPSAkKGA8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+JHtjc3N9PC9zdHlsZT5gKS5hcHBlbmRUbyh0aGlzLmpDb250YWluZXIpO1xyXG4gICAgdGhpcy5odG1sID0gJChodG1sKS5hcHBlbmRUbyh0aGlzLmpDb250YWluZXIpO1xyXG4gICAgY29uc3QgaW5pdCA9IGV2YWwoanMpO1xyXG4gICAgaWYoaW5pdCkge1xyXG4gICAgICB0aGlzLm9iamVjdCA9IGluaXQodGhpcy5qQ29udGFpbmVyLCB0aGlzLnByb3BzKSB8fCB7fTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBlbmRlZENhbGwoY2xiKSB7XHJcbiAgICBjb25zdCB0aW1lc3RhbXAgPSB0aGlzLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICBpZih0aW1lc3RhbXA9PT10aGlzLnRpbWVzdGFtcCkge1xyXG4gICAgICAgIGNsYigpO1xyXG4gICAgICB9XHJcbiAgICB9LCBDU1NMYXllci5kZWxheSk7XHJcbiAgfVxyXG5cclxuICBpc0hpZGRlbigpIHtcclxuICAgIHJldHVybiB0aGlzLmpDb250YWluZXIuaGFzQ2xhc3MoJ2hpZGRlbicpO1xyXG4gIH1cclxuXHJcbiAgaGlkZSgpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBpZighdGhpcy5pc0hpZGRlbigpKSB7XHJcbiAgICAgIHRoaXMuakNvbnRhaW5lci5hZGRDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgIHRoaXMuY2FsbEludGVybmFsKCdoaWRlJyk7XHJcbiAgICAgIHJlcyA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICB0aGlzLnBlbmRlZENhbGwoKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLmNhbGxJbnRlcm5hbCgnaGlkZGVuJyk7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJlcyA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHNob3coKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYodGhpcy5pc0hpZGRlbigpKSB7XHJcbiAgICAgIHRoaXMuakNvbnRhaW5lci5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XHJcbiAgICAgIHRoaXMuY2FsbEludGVybmFsKCdzaG93Jyk7XHJcbiAgICAgIHJlcyA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICB0aGlzLnBlbmRlZENhbGwoKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLmNhbGxJbnRlcm5hbCgnc2hvd24nKTtcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQ1NTTGF5ZXIuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYWNoZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG1heFNpemU9SW5maW5pdHksIHNpemVvZj1DYWNoZS5jb3VudFNpemVvZikge1xyXG4gICAgdGhpcy5vcyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuc2l6ZW9mID0gc2l6ZW9mO1xyXG4gICAgdGhpcy5tYXhTaXplID0gbWF4U2l6ZTtcclxuICAgIHRoaXMuc2l6ZSA9IDA7XHJcbiAgfVxyXG5cclxuICBmb3JFYWNoKGNsYikge1xyXG4gICAgdGhpcy5vcy5mb3JFYWNoKCh2LCBrKT0+IGNsYihbayx2XSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvdW50U2l6ZW9mKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gMTtcclxuICB9XHJcblxyXG4gIHJlbW92ZShrKSB7XHJcbiAgICBsZXQgcmVzID0gZmFsc2U7XHJcbiAgICBjb25zdCB2ID0gdGhpcy5vcy5nZXQoayk7XHJcbiAgICBpZighdi5sb2NrZWQgfHwgIXYubG9ja2VkKGspKSB7XHJcbiAgICAgIHRoaXMuc2l6ZSAtPSB0aGlzLnNpemVvZih2KTtcclxuICAgICAgaWYodi5kaXNwb3NlKSB7XHJcbiAgICAgICAgdi5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5vcy5kZWxldGUoayk7XHJcbiAgICAgIHJlcyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgZnJlZVNwYWNlKCkge1xyXG4gICAgY29uc3QgYXJyID0gW107XHJcbiAgICBmb3IobGV0IHAgb2YgdGhpcy5vcykge1xyXG4gICAgICBhcnIucHVzaCh7dGltZXN0YW1wOiBwWzFdLnRpbWVzdGFtcCwga2V5OiBwWzBdfSk7XHJcbiAgICB9XHJcbiAgICBhcnIuc29ydCgoYSwgYik9PiBhLnRpbWVzdGFtcC1iLnRpbWVzdGFtcCk7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxhcnIubGVuZ3RoICYmIHRoaXMuc2l6ZT4zKnRoaXMubWF4U2l6ZS80OyArK2kpIHtcclxuICAgICAgdGhpcy5yZW1vdmUoYXJyW2ldLmtleSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgY29uc3QgYXJyID0gW107XHJcbiAgICBmb3IobGV0IHAgb2YgdGhpcy5vcykge1xyXG4gICAgICBhcnIucHVzaCh7djogcFsxXSwgazogcFswXX0pO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBvIG9mIGFycikge1xyXG4gICAgICBpZihvLnYuZGlzcG9zZSkge1xyXG4gICAgICAgIG8udi5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5vcy5kZWxldGUoby5rKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWN1cnNpb25TaXplb2YodmFsdWUpIHtcclxuICAgIGxldCBzaXplID0gMDtcclxuICAgIGlmKHZhbHVlKSB7XHJcbiAgICAgICsrc2l6ZTtcclxuICAgICAgY29uc3QgbGVuID0gdmFsdWUubGVuZ3RoO1xyXG4gICAgICBpZihsZW49PT11bmRlZmluZWQpIHtcclxuICAgICAgICBmb3IgKGxldCBwIGluIHZhbHVlKSB7XHJcbiAgICAgICAgICBpZih2YWx1ZS5oYXNPd25Qcm9wZXJ0eShwKSkge1xyXG4gICAgICAgICAgICBzaXplKz1DYWNoZS5yZWN1cnNpb25TaXplb2YodmFsdWVbcF0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzaXplKz1sZW5cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHNpemU7XHJcbiAgfVxyXG5cclxuICBnZXRUaW1lc3RhbXAoKSB7XHJcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcclxuICB9XHJcblxyXG5cclxuICBnZXQoa2V5KSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMub3MuZ2V0KGtleSk7XHJcbiAgICBpZih2YWx1ZSkge1xyXG4gICAgICB2YWx1ZS50aW1lc3RhbXAgPSB0aGlzLmdldFRpbWVzdGFtcCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHV0KGtleSwgdmFsdWUpIHtcclxuICAgIHZhbHVlLnRpbWVzdGFtcCA9IHRoaXMuZ2V0VGltZXN0YW1wKCk7XHJcbiAgICB0aGlzLm9zLnNldChrZXksIHZhbHVlKTtcclxuICAgIHRoaXMuc2l6ZSs9dGhpcy5zaXplb2YodmFsdWUpO1xyXG4gICAgaWYodGhpcy5zaXplPnRoaXMubWF4U2l6ZSkge1xyXG4gICAgICB0aGlzLmZyZWVTcGFjZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9DYWNoZS5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbGxlciBleHRlbmRzIFRIUkVFLkV2ZW50RGlzcGF0Y2hlciB7XHJcblxyXG4gIGhhbmRsZURlZmF1bHQoaWQsIGUsIGRhdGEpIHtcclxuICAgIC8vY29uc29sZS5sb2coaWQrJy0nK2UudHlwZSsnLScrZGF0YSk7XHJcbiAgfVxyXG5cclxuICBkaXNwYXRjaEFzeW5jKGUpIHtcclxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLmRpc3BhdGNoRXZlbnQoZSkpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Db250cm9sbGVyLmpzIiwiaW1wb3J0IEV2ZW50Q29udmVydGVyIGZyb20gJy4vRXZlbnRDb252ZXJ0ZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ3VzdG9tRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIC8vIGN1c3RvbVxyXG4gIC8vIHRlc3RJbnRlcnNlY3Rpb24oZSwgZGF0YSk7XHJcbiAgLy8gY3VzdG9tLm9iamVjdFxyXG4gIC8vIHRlc3Qob2JqZWN0KTtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGN1c3RvbVRlc3Q9KCk9PiBmYWxzZSwgZURvYykge1xyXG4gICAgc3VwZXIod25kLCBkb2MpO1xyXG5cclxuICAgIHRoaXMuZURvYyA9IGVEb2M7XHJcbiAgICB0aGlzLmN1c3RvbVRlc3QgPSBjdXN0b21UZXN0O1xyXG4gICAgdGhpcy5jdXN0b21zID0gW107XHJcbiAgfVxyXG5cclxuICB0ZXN0KG9iamVjdDEsIG9iamVjdDIpIHtcclxuICAgIHJldHVybiBvYmplY3QxICYmIG9iamVjdDI/IHRoaXMuY3VzdG9tVGVzdChvYmplY3QxLCBvYmplY3QyKTogZmFsc2U7XHJcbiAgfVxyXG5cclxuICBnZXRDYWxsYmFjayhvYmplY3QpIHtcclxuICAgIHJldHVybiBvYmplY3QudGFyZ2V0LmNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgYWRkQ3VzdG9tKGN1c3RvbSkge1xyXG4gICAgdGhpcy5jdXN0b21zLnB1c2goY3VzdG9tKTtcclxuICB9XHJcblxyXG4gIGdldE9iamVjdChlLCBkYXRhKSB7XHJcbiAgICBsZXQgb2JqZWN0O1xyXG4gICAgaWYoZGF0YS5kb2M9PT10aGlzLmVEb2MpIHtcclxuICAgICAgZm9yKGxldCBjdXN0b20gb2YgdGhpcy5jdXN0b21zKSB7XHJcbiAgICAgICAgb2JqZWN0ID0gY3VzdG9tLnRlc3RJbnRlcnNlY3Rpb24oZSwgZGF0YSk7XHJcbiAgICAgICAgaWYob2JqZWN0KSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvYmplY3Q7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9DdXN0b21FdmVudENvbnZlcnRlci5qcyIsImltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpbmRlciB7XHJcblxyXG4gIHN0YXRpYyBERUxJTUlURVIgPSAnICc7XHJcblxyXG4gIHN0YXRpYyBpc0RlbGltZXRyKHMpIHtcclxuICAgIHJldHVybiBzPT09RmluZGVyLkRFTElNSVRFUjtcclxuICB9XHJcblxyXG4gIG1lcmdlKCkge1xyXG4gICAgY29uc3QgYXMgPSBbXSwgbWFwID0gW10sIHN0cnMgPSB0aGlzLnN0cnM7XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxzdHJzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmKHN0cnNbaV0ubGVuZ3RoKSB7XHJcbiAgICAgICAgbWFwLnB1c2goe1xyXG4gICAgICAgICAgYmFzZTogaSxcclxuICAgICAgICAgIG9mZnNldDogcFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGFzLnB1c2goc3Ryc1tpXSk7XHJcbiAgICAgICAgcCArPSBzdHJzW2ldLmxlbmd0aDtcclxuICAgICAgICBpZihpPHN0cnMubGVuZ3RoLTEgJiYgIUZpbmRlci5pc0RlbGltZXRyKHN0cnNbaV0uY2hhckF0KHN0cnNbaV0ubGVuZ3RoLTEpKSAmJiAhRmluZGVyLmlzRGVsaW1ldHIoc3Ryc1tpKzFdLmNoYXJBdCgwKSkpIHtcclxuICAgICAgICAgIGFzLnB1c2goRmluZGVyLkRFTElNSVRFUik7XHJcbiAgICAgICAgICArK3A7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLm1hcCA9IG1hcDtcclxuICAgIHRoaXMuc3RyID0gYXMuam9pbignJyk7XHJcbiAgfVxyXG5cclxuICBhZGRIaXRzKHApIHtcclxuICAgIGNvbnN0IGluZm8gPSB0aGlzLm1hcFtVdGlscy5sb3dlckJvdW5kKHRoaXMubWFwLCB7b2Zmc2V0OiBwfSwgKGEsIGIpPT4gYS5vZmZzZXQtYi5vZmZzZXQpXTtcclxuICAgIGxldCBjaGFycyA9IHRoaXMucGF0dGVybi5sZW5ndGgsIGkgPSBpbmZvLmJhc2U7XHJcbiAgICBwIC09IGluZm8ub2Zmc2V0O1xyXG4gICAgd2hpbGUoY2hhcnMpIHtcclxuICAgICAgaWYodGhpcy5zdHJzW2ldLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGRlbGltZXRlciA9IGk8dGhpcy5zdHJzLmxlbmd0aC0xICYmICFGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cnNbaV0uY2hhckF0KHRoaXMuc3Ryc1tpXS5sZW5ndGgtMSkpICYmICFGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cnNbaSsxXS5jaGFyQXQoMCkpLFxyXG4gICAgICAgICAgICAgIGxlbmd0aCA9IE1hdGgubWluKHRoaXMuc3Ryc1tpXS5sZW5ndGgrKGRlbGltZXRlcj8gMTogMCktcCwgY2hhcnMpO1xyXG4gICAgICAgIGlmKHA8dGhpcy5zdHJzW2ldLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5oaXRzLnB1c2goe1xyXG4gICAgICAgICAgICBpbmRleDogaSxcclxuICAgICAgICAgICAgb2Zmc2V0OiBwLFxyXG4gICAgICAgICAgICBsZW5ndGg6IE1hdGgubWluKGxlbmd0aCwgdGhpcy5zdHJzW2ldLmxlbmd0aC1wKSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjaGFycyAtPSBsZW5ndGg7XHJcbiAgICAgICAgKytpO1xyXG4gICAgICAgIHAgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRDb250ZXh0KHApIHtcclxuICAgIGxldCBmID0gcCwgbCA9IHArdGhpcy5wYXR0ZXJuLmxlbmd0aC0xLCBkZWxzID0gdGhpcy5wcm9wcy5jb250ZXh0TGVuZ3RoLCBwcmV2RGVscyA9IGRlbHMrMTtcclxuICAgIHdoaWxlKGRlbHMgJiYgcHJldkRlbHMtZGVscykge1xyXG4gICAgICBwcmV2RGVscyA9IGRlbHM7XHJcbiAgICAgIGlmKGRlbHMlMikge1xyXG4gICAgICAgIGZvcihsZXQgaT1mLTI7IGk+PTA7IC0taSkge1xyXG4gICAgICAgICAgaWYoRmluZGVyLmlzRGVsaW1ldHIodGhpcy5zdHJbaV0pIHx8IGk9PT0wKSB7XHJcbiAgICAgICAgICAgIGYgPSBpPT09MD8gMDogaSsxO1xyXG4gICAgICAgICAgICAtLWRlbHM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBmb3IobGV0IGk9bCsyOyBpPHRoaXMuc3RyLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBpZihGaW5kZXIuaXNEZWxpbWV0cih0aGlzLnN0cltpXSkgfHwgaT09PXRoaXMuc3RyLmxlbmd0aC0xKSB7XHJcbiAgICAgICAgICAgIGwgPSBpPT09dGhpcy5zdHIubGVuZ3RoLTE/IGk9PT10aGlzLnN0ci5sZW5ndGgtMTogaS0xO1xyXG4gICAgICAgICAgICAtLWRlbHM7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5jb250ZXh0cy5wdXNoKHRoaXMuc3RyLnN1YnN0cihmLCBsLWYrMSkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SGl0cygpIHtcclxuICAgIHJldHVybiB0aGlzLmhpdHM7XHJcbiAgfVxyXG5cclxuICBnZXRDb250ZXh0cygpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRleHRzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRlZmF1bHRzID0ge1xyXG4gICAgY29udGV4dExlbmd0aDogNyxcclxuICAgIGhpdHM6IHRydWUsXHJcbiAgICBjb250ZXh0czogdHJ1ZVxyXG4gIH07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHN0cnMsIHBhdHRlcm4sIHByb3BzKSB7XHJcbiAgICB0aGlzLnByb3BzID0ge1xyXG4gICAgICAuLi5GaW5kZXIuZGVmYXVsdHMsXHJcbiAgICAgIC4uLnByb3BzXHJcbiAgICB9O1xyXG4gICAgdGhpcy5zdHJzID0gc3RycztcclxuICAgIGNvbnN0IGRhdGEgPSB0aGlzLm1lcmdlKHN0cnMpO1xyXG4gICAgdGhpcy5oaXRzID0gW107XHJcbiAgICB0aGlzLmNvbnRleHRzID0gW107XHJcbiAgICB0aGlzLnBhdHRlcm4gPSBwYXR0ZXJuLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB0aGlzLmxzdHIgPSB0aGlzLnN0ci50b0xvd2VyQ2FzZSgpO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgd2hpbGUodHJ1ZSkge1xyXG4gICAgICBwID0gdGhpcy5sc3RyLmluZGV4T2YodGhpcy5wYXR0ZXJuLCBwKTtcclxuICAgICAgaWYocD09PS0xKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5hZGRIaXRzKHApO1xyXG4gICAgICAgIHRoaXMuYWRkQ29udGV4dChwKTtcclxuICAgICAgICBwICs9IHRoaXMucGF0dGVybi5sZW5ndGg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRmluZGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEZ1bGxTY3JlZW4gZnJvbSAnLi9GdWxsU2NyZWVuJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZ1bGxTY3JlZW5YIGV4dGVuZHMgRnVsbFNjcmVlbiB7XHJcblxyXG5cdHN0YXRpYyBhdmFpbGFibGUoKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBkZWZOb2RlID0gJCgpO1xyXG5cdHN0YXRpYyBub2RlID0gRnVsbFNjcmVlblguZGVmTm9kZTtcclxuXHRzdGF0aWMgZGVmSGFuZGxlciA9ICgpPT4gdW5kZWZpbmVkXHJcblx0c3RhdGljIGhhbmRsZXIgPSBGdWxsU2NyZWVuWC5kZWZIYW5kbGVyO1xyXG5cdHN0YXRpYyBjbGFzc1ggPSAnZmIzZC1mdWxsc2NyZWVueCc7XHJcblx0c3RhdGljIHN0eWxlID0gJChgXHJcblx0XHQ8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+XHJcbiAgICAgIC4ke0Z1bGxTY3JlZW5YLmNsYXNzWH0ge1xyXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZCAhaW1wb3J0YW50O1xyXG5cdFx0XHRcdGxlZnQ6IDAgIWltcG9ydGFudDtcclxuICAgICAgICB0b3A6IDAgIWltcG9ydGFudDtcclxuICAgICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgICAgIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xyXG5cdFx0XHRcdHotaW5kZXg6IDIxNDc0ODM2NDcgIWltcG9ydGFudDtcclxuXHRcdFx0XHRtYXJnaW46IDAgIWltcG9ydGFudDtcclxuXHRcdFx0XHRib3gtc2l6aW5nOiBib3JkZXItYm94ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcclxuICAgICAgfVxyXG4gICAgPC9zdHlsZT5cclxuXHRgLmZiM2RRRmlsdGVyKCkpLmFwcGVuZFRvKCdoZWFkJyk7XHJcblxyXG5cdHN0YXRpYyBhY3RpdmF0ZWQoKSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuYXZhaWxhYmxlKCk/IHN1cGVyLmFjdGl2YXRlZCgpOiBGdWxsU2NyZWVuWC5ub2RlLmhhc0NsYXNzKEZ1bGxTY3JlZW5YLmNsYXNzWCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0XHRpZihzdXBlci5hdmFpbGFibGUoKSkge1xyXG5cdFx0XHRzdXBlci5hZGRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGhhbmRsZXIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdEZ1bGxTY3JlZW5YLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIHJlbW92ZUV2ZW50TGlzdGVuZXIoZWxlbWVudCwgaGFuZGxlcikge1xyXG5cdFx0aWYoc3VwZXIuYXZhaWxhYmxlKCkpIHtcclxuXHRcdFx0c3VwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRGdWxsU2NyZWVuWC5oYW5kbGVyID0gRnVsbFNjcmVlblguZGVmSGFuZGxlcjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyByZXF1ZXN0KGVsZW1lbnQpIHtcclxuXHRcdGlmKHN1cGVyLmF2YWlsYWJsZSgpKSB7XHJcblx0XHRcdHN1cGVyLnJlcXVlc3QoZWxlbWVudCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0aWYoIUZ1bGxTY3JlZW5YLm5vZGUuaGFzQ2xhc3MoRnVsbFNjcmVlblguY2xhc3NYKSkge1xyXG5cdFx0XHRcdEZ1bGxTY3JlZW5YLm5vZGUgPSAkKGVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keSk7XHJcblx0XHRcdFx0RnVsbFNjcmVlblgubm9kZS5hZGRDbGFzcyhGdWxsU2NyZWVuWC5jbGFzc1gpO1xyXG5cdFx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oRnVsbFNjcmVlblguaGFuZGxlcik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjYW5jZWwoKSB7XHJcblx0XHRpZihzdXBlci5hdmFpbGFibGUoKSkge1xyXG5cdFx0XHRzdXBlci5jYW5jZWwoKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRpZihGdWxsU2NyZWVuWC5ub2RlLmhhc0NsYXNzKEZ1bGxTY3JlZW5YLmNsYXNzWCkpIHtcclxuXHRcdFx0XHRGdWxsU2NyZWVuWC5ub2RlLnJlbW92ZUNsYXNzKEZ1bGxTY3JlZW5YLmNsYXNzWCk7XHJcblx0XHRcdFx0RnVsbFNjcmVlblgubm9kZSA9IEZ1bGxTY3JlZW5YLmRlZk5vZGU7XHJcblx0XHRcdFx0UHJvbWlzZS5yZXNvbHZlKCkudGhlbihGdWxsU2NyZWVuWC5oYW5kbGVyKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRnVsbFNjcmVlblguanMiLCJpbXBvcnQge1BERkpTfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMnO1xyXG5cclxuUERGSlMuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgPSAod2luZG93LlBERkpTX0xPQ0FMRT8gUERGSlNfTE9DQUxFOiBHTE9CQUxfUEFUSFMpLnBkZkpzV29ya2VyO1xyXG5QREZKUy5jTWFwVXJsID0gKHdpbmRvdy5QREZKU19MT0NBTEU/IFBERkpTX0xPQ0FMRTogR0xPQkFMX1BBVEhTKS5wZGZKc0NNYXBVcmw7XHJcblBERkpTLmNNYXBQYWNrZWQgPSB0cnVlO1xyXG5QREZKUy5kaXNhYmxlQXV0b0ZldGNoID0gdHJ1ZTtcclxuUERGSlMuZGlzYWJsZVN0cmVhbSA9IHRydWU7XHJcblBERkpTLmltYWdlUmVzb3VyY2VzUGF0aCA9ICdpbWFnZXMvcGRmanMvJztcclxuUERGSlMuZXh0ZXJuYWxMaW5rVGFyZ2V0ID0gUERGSlMuTGlua1RhcmdldC5CTEFOSztcclxuLy8gUERGSlMuZGlzYWJsZUZvbnRGYWNlID0gdHJ1ZTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBkZiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNyYywgbG9hZGluZ1Byb2dyZXNzKSB7XHJcbiAgICB0aGlzLnNyYyA9IFV0aWxzLm5vcm1hbGl6ZVVybChzcmMpO1xyXG4gICAgdGhpcy5oYW5kbGVyUXVldWUgPSBbXTtcclxuICAgIHRoaXMucHJvZ3Jlc0RhdGEgPSB7bG9hZGVkOiAtMSwgdG90YWw6IDF9O1xyXG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MgPSBsb2FkaW5nUHJvZ3Jlc3M7XHJcblxyXG4gICAgdGhpcy50YXNrID0gUERGSlMuZ2V0RG9jdW1lbnQoe1xyXG4gICAgICB1cmw6IHRoaXMuc3JjLFxyXG4gICAgICByYW5nZUNodW5rU2l6ZTogNTEyKjEwMjQsXHJcbiAgICAgIGNNYXBVcmw6IFBERkpTLmNNYXBVcmwsXHJcbiAgICAgIGNNYXBQYWNrZWQ6IFBERkpTLmNNYXBQYWNrZWQsXHJcbiAgICAgIGRpc2FibGVBdXRvRmV0Y2g6IFBERkpTLmRpc2FibGVBdXRvRmV0Y2gsXHJcbiAgICAgIGRpc2FibGVTdHJlYW06IFBERkpTLmRpc2FibGVTdHJlYW0sXHJcbiAgICAgIGltYWdlUmVzb3VyY2VzUGF0aDogUERGSlMuaW1hZ2VSZXNvdXJjZXNQYXRoLFxyXG4gICAgICBleHRlcm5hbExpbmtUYXJnZXQ6IFBERkpTLmV4dGVybmFsTGlua1RhcmdldCxcclxuICAgICAgLy8gZGlzYWJsZUZvbnRGYWNlOiBQREZKUy5kaXNhYmxlRm9udEZhY2VcclxuICAgIH0pO1xyXG4gICAgdGhpcy50YXNrLm9uUHJvZ3Jlc3MgPSAoZGF0YSk9PiB7XHJcbiAgICAgIGlmKHRoaXMubG9hZGluZ1Byb2dyZXNzKSB7XHJcbiAgICAgICAgbGV0IGN1ciA9IE1hdGguZmxvb3IoMTAwKmRhdGEubG9hZGVkL2RhdGEudG90YWwpLFxyXG4gICAgICAgICAgICAgIG9sZCA9IE1hdGguZmxvb3IoMTAwKnRoaXMucHJvZ3Jlc0RhdGEubG9hZGVkL3RoaXMucHJvZ3Jlc0RhdGEudG90YWwpO1xyXG4gICAgICAgIGlmKGN1ciE9PW9sZCkge1xyXG4gICAgICAgICAgY3VyID0gaXNOYU4oY3VyKT8gMDogY3VyO1xyXG4gICAgICAgICAgY3VyID0gY3VyPjEwMD8gMTAwOiBjdXI7XHJcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdQcm9ncmVzcyhjdXIpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMucHJvZ3Jlc0RhdGEgPSBkYXRhO1xyXG4gICAgfTtcclxuICAgIHRoaXMudGFzay5wcm9taXNlLnRoZW4oKGhhbmRsZXIpPT4ge1xyXG4gICAgICBpZihoYW5kbGVyLm51bVBhZ2VzPjEpIHtcclxuICAgICAgICBQcm9taXNlLmFsbChbaGFuZGxlci5nZXRQYWdlKDEpLCBoYW5kbGVyLmdldFBhZ2UoMildKS5cclxuICAgICAgICB0aGVuKChwYWdlcyk9PiB7XHJcbiAgICAgICAgICB0aGlzLmluaXQoaGFuZGxlciwgcGFnZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW5pdChoYW5kbGVyKTtcclxuICAgICAgfVxyXG4gICAgfSkuXHJcbiAgICBjYXRjaCgoZSk9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIGlmKHRoaXMuZXJyb3JIYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvckhhbmRsZXIoZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaW5pdChoYW5kbGVyLCBwYWdlcykge1xyXG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICAgIHRoaXMuZG91YmxlZFBhZ2VzID0gcGFnZXM/IChNYXRoLmFicygyKlBkZi5nZXRQYWdlU2l6ZShwYWdlc1swXSkud2lkdGgtUGRmLmdldFBhZ2VTaXplKHBhZ2VzWzFdKS53aWR0aCkvUGRmLmdldFBhZ2VTaXplKHBhZ2VzWzBdKS53aWR0aDwwLjA1KTogZmFsc2U7XHJcbiAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcclxuICAgIGZvcihsZXQgY2xiIG9mIHRoaXMuaGFuZGxlclF1ZXVlLnJldmVyc2UoKSkge1xyXG4gICAgICBkb25lID0gZG9uZS50aGVuKChoYW5kbGVyKT0+IHtcclxuICAgICAgICBjbGIoaGFuZGxlcik7XHJcbiAgICAgICAgcmV0dXJuIGhhbmRsZXI7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZVR5cGUobikge1xyXG4gICAgcmV0dXJuICF0aGlzLmRvdWJsZWRQYWdlcyB8fCBuPT09MCB8fCBuPT09dGhpcy5nZXRQYWdlc051bSgpLTE/ICdmdWxsJzogKG4mMT8gJ2xlZnQnOiAncmlnaHQnKTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2Uobikge1xyXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5nZXRQYWdlKHRoaXMuZG91YmxlZFBhZ2VzPyBNYXRoLmNlaWwobi8yKSsxOiBuKzEpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RGVzdGluYXRpb24oZGVzdCkge1xyXG4gICAgbGV0IGRlc3RQcm9taXNlO1xyXG4gICAgaWYodHlwZW9mIGRlc3Q9PT0nc3RyaW5nJykge1xyXG4gICAgICBkZXN0UHJvbWlzZSA9IHRoaXMuaGFuZGxlci5nZXREZXN0aW5hdGlvbihkZXN0KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBkZXN0UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShkZXN0KTtcclxuICAgIH1cclxuICAgIGRlc3RQcm9taXNlID0gZGVzdFByb21pc2UuXHJcbiAgICAgIHRoZW4oKGRlc3QpPT4gdGhpcy5oYW5kbGVyLmdldFBhZ2VJbmRleChkZXN0WzBdKSkuXHJcbiAgICAgIHRoZW4oKG51bWJlcik9PiB0aGlzLmRvdWJsZWRQYWdlcz8gKG51bWJlcjwxPyBudW1iZXI6IDErMioobnVtYmVyLTEpKTogbnVtYmVyKS5cclxuICAgICAgY2F0Y2goKCk9PiBjb25zb2xlLmVycm9yKCdCYWQgYm9va21hcmsnKSk7XHJcbiAgICByZXR1cm4gZGVzdFByb21pc2U7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5oYW5kbGVyUXVldWUuc3BsaWNlKDAsIHRoaXMuaGFuZGxlclF1ZXVlLmxlbmd0aCk7XHJcbiAgICBkZWxldGUgdGhpcy5oYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgc2V0TG9hZGluZ1Byb2dyZXNzQ2xiKGNsYikge1xyXG4gICAgdGhpcy5sb2FkaW5nUHJvZ3Jlc3MgPSBjbGI7XHJcbiAgfVxyXG5cclxuICBzZXRFcnJvckhhbmRsZXIoZWgpIHtcclxuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gZWg7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlc051bSgpIHtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZXI/ICh0aGlzLmRvdWJsZWRQYWdlcz8gMioodGhpcy5oYW5kbGVyLm51bVBhZ2VzLTEpOiB0aGlzLmhhbmRsZXIubnVtUGFnZXMpOiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0UGFnZVNpemUocGFnZSkge1xyXG4gICAgY29uc3QgeCA9IHBhZ2Uudmlld1syXS1wYWdlLnZpZXdbMF0sIHkgPSBwYWdlLnZpZXdbM10tcGFnZS52aWV3WzFdLCBhID0gcGFnZS5yb3RhdGUqTWF0aC5QSS8xODA7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogTWF0aC5hYnMoeCpNYXRoLmNvcyhhKS15Kk1hdGguc2luKGEpKSxcclxuICAgICAgaGVpZ2h0OiBNYXRoLmFicyh4Kk1hdGguc2luKGEpK3kqTWF0aC5jb3MoYSkpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbi8vICAgaWYocGFnZXM+MSkge1xyXG4vLyAgIGhhbmRsZXIuZ2V0UGFnZSgyKS5cclxuLy8gICB0aGVuKChwYWdlKT0+IHtcclxuLy8gICAgIGNvbnN0IHNpemUxID0gUGRmLmdldFBhZ2VTaXplKHBhZ2UpO1xyXG4vLyAgICAgdGhpcy5wcm9wcy5kb3VibGVkUGFnZXMgPSAyKnNpemUwLndpZHRoPT09c2l6ZTEud2lkdGg7XHJcbi8vICAgICB0aGlzLnJlYWR5KCk7XHJcbi8vICAgfSkuXHJcbi8vICAgY2F0Y2goKCk9PiB0aGlzLnJlYWR5KCkpO1xyXG4vLyB9XHJcbi8vIGVsc2Uge1xyXG5cclxuICBnZXRIYW5kbGVyKGNsYikge1xyXG4gICAgaWYodGhpcy5oYW5kbGVyKSB7XHJcbiAgICAgIGNsYih0aGlzLmhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuaGFuZGxlclF1ZXVlLnB1c2goY2xiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1BkZi5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVFdmVudENvbnZlcnRlckZzIHtcclxuXHJcbiAgc3RhdGljIG9iamVjdHNUZXN0KG9iamVjdDEsIG9iamVjdDIpIHtcclxuICAgIHJldHVybiBvYmplY3QxICYmIG9iamVjdDI/IG9iamVjdDEub2JqZWN0PT09b2JqZWN0Mi5vYmplY3Q6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG9iamVjdHNBbmRGYWNlc1Rlc3Qob2JqZWN0MSwgb2JqZWN0Mikge1xyXG4gICAgcmV0dXJuIG9iamVjdDEgJiYgb2JqZWN0Mj8gb2JqZWN0MS5vYmplY3Q9PT1vYmplY3QyLm9iamVjdCAmJiBvYmplY3QxLmZhY2UubWF0ZXJpYWxJbmRleD09PW9iamVjdDIuZmFjZS5tYXRlcmlhbEluZGV4OiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbFdvcmxkLCB0ZXN0PVRocmVlRXZlbnRDb252ZXJ0ZXJGcy5vYmplY3RzQW5kRmFjZXNUZXN0KSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbFdvcmxkO1xyXG4gICAgdGhpcy5jb29yZHMgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xyXG4gICAgdGhpcy5yYXljYXN0ZXIgPSB0aGlzLnZpc3VhbC5yYXljYXN0ZXI7XHJcbiAgICB0aGlzLmNhbWVyYSA9IHRoaXMudmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMudGhyZWVzID0gW107XHJcbiAgICB0aGlzLnRlc3QgPSB0ZXN0O1xyXG4gIH1cclxuXHJcbiAgYWRkVGhyZWUodGhyZWUpIHtcclxuICAgIHRoaXMudGhyZWVzLnB1c2godGhyZWUpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlVGhyZWUodGhyZWUpIHtcclxuICAgIGNvbnN0IGkgPSB0aGlzLnRocmVlcy5pbmRleE9mKHRocmVlKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMudGhyZWVzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldE9iamVjdChlKSB7XHJcbiAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICAgIHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5jb29yZHMsIHRoaXMuY2FtZXJhKTtcclxuICAgIGNvbnN0IGludGVyc2VjdHMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMudGhyZWVzKTtcclxuICAgIHJldHVybiBpbnRlcnNlY3RzWzBdO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJy4vQmFzZU1hdGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlZVV0aWxzIHtcclxuXHJcbiAgc3RhdGljIHZlcnRpY2VzMlVWcyh2ZXJ0aWNlcywgaW5kZWNlcywgZmlyc3QsIGxhc3QsIGNvbnZlckNsYikge1xyXG4gICAgY29uc3QgciA9IFtdO1xyXG4gICAgZm9yKGxldCBpID0gZmlyc3Q7IGk8bGFzdDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHZpcyA9IFtpbmRlY2VzW2ldLmEsaW5kZWNlc1tpXS5iLGluZGVjZXNbaV0uY107XHJcbiAgICAgIGZvcihsZXQgaiA9IDA7IGo8dmlzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgaWYoIXJbdmlzW2pdXSkge1xyXG4gICAgICAgICAgclt2aXNbal1dID0gY29udmVyQ2xiKHZlcnRpY2VzW3Zpc1tqXV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29tcHV0ZUZhY2VWZXJ0ZXhVdnMoZ2VvbWV0cnksIGZhY2VzKSB7XHJcbiAgICBjb25zdCB1dnMgPSBbXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIDAsIGZhY2VzWzBdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueCwgMS1wLnopKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMF0sIGZhY2VzWzFdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC54LCAxLXAueikpLFxyXG4gICAgICAgICAgICAgICAgVGhyZWVVdGlscy52ZXJ0aWNlczJVVnMoZ2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LmZhY2VzLCBmYWNlc1sxXSwgZmFjZXNbMl0sIChwKT0+bmV3IFRIUkVFLlZlY3RvcjIocC54LCBwLnkpKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbMl0sIGZhY2VzWzNdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKDEtcC54LCBwLnkpKSxcclxuICAgICAgICAgICAgICAgIFRocmVlVXRpbHMudmVydGljZXMyVVZzKGdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS5mYWNlcywgZmFjZXNbM10sIGZhY2VzWzRdLCAocCk9Pm5ldyBUSFJFRS5WZWN0b3IyKHAueiwgcC55KSksXHJcbiAgICAgICAgICAgICAgICBUaHJlZVV0aWxzLnZlcnRpY2VzMlVWcyhnZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkuZmFjZXMsIGZhY2VzWzRdLCBnZW9tZXRyeS5mYWNlcy5sZW5ndGgsIChwKT0+bmV3IFRIUkVFLlZlY3RvcjIoMS1wLnosIHAueSkpXHJcbiAgICBdO1xyXG5cclxuICAgIGxldCB1dnNpID0gMDtcclxuICAgIGZvcihsZXQgaSA9IDA7IGk8Z2VvbWV0cnkuZmFjZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgdXZzaSArPSBmYWNlc1t1dnNpXSA9PT0gaTtcclxuICAgICAgY29uc3QgZiA9IGdlb21ldHJ5LmZhY2VzW2ldO1xyXG4gICAgICBmLm1hdGVyaWFsSW5kZXggPSB1dnNpO1xyXG4gICAgICBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldID0gW3V2c1t1dnNpXVtmLmFdLCB1dnNbdXZzaV1bZi5iXSwgdXZzW3V2c2ldW2YuY11dO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNyZWF0ZU1hcmtlcihwLCBjLCBzaXplKSB7XHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgVEhSRUUuTWVzaChuZXcgVEhSRUUuU3BoZXJlR2VvbWV0cnkoc2l6ZSksIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7IGNvbG9yOiBjIH0pKTtcclxuICAgIG1hcmtlci5wb3NpdGlvbi5zZXQocC54LHAueSxwLnopO1xyXG4gICAgcmV0dXJuIG1hcmtlcjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBmaW5kVXZUcmlzKGdlb21ldHJ5LCBwcywgZmlyc3QsIGxhc3QpIHtcclxuICAgIGNvbnN0IHJlcyA9IFtdO1xyXG4gICAgZm9yKGxldCBwIG9mIHBzKSB7XHJcbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IGk9Zmlyc3Q7IGk8bGFzdCAmJiAhZm91bmQ7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IHRyaSA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbMF1baV07XHJcbiAgICAgICAgaWYoQmFzZU1hdGhVdGlscy5pc0luc2lkZUNvbnZQb2x5KHRyaSwgcCkpIHtcclxuICAgICAgICAgIHJlcy5wdXNoKHtcclxuICAgICAgICAgICAgY29lZnM6IEJhc2VNYXRoVXRpbHMuY29tcHV0ZUludGVycENvZWZzKHRyaSwgcCksXHJcbiAgICAgICAgICAgIGlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZighZm91bmQpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdCYWQgcG9pbnQnKTtcclxuICAgICAgICByZXMucHVzaCh1bmRlZmluZWQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZpbmRJbnRlcm5hbFZlcnRpY2VzKGdlb21ldHJ5LCBwcywgZmlyc3QsIGxhc3QpIHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yKGxldCBpPWZpcnN0OyBpPGxhc3Q7ICsraSkge1xyXG4gICAgICBjb25zdCB0cmkgPSBnZW9tZXRyeS5mYWNlVmVydGV4VXZzWzBdW2ldLCBmID0gZ2VvbWV0cnkuZmFjZXNbaV0sIHZzID0gW2YuYSwgZi5iLCBmLmNdO1xyXG4gICAgICBmb3IobGV0IGo9MDsgajx0cmkubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBpZihyZXNbdnNbal1dPT09dW5kZWZpbmVkICYmIEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVQb2x5KHBzLCB0cmlbal0pKSB7XHJcbiAgICAgICAgICByZXNbdnNbal1dID0ge1xyXG4gICAgICAgICAgICBwOiB0cmlbal0sXHJcbiAgICAgICAgICAgIGk6IHZzW2pdLFxyXG4gICAgICAgICAgICBuOiBmLnZlcnRleE5vcm1hbHNbal1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXMpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGhyZWVVdGlscy5qcyIsImltcG9ydCBDb250cm9sbGVyIGZyb20gJy4vQ29udHJvbGxlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXaWRnZXRDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpZXcsIG5hbWUpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgdG9nbGUoKSB7XHJcbiAgICB0aGlzLnZpc2libGUgPSAhdGhpcy52aXNpYmxlO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIGZpcmVDaGFuZ2UoKSB7XHJcbiAgICBpZih0aGlzLm9uQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMub25DaGFuZ2UoKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUodGhpcy5uYW1lLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMudmlzaWJsZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvV2lkZ2V0Q29udHJvbGxlci5qcyIsIlxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUYXJnZXQge1xyXG5cclxuICBzdGF0aWMgdGVzdChvYmplY3QxLCBvYmplY3QyKSB7XHJcbiAgICByZXR1cm4gb2JqZWN0MS50YXJnZXQ9PT1vYmplY3QyLnRhcmdldDtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL3RhcmdldHMvVGFyZ2V0LmpzIiwiaW1wb3J0IHskLCB0cn0gZnJvbSAnLi9qcy9saWJzJztcclxuaW1wb3J0IERldGVjdG9yIGZyb20gJ0RldGVjdG9yJztcclxuaW1wb3J0IFZpc3VhbFdvcmxkIGZyb20gJ1Zpc3VhbFdvcmxkJztcclxuaW1wb3J0IFBkZkxpbmtzSGFuZGxlciBmcm9tICcuL2pzL2NsYXNzZXMvUGRmTGlua3NIYW5kbGVyJztcclxuaW1wb3J0IEJvb2sgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2snO1xyXG5pbXBvcnQgQm9va1ZpZXcgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2tWaWV3JztcclxuaW1wb3J0IEJvb2tDb250cm9sbGVyIGZyb20gJy4vanMvY2xhc3Nlcy9Cb29rQ29udHJvbGxlcic7XHJcbmltcG9ydCBQZGZCb29rUHJvcHNCdWlsZGVyIGZyb20gJy4vanMvY2xhc3Nlcy9QZGZCb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IENsYkJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9qcy9jbGFzc2VzL0NsYkJvb2tQcm9wc0J1aWxkZXInO1xyXG5pbXBvcnQgTG9hZGluZ0NvbnRyb2xsZXIgZnJvbSAnTG9hZGluZ0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgVXNlck1lc3NhZ2VDb250cm9sbGVyIGZyb20gJ1VzZXJNZXNzYWdlQ29udHJvbGxlcic7XHJcbmltcG9ydCBTZWFyY2ggZnJvbSAnU2VhcmNoJztcclxuaW1wb3J0IEJvb2ttYXJrcyBmcm9tICdCb29rbWFya3MnO1xyXG5pbXBvcnQgVGh1bWJuYWlscyBmcm9tICdUaHVtYm5haWxzJztcclxuaW1wb3J0IFRvY0NvbnRyb2xsZXIgZnJvbSAnLi9qcy9jbGFzc2VzL1RvY0NvbnRyb2xsZXInO1xyXG5pbXBvcnQgU2hhcmVDb250cm9sbGVyIGZyb20gJy4vanMvY2xhc3Nlcy9TaGFyZUNvbnRyb2xsZXInO1xyXG5pbXBvcnQgQm9va1ByaW50ZXIgZnJvbSAnLi9qcy9jbGFzc2VzL0Jvb2tQcmludGVyJztcclxuaW1wb3J0IEF1dG9OYXZpZ2F0b3IgZnJvbSAnLi9qcy9jbGFzc2VzL0F1dG9OYXZpZ2F0b3InO1xyXG5pbXBvcnQgU291bmRzRW52aXJvbWVudCBmcm9tICcuL2pzL2NsYXNzZXMvU291bmRzRW52aXJvbWVudCc7XHJcbmltcG9ydCBGdWxsU2NyZWVuWCBmcm9tICdGdWxsU2NyZWVuWCc7XHJcblxyXG4kLmZuLkZsaXBCb29rID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gIGNvbnN0IHNjZW5lID0ge1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgaWYodGhpcy5yZWFkeSkge1xyXG4gICAgICAgICFzY2VuZS5wZGZMaW5rc0hhbmRsZXIgfHwgc2NlbmUucGRmTGlua3NIYW5kbGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUucGRmTGlua3NIYW5kbGVyO1xyXG4gICAgICAgIHNjZW5lLnNvdW5kcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnNvdW5kcztcclxuICAgICAgICBzY2VuZS51c2VyTWVzc2FnZUN0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS51c2VyTWVzc2FnZUN0cmw7XHJcbiAgICAgICAgc2NlbmUudG9jQ3RybC5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnRvY0N0cmw7XHJcbiAgICAgICAgc2NlbmUudGh1bWJuYWlscy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnRodW1ibmFpbHM7XHJcbiAgICAgICAgIXNjZW5lLmJvb2ttYXJrcyB8fCBzY2VuZS5ib29rbWFya3MuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5ib29rbWFya3M7XHJcbiAgICAgICAgc2NlbmUuc2hhcmVDdHJsLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuc2hhcmVDdHJsO1xyXG4gICAgICAgIHNjZW5lLmN0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5jdHJsO1xyXG4gICAgICAgIHNjZW5lLmJvb2tQcmludGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUuYm9va1ByaW50ZXI7XHJcbiAgICAgICAgc2NlbmUuYm9vay5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmJvb2s7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUucHJvcHNCdWlsZGVyO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5ib29rQnVpbGRlcjtcclxuICAgICAgICBzY2VuZS52aXN1YWwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS52aXN1YWw7XHJcbiAgICAgICAgc2NlbmUudmlldy5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLnZpZXc7XHJcbiAgICAgICAgZGVsZXRlIHNjZW5lLmRpc3Bvc2U7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wZW5kaW5nRGlzcG9zZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG4gIG9wdGlvbnMgPSB7Li4ub3B0aW9uc307XHJcbiAgY29uc3QgcGFyZW50Q29udGFpbmVyID0gdGhpcy5sZW5ndGg/IHRoaXNbMF06ICQoJzxkaXY+JykuYXBwZW5kVG8oJ2JvZHknKTtcclxuICBpZihvcHRpb25zLmFjdGl2YXRlRnVsbFNjcmVlbikge1xyXG4gICAgRnVsbFNjcmVlblgucmVxdWVzdChwYXJlbnRDb250YWluZXIpO1xyXG4gIH1cclxuICBzY2VuZS52aWV3ID0gbmV3IEJvb2tWaWV3KHBhcmVudENvbnRhaW5lciwgKCk9PiB7XHJcbiAgICBpZighRGV0ZWN0b3Iud2ViZ2wpIHtcclxuICAgICAgRGV0ZWN0b3IuYWRkR2V0V2ViR0xNZXNzYWdlKHtwYXJlbnQ6IHNjZW5lLnZpZXcuZ2V0VmlldygpfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2NlbmUubG9hZGluZ0N0cmwgPSBuZXcgTG9hZGluZ0NvbnRyb2xsZXIoc2NlbmUudmlldywgdHJ1ZSwgKHByb2dyZXNzKT0+IHByb2dyZXNzPT09MD8gdHIoJ1BsZWFzZSB3YWl0Li4uIHRoZSBBcHBsaWNhdGlvbiBpcyBMb2FkaW5nJyk6IHRyKCdQREYgaXMgTG9hZGluZzonKSsnICcrcHJvZ3Jlc3MrJyUnKTtcclxuICAgICAgc2NlbmUudXNlck1lc3NhZ2VDdHJsID0gbmV3IFVzZXJNZXNzYWdlQ29udHJvbGxlcihzY2VuZS52aWV3KTtcclxuICAgICAgc2NlbmUudmlzdWFsID0gbmV3IFZpc3VhbFdvcmxkKHNjZW5lLnZpZXcuZ2V0Q29udGFpbmVyKCkub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldywgc2NlbmUudmlldy5nZXRDb250YWluZXIoKS5vd25lckRvY3VtZW50LCBzY2VuZS52aWV3LmdldFZpZXcoKSk7XHJcbiAgICAgIHNjZW5lLmJvb2tCdWlsZGVyID0gKHByb3BzLCBzaGVldHMsIHBhZ2VDYWxsYmFjayk9PiB7XHJcbiAgICAgICAgcHJvcHMuY3NzTGF5ZXJQcm9wcyA9IHtcclxuICAgICAgICAgIC4uLnByb3BzLmNzc0xheWVyUHJvcHMsXHJcbiAgICAgICAgICBzY2VuZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYob3B0aW9ucy5wcm9wZXJ0aWVzQ2FsbGJhY2spIHtcclxuICAgICAgICAgIHByb3BzID0gb3B0aW9ucy5wcm9wZXJ0aWVzQ2FsbGJhY2socHJvcHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5ib29rID0gbmV3IEJvb2soc2NlbmUudmlzdWFsLCBzaGVldHMsIHBhZ2VDYWxsYmFjaywgcHJvcHMpO1xyXG4gICAgICAgIHNjZW5lLmJvb2tQcmludGVyID0gbmV3IEJvb2tQcmludGVyKHNjZW5lLnZpc3VhbCwgc2NlbmUuYm9vaywgKG9wdGlvbnMudGVtcGxhdGUgfHwge30pLnByaW50U3R5bGUpO1xyXG4gICAgICAgIHNjZW5lLmxvYWRpbmdDdHJsLmRpc3Bvc2UoKTtcclxuICAgICAgICBkZWxldGUgc2NlbmUubG9hZGluZ0N0cmw7XHJcbiAgICAgICAgc2NlbmUuY3RybCA9IG5ldyBCb29rQ29udHJvbGxlcihzY2VuZS5ib29rLCBzY2VuZS52aWV3LCBvcHRpb25zLmNvbnRyb2xzUHJvcHMpO1xyXG4gICAgICAgIHNjZW5lLmJvb2suc2V0SW5qZWN0b3IoKHcpPT4ge1xyXG4gICAgICAgICAgdy5qUXVlcnkgPSB3LiQgPSAkO1xyXG4gICAgICAgICAgdy5ib29rID0gc2NlbmUuYm9vaztcclxuICAgICAgICAgIHcuYm9va0N0cmwgPSBzY2VuZS5jdHJsO1xyXG4gICAgICAgICAgaWYocHJvcHMuaW5qZWN0b3IpIHtcclxuICAgICAgICAgICAgcHJvcHMuaW5qZWN0b3Iodyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2NlbmUudmlldy5hZGRIYW5kbGVyKHNjZW5lLmN0cmwpO1xyXG4gICAgICAgIHNjZW5lLmN0cmwuc2V0UHJpbnRlcihzY2VuZS5ib29rUHJpbnRlcik7XHJcbiAgICAgICAgY29uc3QgdGVzdCA9IHBhZ2VDYWxsYmFjaygwKTtcclxuXHJcbiAgICAgICAgc2NlbmUuc2VhcmNoID0gbmV3IFNlYXJjaChzY2VuZS52aWV3LmdldFNlYXJjaFZpZXcoKSwgc2NlbmUuYm9vay5nZXRQYWdlcygpKTtcclxuICAgICAgICBzY2VuZS5zZWFyY2gub25RdWVyeSA9IHNjZW5lLmJvb2suc2V0UXVlcnkuYmluZChzY2VuZS5ib29rKTtcclxuICAgICAgICBzY2VuZS5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ3NlYXJjaFJlc3VsdHMnLCAoZSk9PiB7XHJcbiAgICAgICAgICBzY2VuZS5zZWFyY2guc2V0UmVzdWx0cyhlLnJlc3VsdHMsIGUubGFzdFBhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzY2VuZS50aHVtYm5haWxzID0gbmV3IFRodW1ibmFpbHMoc2NlbmUudmlzdWFsLCBzY2VuZS52aWV3LmdldFRodW1ibmFpbHNWaWV3KCksIHBhZ2VDYWxsYmFjaywgc2NlbmUuYm9vay5nZXRQYWdlcygpLCB7a1d0b0g6IHByb3BzLndpZHRoL3Byb3BzLmhlaWdodH0pO1xyXG4gICAgICAgIHNjZW5lLnRvY0N0cmwgPSBuZXcgVG9jQ29udHJvbGxlcihzY2VuZS52aWV3LCBzY2VuZS5jdHJsKTtcclxuICAgICAgICBzY2VuZS50b2NDdHJsLnNldFRodW1ibmFpbHMoc2NlbmUudGh1bWJuYWlscyk7XHJcbiAgICAgICAgc2NlbmUudG9jQ3RybC5zZXRTZWFyY2goc2NlbmUuc2VhcmNoKTtcclxuICAgICAgICBzY2VuZS5jdHJsLnNldFRvY0N0cmwoc2NlbmUudG9jQ3RybCk7XHJcbiAgICAgICAgc2NlbmUudmlldy5hZGRIYW5kbGVyKHNjZW5lLnRvY0N0cmwpO1xyXG5cclxuICAgICAgICBpZih0ZXN0LnR5cGU9PT0ncGRmJykge1xyXG4gICAgICAgICAgc2NlbmUucGRmTGlua3NIYW5kbGVyID0gbmV3IFBkZkxpbmtzSGFuZGxlcih0ZXN0LnNyYywgc2NlbmUuY3RybCwgc2NlbmUudmlzdWFsLmVsZW1lbnQpO1xyXG4gICAgICAgICAgc2NlbmUuYm9vay5hZGRFdmVudExpc3RlbmVyKCdwZGZBbm5vdGF0aW9uJywgc2NlbmUucGRmTGlua3NIYW5kbGVyLmhhbmRsZUV2ZW50LmJpbmQoc2NlbmUucGRmTGlua3NIYW5kbGVyKSk7XHJcbiAgICAgICAgICB0ZXN0LnNyYy5nZXRIYW5kbGVyKChoYW5kbGVyKT0+IHtcclxuICAgICAgICAgICAgaGFuZGxlci5nZXRPdXRsaW5lKCkuXHJcbiAgICAgICAgICAgICAgdGhlbigob3V0bGluZSk9PiB7XHJcbiAgICAgICAgICAgICAgICBzY2VuZS5ib29rbWFya3MgPSBuZXcgQm9va21hcmtzKHNjZW5lLnZpZXcuZ2V0Qm9va21hcmtzVmlldygpLCBvdXRsaW5lKTtcclxuICAgICAgICAgICAgICAgIHNjZW5lLnRvY0N0cmwuc2V0Qm9va21hcmtzKHNjZW5lLmJvb2ttYXJrcywgdGVzdC5zcmMpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBpZihvcHRpb25zLnBkZkxpbmtzICYmIG9wdGlvbnMucGRmTGlua3MuaGFuZGxlcikge1xyXG4gICAgICAgICAgICBzY2VuZS5wZGZMaW5rc0hhbmRsZXIuc2V0SGFuZGxlcihvcHRpb25zLnBkZkxpbmtzLmhhbmRsZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2NlbmUuc291bmRzID0gbmV3IFNvdW5kc0Vudmlyb21lbnQob3B0aW9ucy50ZW1wbGF0ZSk7XHJcbiAgICAgICAgc2NlbmUuY3RybC5zZXRTb3VuZHMoc2NlbmUuc291bmRzKTtcclxuICAgICAgICBzY2VuZS5zb3VuZHMuc3Vic2NyaWJlRmxpcHMoc2NlbmUuY3RybCk7XHJcblxyXG4gICAgICAgIHNjZW5lLnJlYWR5ID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCBhdXRvTmF2aWdhdG9yID0gbmV3IEF1dG9OYXZpZ2F0b3Ioc2NlbmUudmlzdWFsLCBzY2VuZS5jdHJsLCBvcHRpb25zLmF1dG9OYXZpZ2F0aW9uKTtcclxuICAgICAgICBzY2VuZS5zaGFyZUN0cmwgPSBuZXcgU2hhcmVDb250cm9sbGVyKHNjZW5lLnZpZXcsIHNjZW5lLmN0cmwsIG9wdGlvbnMuc2hhcmVMaW5rQnVpbGRlcj8gb3B0aW9ucy5zaGFyZUxpbmtCdWlsZGVyOiAocGFnZSk9PiB7XHJcbiAgICAgICAgICBsZXQgdTtcclxuICAgICAgICAgIGlmKG5ldyBSZWdFeHAoJyhbPyZdKScrYXV0b05hdmlnYXRvci51cmxQYXJhbSsnPVswLTldKycpLnRlc3QobG9jYXRpb24uaHJlZikpIHtcclxuICAgICAgICAgICAgdSA9IGxvY2F0aW9uLmhyZWYucmVwbGFjZShuZXcgUmVnRXhwKCcoWz8mXSknK2F1dG9OYXZpZ2F0b3IudXJsUGFyYW0rJz1bMC05XSsnKSwgJyQxJythdXRvTmF2aWdhdG9yLnVybFBhcmFtKyc9JytwYWdlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB1ID0gbG9jYXRpb24uaHJlZi5zcGxpdCgnIycpWzBdKyh+bG9jYXRpb24uaHJlZi5pbmRleE9mKCc/Jyk/ICcmJzogJz8nKSthdXRvTmF2aWdhdG9yLnVybFBhcmFtKyc9JytwYWdlK2xvY2F0aW9uLmhhc2g7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBzY2VuZS5jdHJsLnNldFNoYXJlQ3RybChzY2VuZS5zaGFyZUN0cmwpO1xyXG4gICAgICAgIHNjZW5lLnZpZXcuYWRkSGFuZGxlcihzY2VuZS5zaGFyZUN0cmwpO1xyXG4gICAgICAgIGF1dG9OYXZpZ2F0b3IuZGlzcG9zZSgpO1xyXG4gICAgICAgIGlmKG9wdGlvbnMucmVhZHkpIHtcclxuICAgICAgICAgIG9wdGlvbnMucmVhZHkoc2NlbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5jdHJsLnJlYWR5KHNjZW5lKTtcclxuICAgICAgICBpZihzY2VuZS5wZW5kaW5nRGlzcG9zZSkge1xyXG4gICAgICAgICAgc2NlbmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgY29uc3Qgb25FcnJvciA9IChlKT0+IHtcclxuICAgICAgICAhc2NlbmUubG9hZGluZ0N0cmwgfHwgc2NlbmUubG9hZGluZ0N0cmwuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRlbGV0ZSBzY2VuZS5sb2FkaW5nQ3RybDtcclxuICAgICAgICBzY2VuZS51c2VyTWVzc2FnZUN0cmwuc2V0RXJyb3IoZS5tZXNzYWdlKTtcclxuICAgICAgfTtcclxuICAgICAgaWYob3B0aW9ucy5wZGYpIHtcclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIgPSBuZXcgUGRmQm9va1Byb3BzQnVpbGRlcihvcHRpb25zLnBkZiwgc2NlbmUuYm9va0J1aWxkZXIsIG9wdGlvbnMuYm9va1N0eWxlKTtcclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIucGRmLnNldExvYWRpbmdQcm9ncmVzc0NsYihzY2VuZS5sb2FkaW5nQ3RybC5zZXRQcm9ncmVzcy5iaW5kKHNjZW5lLmxvYWRpbmdDdHJsKSk7XHJcbiAgICAgICAgc2NlbmUucHJvcHNCdWlsZGVyLnBkZi5zZXRFcnJvckhhbmRsZXIob3B0aW9ucy5lcnJvciB8fCBvbkVycm9yKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKG9wdGlvbnMucGFnZUNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYob3B0aW9ucy5vblBhZ2VDYWxsYmFja0Vycm9yKSB7XHJcbiAgICAgICAgICBvcHRpb25zLm9uUGFnZUNhbGxiYWNrRXJyb3IucHVzaChvcHRpb25zLmVycm9yIHx8IG9uRXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY2VuZS5wcm9wc0J1aWxkZXIgPSBuZXcgQ2xiQm9va1Byb3BzQnVpbGRlcihzY2VuZS52aXN1YWwsIG9wdGlvbnMucGFnZUNhbGxiYWNrLCBvcHRpb25zLnBhZ2VzLCBzY2VuZS5ib29rQnVpbGRlciwgb3B0aW9ucy5ib29rU3R5bGUpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNjZW5lLnByb3BzQnVpbGRlciA9IG5ldyBDbGJCb29rUHJvcHNCdWlsZGVyKHNjZW5lLnZpc3VhbCwgQm9vay5wYWdlQ2FsbGJhY2ssIDYsIHNjZW5lLmJvb2tCdWlsZGVyLCBvcHRpb25zLmJvb2tTdHlsZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LCBvcHRpb25zLnRlbXBsYXRlKTtcclxuICByZXR1cm4gc2NlbmU7XHJcbn1cclxuXHJcbiQoKCk9PiB7XHJcbiAgbGV0IGNvbnRhaW5lcnMgPSAkKCcuZmxpcC1ib29rLWNvbnRhaW5lcicpO1xyXG4gIGZvcihsZXQgaSA9IDA7IGk8Y29udGFpbmVycy5sZW5ndGg7ICsraSkge1xyXG4gICAgY29uc3QgakNvbnRhaW5lciA9ICQoY29udGFpbmVyc1tpXSksIHNyYyA9IGpDb250YWluZXIuYXR0cignc3JjJyk7XHJcbiAgICBpZighIXNyYykge1xyXG4gICAgICBqQ29udGFpbmVyLkZsaXBCb29rKHtwZGY6IHNyY30pO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcblxyXG53aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSAkO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9pbmRleC5qcyIsImlmICghQXJyYXkucHJvdG90eXBlLmZpbGwpIHtcclxuICBBcnJheS5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggMS0yLlxyXG4gICAgaWYgKHRoaXMgPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0aGlzIGlzIG51bGwgb3Igbm90IGRlZmluZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgTyA9IE9iamVjdCh0aGlzKTtcclxuXHJcbiAgICAvLyDQqNCw0LPQuCAzLTUuXHJcbiAgICB2YXIgbGVuID0gTy5sZW5ndGggPj4+IDA7XHJcblxyXG4gICAgLy8g0KjQsNCz0LggNi03LlxyXG4gICAgdmFyIHN0YXJ0ID0gYXJndW1lbnRzWzFdO1xyXG4gICAgdmFyIHJlbGF0aXZlU3RhcnQgPSBzdGFydCA+PiAwO1xyXG5cclxuICAgIC8vINCo0LDQsyA4LlxyXG4gICAgdmFyIGsgPSByZWxhdGl2ZVN0YXJ0IDwgMCA/XHJcbiAgICAgIE1hdGgubWF4KGxlbiArIHJlbGF0aXZlU3RhcnQsIDApIDpcclxuICAgICAgTWF0aC5taW4ocmVsYXRpdmVTdGFydCwgbGVuKTtcclxuXHJcbiAgICAvLyDQqNCw0LPQuCA5LTEwLlxyXG4gICAgdmFyIGVuZCA9IGFyZ3VtZW50c1syXTtcclxuICAgIHZhciByZWxhdGl2ZUVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID9cclxuICAgICAgbGVuIDogZW5kID4+IDA7XHJcblxyXG4gICAgLy8g0KjQsNCzIDExLlxyXG4gICAgdmFyIGZpbmFsID0gcmVsYXRpdmVFbmQgPCAwID9cclxuICAgICAgTWF0aC5tYXgobGVuICsgcmVsYXRpdmVFbmQsIDApIDpcclxuICAgICAgTWF0aC5taW4ocmVsYXRpdmVFbmQsIGxlbik7XHJcblxyXG4gICAgLy8g0KjQsNCzIDEyLlxyXG4gICAgd2hpbGUgKGsgPCBmaW5hbCkge1xyXG4gICAgICBPW2tdID0gdmFsdWU7XHJcbiAgICAgIGsrKztcclxuICAgIH1cclxuXHJcbiAgICAvLyDQqNCw0LMgMTMuXHJcbiAgICByZXR1cm4gTztcclxuICB9O1xyXG59XHJcblxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XHJcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFycmF5LnByb3RvdHlwZSwgJ2ZpbmQnLCB7XHJcbiAgICB2YWx1ZTogZnVuY3Rpb24ocHJlZGljYXRlKSB7XHJcbiAgICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgIGlmICh0aGlzID09IG51bGwpIHtcclxuICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LnByb3RvdHlwZS5maW5kIGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG4gICAgIH1cclxuICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgIH1cclxuICAgICB2YXIgbGlzdCA9IE9iamVjdCh0aGlzKTtcclxuICAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGggPj4+IDA7XHJcbiAgICAgdmFyIHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XHJcbiAgICAgdmFyIHZhbHVlO1xyXG5cclxuICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICB2YWx1ZSA9IGxpc3RbaV07XHJcbiAgICAgICBpZiAocHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGksIGxpc3QpKSB7XHJcbiAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgIH1cclxuICAgICB9XHJcbiAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuaWYgKCFBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KSB7XHJcbiAgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xyXG4gICAgaWYgKHRoaXMgPT0gbnVsbCkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmluZEluZGV4IGNhbGxlZCBvbiBudWxsIG9yIHVuZGVmaW5lZCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncHJlZGljYXRlIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgfVxyXG4gICAgdmFyIGxpc3QgPSBPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGggPj4+IDA7XHJcbiAgICB2YXIgdGhpc0FyZyA9IGFyZ3VtZW50c1sxXTtcclxuICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhbHVlID0gbGlzdFtpXTtcclxuICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpLCBsaXN0KSkge1xyXG4gICAgICAgIHJldHVybiBpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gLTE7XHJcbiAgfTtcclxufVxyXG5cclxuaWYgKCFPYmplY3QudmFsdWVzKSB7XHJcblx0T2JqZWN0LnZhbHVlcyA9IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoTykubWFwKChuYW1lKT0+T1tuYW1lXSkgfHwgW107XHJcblx0fTtcclxufVxyXG5cclxuaWYoIVJlZ0V4cC5lc2NhcGUpIHtcclxuICBSZWdFeHAuZXNjYXBlID0gZnVuY3Rpb24ocykge1xyXG4gICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XHJcbiAgfTtcclxufVxyXG5cclxuaWYoIVN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCkge1xyXG4gIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZUFsbCA9IGZ1bmN0aW9uKHNlYXJjaCwgcmVwbGFjZSkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwbGFjZShuZXcgUmVnRXhwKFJlZ0V4cC5lc2NhcGUoc2VhcmNoKSwgJ2cnKSwgcmVwbGFjZSk7XHJcbiAgfTtcclxufVxyXG5cclxuaWYoIVN0cmluZy5wcm90b3R5cGUuZmIzZFFGaWx0ZXIpIHtcclxuICBTdHJpbmcucHJvdG90eXBlLmZiM2RRRmlsdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC8oXFxufFxcdHwgICkvZywgJycpO1xyXG4gIH07XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL3BvbHlmaWxsLmpzIiwiXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dG9OYXZpZ2F0b3Ige1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBib29rQ3RybCwgcHJvcHM9e30pIHtcclxuICAgIHByb3BzID0ge1xyXG4gICAgICAuLi5wcm9wcyxcclxuICAgICAgdXJsUGFyYW06IHByb3BzLnVybFBhcmFtIHx8ICdmYjNkLXBhZ2UnLFxyXG4gICAgICBuYXZpZ2F0ZXM6IHByb3BzLm5hdmlnYXRlcz09PXVuZGVmaW5lZD8gMTogcHJvcHMubmF2aWdhdGVzLFxyXG4gICAgICBwYWdlTjogcHJvcHMucGFnZU4gfHwgMFxyXG4gICAgfTtcclxuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLmJvb2tDdHJsID0gYm9va0N0cmw7XHJcbiAgICB0aGlzLnVybFBhcmFtID0gcHJvcHMudXJsUGFyYW07XHJcbiAgICB0aGlzLnBhZ2VOID0gcHJvcHMucGFnZU47XHJcbiAgICB0aGlzLnduZCA9IGNvbnRleHQud25kO1xyXG5cclxuICAgIHRoaXMud25kLmZiM2QgPSB7XHJcbiAgICAgIC4uLnRoaXMud25kLmZiM2RcclxuICAgIH07XHJcbiAgICB0aGlzLnduZC5mYjNkLm5hdmlnYXRvciA9IHtcclxuICAgICAgLi4udGhpcy53bmQuZmIzZC5uYXZpZ2F0b3JcclxuICAgIH07XHJcbiAgICB0aGlzLm5hdmlnYXRvciA9IHRoaXMud25kLmZiM2QubmF2aWdhdG9yW3RoaXMudXJsUGFyYW1dID0ge1xyXG4gICAgICAuLi50aGlzLnduZC5mYjNkLm5hdmlnYXRvclt0aGlzLnVybFBhcmFtXVxyXG4gICAgfTtcclxuICAgIHRoaXMubmF2aWdhdG9yLmluc3RhbmNlcyA9ICh0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXMgfHwgMCkrMTtcclxuXHJcbiAgICBpZih0aGlzLm5hdmlnYXRvci5pbnN0YW5jZXM8PXRoaXMucHJvcHMubmF2aWdhdGVzKSB7XHJcbiAgICAgIHRoaXMuYm9va0N0cmwuZ29Ub1BhZ2UodGhpcy5nZXRQYWdlTnVtYmVyKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0ZXJCeU5hbWUobmFtZSwgdXJsKSB7XHJcbiAgICBpZiAoIXVybCkge1xyXG4gICAgICB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcclxuICAgIH1cclxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtcXF1dL2csICdcXFxcJCYnKTtcclxuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cCgnWz8mXScgKyBuYW1lICsgJyg9KFteXSopfCZ8I3wkKScpLFxyXG4gICAgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcclxuICAgIGlmICghcmVzdWx0cykgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAoIXJlc3VsdHNbMl0pIHJldHVybiAnJztcclxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlTnVtYmVyKCkge1xyXG4gICAgbGV0IG51bWJlciA9IHBhcnNlSW50KHRoaXMucGFnZU4pO1xyXG4gICAgaWYoaXNOYU4obnVtYmVyKXx8bnVtYmVyPT09MCkge1xyXG4gICAgICBudW1iZXIgPSB0aGlzLmdldFBhcmFtZXRlckJ5TmFtZSh0aGlzLnVybFBhcmFtKTtcclxuICAgICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyKTtcclxuICAgICAgaWYoaXNOYU4obnVtYmVyKSkge1xyXG4gICAgICAgIG51bWJlciA9IDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudW1iZXItMTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQXV0b05hdmlnYXRvci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJ01hdGhVdGlscydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbmRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgcCwgaGlkZGVuPWZhbHNlKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgLi4ucCxcclxuICAgICAgYmFja1NpemU6IDIqcC5jb3Zlci5kZXB0aCtwLnNoZWV0cypwLnBhZ2UuZGVwdGhcclxuICAgIH07XHJcbiAgICB0aGlzLk9aID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwwLDEpO1xyXG5cclxuICAgIHRoaXMuYmFja0cgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkocC5jb3Zlci5kZXB0aCwgdGhpcy5wLmJhY2tTaXplLCBwLmNvdmVyLmhlaWdodCk7XHJcblxyXG4gICAgY29uc3QgY29sb3IgPSB0aGlzLnAuY292ZXIuc2lkZT09PSdjb2xvcic/IHtjb2xvcjogcC5jb3Zlci5jb2xvcn06IHtcclxuICAgICAgY29sb3I6IHAuY292ZXIuY29sb3IsXHJcbiAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMubWF0ZXJpYWxzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKGNvbG9yKSxcclxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbChjb2xvciksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoY29sb3IpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKGNvbG9yKSxcclxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbChjb2xvciksXHJcbiAgICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoY29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgY29uc3QgYmFja00gPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmJhY2tHLCB0aGlzLm1hdGVyaWFscyk7XHJcblxyXG4gICAgaWYocC5jb3Zlci5iaW5kZXJUZXh0dXJlIT09JycpIHtcclxuICAgICAgdGhpcy52aXN1YWwudGV4dHVyZUxvYWRlci5sb2FkKHAuY292ZXIuYmluZGVyVGV4dHVyZSwgKHRleHR1cmUpPT4ge1xyXG4gICAgICAgIHRoaXMubWF0ZXJpYWxzWzFdLmNvbG9yLnNldEhleCgweEZGRkZGRik7XHJcbiAgICAgICAgdGhpcy5tYXRlcmlhbHNbMV0ubWFwID0gdGV4dHVyZTtcclxuICAgICAgICB0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcclxuICAgICAgICB0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm1hdGVyaWFsc1sxXS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudGhyZWUgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFjayA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrUlQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMuYmFja1JSID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLmJhY2tMVCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG4gICAgdGhpcy5iYWNrTFIgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMubGVmdFBpdm90ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHJcbiAgICBpZighaGlkZGVuKSB7XHJcbiAgICAgIHRoaXMuYmFjay5hZGQoYmFja00pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5iYWNrLmFkZCh0aGlzLmxlZnRQaXZvdCk7XHJcbiAgICB0aGlzLmJhY2suYWRkKHRoaXMucmlnaHRQaXZvdCk7XHJcbiAgICB0aGlzLmJhY2tSVC5hZGQodGhpcy5iYWNrKTtcclxuICAgIHRoaXMuYmFja1JSLmFkZCh0aGlzLmJhY2tSVCk7XHJcbiAgICB0aGlzLmJhY2tMVC5hZGQodGhpcy5iYWNrUlIpO1xyXG4gICAgdGhpcy5iYWNrTFIuYWRkKHRoaXMuYmFja0xUKTtcclxuICAgIHRoaXMudGhyZWUuYWRkKHRoaXMuYmFja0xSKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBmb3IobGV0IG0gb2YgdGhpcy5tYXRlcmlhbHMpIHtcclxuICAgICAgaWYobS5tYXApIHtcclxuICAgICAgICBtLm1hcCA9IG51bGw7XHJcbiAgICAgICAgbS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgbS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5tYXRlcmlhbHM7XHJcbiAgICB0aGlzLmJhY2tHLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSkge1xyXG4gICAgbGV0IHJpZ2h0LCBsZWZ0O1xyXG4gICAgaWYoYW5nbGU+TWF0aC5QSS8yKSB7XHJcbiAgICAgIHJpZ2h0ID0gTWF0aC5QSS8yO1xyXG4gICAgICBsZWZ0ID0gYW5nbGUtTWF0aC5QSS8yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJpZ2h0ID0gYW5nbGU7XHJcbiAgICAgIGxlZnQgPSAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcCA9IHRoaXMucCx0cjE9e3g6LTAuNSpwLmNvdmVyLmRlcHRoLHk6MC41KnAuYmFja1NpemUtcC5jb3Zlci5kZXB0aH07XHJcbiAgICB0aGlzLmJhY2tSVC5wb3NpdGlvbi5zZXQodHIxLngsdHIxLnksMCk7XHJcbiAgICB0aGlzLmJhY2tSUi5wb3NpdGlvbi5zZXQoLXRyMS54LC10cjEueSwwKTtcclxuICAgIHRoaXMuYmFja1JSLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCByaWdodCk7XHJcblxyXG4gICAgY29uc3QgdHIyPXt4OnAuYmFja1NpemUtMipwLmNvdmVyLmRlcHRoLTAuNSpwLmNvdmVyLmRlcHRoLHk6MC41KnAuYmFja1NpemUtcC5jb3Zlci5kZXB0aH07XHJcbiAgICB0aGlzLmJhY2tMVC5wb3NpdGlvbi5zZXQodHIyLngsdHIyLnksMCk7XHJcbiAgICB0aGlzLmJhY2tMUi5wb3NpdGlvbi5zZXQoLXRyMi54LC10cjIueSwwKTtcclxuICAgIHRoaXMuYmFja0xSLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSh0aGlzLk9aLCBsZWZ0KTtcclxuICB9XHJcblxyXG4gIHNldExlZnQoYW5nbGUpIHtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIHRoaXMubGVmdFBpdm90LnBvc2l0aW9uLnNldChNYXRoVXRpbHMuaW50ZXJwb2xhdGVMaW5lYXIoWy1QSSwtUEkvMl0sWzAsdGhpcy5wLmNvdmVyLmRlcHRoXSxhbmdsZSksMC41KnRoaXMucC5iYWNrU2l6ZS0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKHRoaXMuT1osIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIHNldFJpZ2h0KGFuZ2xlKSB7XHJcbiAgICBjb25zdCBQSSA9IE1hdGguUEk7XHJcbiAgICAgIHRoaXMucmlnaHRQaXZvdC5wb3NpdGlvbi5zZXQoTWF0aFV0aWxzLmludGVycG9sYXRlTGluZWFyKFstUEkvMiwwXSxbdGhpcy5wLmNvdmVyLmRlcHRoLDBdLGFuZ2xlKSwtMC41KnRoaXMucC5iYWNrU2l6ZSswLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgICB0aGlzLnJpZ2h0UGl2b3QucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKHRoaXMuT1osIGFuZ2xlKTtcclxuICB9XHJcblxyXG4gIGpvaW5MZWZ0Q292ZXIoY292ZXIpIHtcclxuICAgIGNvdmVyLnRocmVlLnBvc2l0aW9uLnNldCgwLC0wLjUqdGhpcy5wLmNvdmVyLmRlcHRoLDApO1xyXG4gICAgdGhpcy5sZWZ0UGl2b3QuYWRkKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RMZWZ0Q292ZXIoY292ZXIpIHtcclxuICAgIHRoaXMubGVmdFBpdm90LnJlbW92ZShjb3Zlci50aHJlZSk7XHJcbiAgfVxyXG5cclxuICBqb2luUmlnaHRDb3Zlcihjb3Zlcikge1xyXG4gICAgY292ZXIudGhyZWUucG9zaXRpb24uc2V0KDAsLTAuNSp0aGlzLnAuY292ZXIuZGVwdGgsMCk7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QuYWRkKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RSaWdodENvdmVyKGNvdmVyKSB7XHJcbiAgICB0aGlzLnJpZ2h0UGl2b3QucmVtb3ZlKGNvdmVyLnRocmVlKTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0JpbmRlci5qcyIsImltcG9ydCB7JCwgVEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQge3Byb3BzIGFzICBib29rUHJvcHN9IGZyb20gJy4uL3Byb3BzL2Jvb2snO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICdHcmFwaFV0aWxzJztcclxuaW1wb3J0IEJpbmRlciBmcm9tICcuL0JpbmRlcic7XHJcbmltcG9ydCBDb3ZlciBmcm9tICcuL0NvdmVyJztcclxuaW1wb3J0IFNoZWV0QmxvY2sgZnJvbSAnLi9TaGVldEJsb2NrJztcclxuaW1wb3J0IFNoZWV0UGh5c2ljcyBmcm9tICcuL1NoZWV0UGh5c2ljcyc7XHJcbmltcG9ydCBQYWdlTWFuYWdlciBmcm9tICcuL1BhZ2VNYW5hZ2VyJztcclxuaW1wb3J0IENTU0xheWVyIGZyb20gJ0NTU0xheWVyJztcclxuaW1wb3J0IENzc0xheWVyc01hbmFnZXIgZnJvbSAnLi9Dc3NMYXllcnNNYW5hZ2VyJztcclxuaW1wb3J0IFNlYXJjaEVuZ2luZSBmcm9tICcuL1NlYXJjaEVuZ2luZSc7XHJcbmltcG9ydCBDdXN0b21FdmVudENvbnZlcnRlciBmcm9tICdDdXN0b21FdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBDaXJjbGVUYXJnZXQgZnJvbSAndGFyZ2V0cy9DaXJjbGVUYXJnZXQnO1xyXG5pbXBvcnQgWW91VHViZUFwaSBmcm9tICdZb3VUdWJlQXBpJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2sgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG4gIC8vIHBhZ2VDYWxsYmFjayBzYW1wbGVzXHJcblxyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaW1hZ2UnLFxyXG4gIC8vICAgc3JjOiAnc2FtcGxlLnBuZycsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogZmFsc2VcclxuICAvLyB9KTtcclxuICAvL1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAnaHRtbCcsXHJcbiAgLy8gICBzcmM6ICdzYW1wbGUuaHRtbCcsXHJcbiAgLy8gICBpbnRlcmFjdGl2ZTogdHJ1ZVxyXG4gIC8vIH0pO1xyXG4gIC8vXHJcbiAgLy8gY29uc3QgcGRmID0gbmV3IFBkZignc2FtcGxlLnBkZicpO1xyXG4gIC8vIChuKT0+ICh7XHJcbiAgLy8gICB0eXBlOiAncGRmJyxcclxuICAvLyAgIHNyYzogcGRmLFxyXG4gIC8vICAgaW50ZXJhY3RpdmU6IGZhbHNlXHJcbiAgLy8gfSk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgc2hlZXRzLCBwYWdlQ2FsbGJhY2ssIHByb3BzKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IHRydWU7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIC4uLnRoaXMucHJlcGFyZVByb3BzKHByb3BzKSxcclxuICAgICAgc2hlZXRzLFxyXG4gICAgICBwYWdlQ2FsbGJhY2ssXHJcbiAgICAgIHpvb206IDEsXHJcbiAgICAgIHNpbmdsZVBhZ2U6IGZhbHNlLFxyXG4gICAgICBhdXRvUmVzb2x1dGlvbjoge1xyXG4gICAgICAgIGVuYWJsZTogZmFsc2UsXHJcbiAgICAgICAgazogMS41XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLnVzZXJEaXJlY3Rpb24gPSB7XHJcbiAgICAgIGxhc3RUb3BQYWdlOiAwLFxyXG4gICAgICBkaXJlY3Rpb246IDFcclxuICAgIH07XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyID0gbmV3IFBhZ2VNYW5hZ2VyKHZpc3VhbCwgdGhpcywgdGhpcy5wKTtcclxuICAgIENTU0xheWVyLmluaXQodmlzdWFsLmRvYyk7XHJcbiAgICB0aGlzLmxheWVyTWFuYWdlciA9IG5ldyBDc3NMYXllcnNNYW5hZ2VyKHRoaXMpO1xyXG4gICAgdGhpcy5zZWFyY2hFbmdpbmUgPSBuZXcgU2VhcmNoRW5naW5lKHBhZ2VDYWxsYmFjaywgMiooc2hlZXRzKzIpKTtcclxuICAgIHRoaXMuc2VhcmNoRW5naW5lLm9uUGFnZUhpdHNDaGFuZ2VkID0gKHBhZ2UsIHF1ZXJ5KT0+IHtcclxuICAgICAgdGhpcy5wYWdlTWFuYWdlci5yZWZyZXNoUGFnZVF1ZXJ5KHBhZ2UsIHF1ZXJ5KTtcclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICB0eXBlOiAnc2VhcmNoUmVzdWx0cycsXHJcbiAgICAgICAgcmVzdWx0czogdGhpcy5zZWFyY2hFbmdpbmUucmVzdWx0cyxcclxuICAgICAgICBsYXN0UGFnZTogcGFnZSxcclxuICAgICAgICBxdWVyeVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy50aHJlZSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG5cclxuICAgIHRoaXMuYmluZGVyID0gbmV3IEJpbmRlcih2aXN1YWwsIHRoaXMucCwgdGhpcy5nZXRQYWdlcygpPCAzKTtcclxuICAgIHRoaXMudGhyZWUuYWRkKHRoaXMuYmluZGVyLnRocmVlKTtcclxuXHJcbiAgICBjb25zdCBjb3ZlclAgPSB7XHJcbiAgICAgIGxlZnQ6IHRoaXMucC5jb3ZlcixcclxuICAgICAgcmlnaHQ6IHRoaXMucC5jb3ZlclxyXG4gICAgfTtcclxuICAgIHRoaXMuZW5hYmxlTW91c2UodGhpcy5wLmludGVyYWN0aXZlQ29ybmVycyk7XHJcbiAgICBpZih0aGlzLmdldFBhZ2VzKCk9PT0yKSB7XHJcbiAgICAgIHRoaXMuZW5hYmxlTW91c2UoZmFsc2UpO1xyXG4gICAgICBjb3ZlclBbdGhpcy5wLnJ0bD8gJ2xlZnQnOiAncmlnaHQnXSA9IHtcclxuICAgICAgICAuLi50aGlzLnAuY292ZXIsXHJcbiAgICAgICAgd2lkdGg6IDFlLTYsXHJcbiAgICAgICAgaGVpZ2h0OiAxZS02XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICB0aGlzLmxlZnRDb3ZlciA9IG5ldyBDb3Zlcih2aXN1YWwsIHsuLi50aGlzLnAsIGNvdmVyOiBjb3ZlclAubGVmdCwgc2V0VGV4dHVyZTogdGhpcy5zZXRMZWZ0Q292ZXJUZXh0dXJlLmJpbmQodGhpcyl9LCBNYXRoLlBJLzIsICdvcGVuZWQnKTtcclxuICAgIHRoaXMuYmluZGVyLmpvaW5MZWZ0Q292ZXIodGhpcy5sZWZ0Q292ZXIpO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVTaGVldEJsb2NrKHRoaXMubGVmdENvdmVyLCAwKTtcclxuICAgIHRoaXMucmlnaHRDb3ZlciA9IG5ldyBDb3Zlcih2aXN1YWwsIHsuLi50aGlzLnAsIGNvdmVyOiBjb3ZlclAucmlnaHQsIHNldFRleHR1cmU6IHRoaXMuc2V0UmlnaHRDb3ZlclRleHR1cmUuYmluZCh0aGlzKX0sIDAsICdjbG9zZWQnKTtcclxuICAgIHRoaXMuYmluZGVyLmpvaW5SaWdodENvdmVyKHRoaXMucmlnaHRDb3Zlcik7XHJcbiAgICB0aGlzLnN1YnNjcmliZVNoZWV0QmxvY2sodGhpcy5yaWdodENvdmVyLCAyKih0aGlzLnAuc2hlZXRzKzEpKTtcclxuXHJcbiAgICB0aGlzLnRocmVlU2hlZXRCbG9ja3MgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuICAgIHRoaXMudGhyZWUuYWRkKHRoaXMudGhyZWVTaGVldEJsb2Nrcyk7XHJcbiAgICB0aGlzLnRocmVlU2hlZXRCbG9ja3MucG9zaXRpb24uc2V0KDAuNSp0aGlzLnAuY292ZXIuZGVwdGgtMC41KnNoZWV0cyp0aGlzLnAucGFnZS5kZXB0aCwtMC41KnNoZWV0cyp0aGlzLnAucGFnZS5kZXB0aCwwKTtcclxuXHJcbiAgICB0aGlzLnNoZWV0QmxvY2tzID0gW107XHJcbiAgICBpZihzaGVldHM+MCkge1xyXG4gICAgICB0aGlzLmFkZFNoZWV0QmxvY2soMCwgbmV3IFNoZWV0QmxvY2sodmlzdWFsLCB7Li4udGhpcy5wLCBzZXRUZXh0dXJlOiB0aGlzLnNldFBhZ2VUZXh0dXJlLmJpbmQodGhpcyl9LCAwLCBzaGVldHMsIDAsICdjbG9zZWQnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXQoTWF0aC5QSS8yKTtcclxuICAgIHRoaXMub3BlbmVkQm94ID0gbmV3IFRIUkVFLkJveDMoKS5zZXRGcm9tT2JqZWN0KHRoaXMubGVmdENvdmVyLnRocmVlKTtcclxuICAgIHRoaXMub3BlbmVkQm94LnVuaW9uKG5ldyBUSFJFRS5Cb3gzKCkuc2V0RnJvbU9iamVjdCh0aGlzLnJpZ2h0Q292ZXIudGhyZWUpKTtcclxuXHJcbiAgICB0aGlzLmFuZ2xlID0gdGhpcy5wLnJ0bD8gTWF0aC5QSTogMDtcclxuICAgIHRoaXMuY2xvc2VkQW5nbGUgPSAwO1xyXG4gICAgdGhpcy5zZXQodGhpcy5hbmdsZSwwKTtcclxuICAgIHRoaXMubGFzdE1vdXNlUG9zID0ge1xyXG4gICAgICB0OiAwXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucGVuZGluZ1BsYXllcnMgPSBbXTtcclxuXHJcbiAgICB0aGlzLnRocmVlLnBvc2l0aW9uLnNldCgtMC41KnRoaXMucC5jb3Zlci5kZXB0aCswLjUqc2hlZXRzKnRoaXMucC5wYWdlLmRlcHRoLDAsMCk7XHJcbiAgICB0aGlzLnNoZWV0UGh5c2ljcyA9IG5ldyBTaGVldFBoeXNpY3ModGhpcy5wLnBhZ2Uud2lkdGgvdGhpcy5wLnNjYWxlLCB0aGlzLnAuZ3Jhdml0eSwgdGhpcy5wLnBhZ2UuY29ybmVyRGV2aWF0aW9uKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICB1cGRhdGU6IHRoaXMudXBkYXRlLmJpbmQodGhpcyksXHJcbiAgICAgIGxhc3RNb3VzZVBvczogKGUpPT4ge1xyXG4gICAgICAgIHRoaXMubGFzdE1vdXNlUG9zID0ge1xyXG4gICAgICAgICAgLi4udGhpcy5sYXN0TW91c2VQb3MsXHJcbiAgICAgICAgICBwYWdlWDogZS5wYWdlWCxcclxuICAgICAgICAgIHBhZ2VZOiBlLnBhZ2VZXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMudmlzdWFsLmFkZFJlbmRlckNhbGxiYWNrKHRoaXMuYmluZHMudXBkYXRlKTtcclxuICAgICQodGhpcy52aXN1YWwuZWxlbWVudCkub24oJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubGFzdE1vdXNlUG9zKTtcclxuXHJcbiAgICB0aGlzLmJpbmRzLm9uUGlja0NhbGxiYWNrID0gdGhpcy5vblBpY2tDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLm9uUGlja0NhbGxiYWNrID0gdGhpcy5iaW5kcy5vblBpY2tDYWxsYmFjaztcclxuICAgIHRoaXMuYmluZHMub25EcmFnQ2FsbGJhY2sgPSB0aGlzLm9uRHJhZ0NhbGxiYWNrLmJpbmQodGhpcylcclxuICAgIHRoaXMudmlzdWFsLmRyYWcub25EcmFnQ2FsbGJhY2sgPSB0aGlzLmJpbmRzLm9uRHJhZ0NhbGxiYWNrO1xyXG4gICAgdGhpcy5iaW5kcy5vblJlbGVhc2VDYWxsYmFjayA9IHRoaXMub25SZWxlYXNlQ2FsbGJhY2suYmluZCh0aGlzKVxyXG4gICAgdGhpcy52aXN1YWwuZHJhZy5vblJlbGVhc2VDYWxsYmFjayA9IHRoaXMuYmluZHMub25SZWxlYXNlQ2FsbGJhY2s7XHJcblxyXG4gICAgdGhpcy5kcmFnQW5nbGUgPSAwLjA1O1xyXG4gICAgdGhpcy50bXAgPSB7XHJcbiAgICAgIGJveHM6IFtcclxuICAgICAgICBuZXcgVEhSRUUuQm94MygpLFxyXG4gICAgICAgIG5ldyBUSFJFRS5Cb3gzKClcclxuICAgICAgXVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnZpc3VhbC5hZGRPYmplY3QodGhpcy50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnBhZ2VNYW5hZ2VyLnJlZnJlc2hab29tLmJpbmQodGhpcy5wYWdlTWFuYWdlcikpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgIGlmKCF0aGlzLmlzUHJvY2Vzc2luZygpKSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnlCZWZvcmVBbmltYXRpb24oKTtcclxuICAgICAgICB0aGlzLm5vdGlmeUFmdGVyQW5pbWF0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIH0sIDEwMCk7XHJcblxyXG4gICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMudmlzdWFsLnJlbW92ZU9iamVjdCh0aGlzLnRocmVlKTtcclxuICAgIHRoaXMuc2hlZXRQaHlzaWNzLmRpc3Bvc2UoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnZpc3VhbC5kcmFnLm9uUGlja0NhbGxiYWNrO1xyXG4gICAgZGVsZXRlIHRoaXMudmlzdWFsLmRyYWcub25EcmFnQ2FsbGJhY2s7XHJcbiAgICBkZWxldGUgdGhpcy52aXN1YWwuZHJhZy5vblJlbGVhc2VDYWxsYmFjaztcclxuICAgICQodGhpcy52aXN1YWwuZWxlbWVudCkub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLmxhc3RNb3VzZVBvcyk7XHJcbiAgICB0aGlzLnZpc3VhbC5yZW1vdmVSZW5kZXJDYWxsYmFjayh0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2tzKDAsIHRoaXMuc2hlZXRCbG9ja3MubGVuZ3RoKTtcclxuICAgIHRoaXMuYmluZGVyLmRpc2Nvbm5lY3RMZWZ0Q292ZXIodGhpcy5sZWZ0Q292ZXIpO1xyXG4gICAgdGhpcy5yZW1vdmVTaGVldEJsb2NrKHRoaXMubGVmdENvdmVyKTtcclxuICAgIHRoaXMuYmluZGVyLmRpc2Nvbm5lY3RSaWdodENvdmVyKHRoaXMucmlnaHRDb3Zlcik7XHJcbiAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2sodGhpcy5yaWdodENvdmVyKTtcclxuICAgIHRoaXMuYmluZGVyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMubGF5ZXJNYW5hZ2VyLmRpc3Bvc2UoKTtcclxuICAgIENTU0xheWVyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gcHVibGljcyB7XHJcblxyXG4gIGhhc1BlbmRpbmdQbGF5ZXJzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ1BsYXllcnMubGVuZ3RoPjA7XHJcbiAgfVxyXG5cclxuICByZXNvbHZlUGVuZGluZ1BsYXllcnMoKSB7XHJcbiAgICBmb3IobGV0IHAgb2YgdGhpcy5wZW5kaW5nUGxheWVycykge1xyXG4gICAgICBwLnBsYXkoKTtcclxuICAgIH1cclxuICAgIHRoaXMucGVuZGluZ1BsYXllcnMgPSBbXTtcclxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcbiAgICAgIHR5cGU6ICdwZW5kaW5nUGxheWVycydcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVGhyZWUoKSB7XHJcbiAgICB0aGlzLnRocmVlLnVzZXJEYXRhLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHNldEF1dG9SZXNvbHV0aW9uKGVuYWJsZSwgaz0xLjUpIHtcclxuICAgIHRoaXMucC5hdXRvUmVzb2x1dGlvbiA9IHtcclxuICAgICAgLi4udGhpcy5wLmF1dG9SZXNvbHV0aW9uLFxyXG4gICAgICBlbmFibGUsXHJcbiAgICAgIGtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRab29tKHpvb20sIHNpbmdsZVBhZ2UpIHtcclxuICAgIGlmKE1hdGguYWJzKHRoaXMucC56b29tLXpvb20pPjFlLTMgfHwgc2luZ2xlUGFnZSE9PXRoaXMucC5zaW5nbGVQYWdlKSB7XHJcbiAgICAgIHRoaXMucC56b29tID0gem9vbTtcclxuICAgICAgdGhpcy5wLnNpbmdsZVBhZ2UgPSBzaW5nbGVQYWdlO1xyXG4gICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnJlZnJlc2hab29tKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlQ2FsbGJhY2soKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLnBhZ2VDYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHNldFF1ZXJ5KHF1ZXJ5KSB7XHJcbiAgICB0aGlzLnNlYXJjaEVuZ2luZS5zZXRRdWVyeShxdWVyeSk7XHJcbiAgfVxyXG5cclxuICBpc1Byb2Nlc3NpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpIT09MDtcclxuICB9XHJcblxyXG4gIGdldFBhZ2VzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucC5wYWdlcztcclxuICB9XHJcblxyXG4gIGdldEJvb2tQYWdlcygpIHtcclxuICAgIHJldHVybiA0KzIqdGhpcy5wLnNoZWV0cztcclxuICB9XHJcblxyXG4gIHNldEZsaXBQcm9ncmVzc0NsYihjbGIpIHtcclxuICAgIHRoaXMucC5mbGlwUHJvZ3Jlc3NDbGIgPSBjbGI7XHJcbiAgfVxyXG5cclxuICBzZXRJbmplY3RvcihpbmplY3Rvcikge1xyXG4gICAgdGhpcy5wLmluamVjdG9yID0gaW5qZWN0b3I7XHJcbiAgfVxyXG5cclxuICBpc0FjdGl2ZVBhZ2Uobikge1xyXG4gICAgbGV0IHJlcyA9IHRydWU7XHJcbiAgICBpZihuPjEgJiYgbjx0aGlzLmdldEJvb2tQYWdlcygpLTIpIHtcclxuICAgICAgZm9yKGxldCBiIG9mIHRoaXMuc2hlZXRCbG9ja3MpIHtcclxuICAgICAgICBpZihuLTI+MipiLnAuZmlyc3QgJiYgbi0yPDIqYi5wLmxhc3QtMSkge1xyXG4gICAgICAgICAgcmVzID0gZmFsc2U7XHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIGdldEJsb2NrQnlQYWdlKG4pIHtcclxuICAgIGxldCBibG9jaztcclxuICAgIGlmKG48Mikge1xyXG4gICAgICBibG9jayA9IHRoaXMubGVmdENvdmVyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihuPDIqKHRoaXMucC5zaGVldHMrMSkpIHtcclxuICAgICAgZm9yKGxldCBiIG9mIHRoaXMuc2hlZXRCbG9ja3MpIHtcclxuICAgICAgICBpZihuLTI+PTIqYi5wLmZpcnN0ICYmIG4tMjwyKmIucC5sYXN0KSB7XHJcbiAgICAgICAgICBibG9jayA9IGI7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBibG9jayA9IHRoaXMucmlnaHRDb3ZlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBibG9jaztcclxuICB9XHJcblxyXG4gIGdldEJsb2NrUGFnZXMoYmxvY2spIHtcclxuICAgIGxldCByYW5nZTtcclxuICAgIHN3aXRjaCAoYmxvY2spIHtcclxuICAgICAgY2FzZSB0aGlzLmxlZnRDb3Zlcjoge1xyXG4gICAgICAgICAgcmFuZ2UgPSBbMCwgMV07XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSB0aGlzLnJpZ2h0Q292ZXI6IHtcclxuICAgICAgICByYW5nZSA9IFsyKih0aGlzLnAuc2hlZXRzKzEpLCAyKih0aGlzLnAuc2hlZXRzKzEpKzFdO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICByYW5nZSA9IGJsb2NrPyBbMiooYmxvY2sucC5maXJzdCsxKSwgMiooYmxvY2sucC5sYXN0KzEpLTFdOiB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByYW5nZTtcclxuICB9XHJcblxyXG4gIGdldFBhZ2UoKSB7XHJcbiAgICBjb25zdCBQSSA9IE1hdGguUEk7XHJcbiAgICBsZXQgcDtcclxuICAgIGlmKHRoaXMuYW5nbGUgPT09IFBJLzIgfHwgdGhpcy5hbmdsZSA9PT0gMypQSS8yKSB7XHJcbiAgICAgIGZvcihsZXQgYmxvY2sgb2YgdGhpcy5zaGVldEJsb2Nrcykge1xyXG4gICAgICAgIGlmKGJsb2NrLmFuZ2xlPD1QSS8yKSB7XHJcbiAgICAgICAgICBwID0gdGhpcy5nZXRCbG9ja1BhZ2VzKGJsb2NrKVswXS0xO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmKCFwKSB7XHJcbiAgICAgICAgcCA9IHRoaXMuZ2V0Qm9va1BhZ2VzKCktMztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLmFuZ2xlPFBJLzIpIHtcclxuICAgICAgcCA9IDA7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuYW5nbGU+MypQSS8yKSB7XHJcbiAgICAgIHAgPSAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLmFuZ2xlPFBJKSB7XHJcbiAgICAgIHAgPSB0aGlzLmdldEJvb2tQYWdlcygpLTM7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKHRoaXMuYW5nbGU+PVBJKSB7XHJcbiAgICAgIHAgPSB0aGlzLmdldEJvb2tQYWdlcygpLTE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcDtcclxuICB9XHJcblxyXG4gIGdldFRvcFBhZ2VzKCkge1xyXG4gICAgY29uc3QgcCA9IHRoaXMuZ2V0UGFnZSgpO1xyXG4gICAgcmV0dXJuIHA9PT0wIHx8IHA9PT10aGlzLmdldEJvb2tQYWdlcygpLTE/IFtwXTogW3AsIHArMV07XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlU3RhdGUobikge1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZU1hbmFnZXIuZ2V0UGFnZVN0YXRlKG4pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlTG9hZGluZ0FuaW1hdGlvbihlbmFibGUpIHtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIuZW5hYmxlTG9hZGluZ0FuaW1hdGlvbihlbmFibGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGVmdEZsaXBwaW5nKCkge1xyXG4gICAgbGV0IGJsb2NrO1xyXG4gICAgY29uc3QgbGVmdCA9IHRoaXMuc2hlZXRCbG9ja3NbMF0sIFBJID0gTWF0aC5QSTtcclxuICAgIGlmKHRoaXMuYW5nbGU9PT1QSSkge1xyXG4gICAgICBpZih0aGlzLmdldFBhZ2VzKCk+MSkge1xyXG4gICAgICAgIGJsb2NrID0gdGhpcy5yaWdodENvdmVyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYobGVmdCAmJiBsZWZ0LnN0YXRlPT09J2Nsb3NlZCcgJiYgbGVmdC5hbmdsZT5QSS8yKSB7XHJcbiAgICAgICAgYmxvY2sgPSBsZWZ0O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYodGhpcy5hbmdsZSA9PT0gUEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgICBpZighdGhpcy5wLnJ0bCB8fCB0aGlzLmdldFBhZ2VzKCk9PT10aGlzLmdldEJvb2tQYWdlcygpKSB7XHJcbiAgICAgICAgICBibG9jayA9IHRoaXMubGVmdENvdmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG4gIH1cclxuXHJcbiAgZ2V0UmlnaHRGbGlwcGluZygpIHtcclxuICAgIGxldCBibG9jaztcclxuICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5zaGVldEJsb2Nrc1t0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aC0xXSwgUEkgPSBNYXRoLlBJO1xyXG4gICAgaWYodGhpcy5hbmdsZT09PTApIHtcclxuICAgICAgaWYodGhpcy5nZXRQYWdlcygpPjEpIHtcclxuICAgICAgICBibG9jayA9IHRoaXMubGVmdENvdmVyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYocmlnaHQgJiYgcmlnaHQuc3RhdGU9PT0nY2xvc2VkJyAmJiByaWdodC5hbmdsZTw9UEkvMikge1xyXG4gICAgICAgIGJsb2NrID0gcmlnaHQ7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih0aGlzLmFuZ2xlPT09UEkvMiB8fCB0aGlzLmFuZ2xlID09PSAzKlBJLzIpIHtcclxuICAgICAgICBpZih0aGlzLnAucnRsIHx8IHRoaXMuZ2V0UGFnZXMoKT09PXRoaXMuZ2V0Qm9va1BhZ2VzKCkpIHtcclxuICAgICAgICAgIGJsb2NrID0gdGhpcy5yaWdodENvdmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSkge1xyXG4gICAgbGV0IGNsb3NlZEFuZ2xlLCB7UEl9ID0gTWF0aDtcclxuXHJcbiAgICBpZih0aGlzLmxlZnRDb3Zlci5waHlzaWNJZCkge1xyXG4gICAgICBsZXQgdGVzdDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0ZXN0ID0gTWF0aC5hYnModGhpcy5zaGVldFBoeXNpY3MuZ2V0UGFyYW1ldHIodGhpcy5sZWZ0Q292ZXIucGh5c2ljSWQsICdhbmdsZScpLWFuZ2xlKVxyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICB0ZXN0ID0gMDtcclxuICAgICAgfVxyXG4gICAgICBjbG9zZWRBbmdsZSA9IGFuZ2xlPlBJLzIgfHwgdGVzdD5QSS82PyBQSS8yOiB0aGlzLmNsb3NlZEFuZ2xlO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0aGlzLnJpZ2h0Q292ZXIucGh5c2ljSWQpIHtcclxuICAgICAgbGV0IHRlc3Q7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgdGVzdCA9IE1hdGguYWJzKHRoaXMuc2hlZXRQaHlzaWNzLmdldFBhcmFtZXRyKHRoaXMucmlnaHRDb3Zlci5waHlzaWNJZCwgJ2FuZ2xlJyktYW5nbGUpXHJcbiAgICAgIH1cclxuICAgICAgY2F0Y2goZSkge1xyXG4gICAgICAgIHRlc3QgPSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGNsb3NlZEFuZ2xlID0gYW5nbGU8UEkvMiB8fCB0ZXN0PlBJLzY/IFBJLzIrMWUtNzogdGhpcy5jbG9zZWRBbmdsZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjbG9zZWRBbmdsZSA9IFBJLzIrKGFuZ2xlIT09MCkqMWUtNztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBvcGVuZWRBbmdsZTogYW5nbGUsXHJcbiAgICAgIGNsb3NlZEFuZ2xlLFxyXG4gICAgICBiaW5kZXJUdXJuOiB0aGlzLmNsb3NlZEFuZ2xlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZmxpcExlZnQoc2l6ZT0xLCBwcm9ncmVzc0NsYj10aGlzLnAuZmxpcFByb2dyZXNzQ2xiKSB7XHJcbiAgICBsZXQgYmxvY2ssIHJlcztcclxuICAgIGlmKHRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKTwyNSkge1xyXG4gICAgICBjb25zdCBsZWZ0ID0gdGhpcy5zaGVldEJsb2Nrc1swXSwgUEkgPSBNYXRoLlBJO1xyXG4gICAgICBpZih0aGlzLmFuZ2xlPT09UEkpIHtcclxuICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgYmxvY2s9dGhpcy5yaWdodENvdmVyLFxyXG4gICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICBQSSxcclxuICAgICAgICAgIC10aGlzLnAuY292ZXIuc3RhcnRWZWxvY2l0eSxcclxuICAgICAgICAgIHRoaXMucC5jb3Zlci5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgIDAsXHJcbiAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+dGhpcy5zZXQoMypQSS8yLWFuZ2xlLzIsaGVpZ2h0KSxcclxuICAgICAgICAgIChhbmdsZSxoZWlnaHQpPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldCgzKlBJLzItYW5nbGUvMiwwKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhhbmdsZT8gUEk6IFBJLzIrMWUtNywnY2xvc2VkJyk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgcHJvZ3Jlc3NDbGJcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGlmKGxlZnQgJiYgbGVmdC5zdGF0ZT09PSdjbG9zZWQnICYmIGxlZnQuYW5nbGU+UEkvMikge1xyXG4gICAgICAgICAgYmxvY2sgPSBzaXplPGxlZnQuZ2V0U2l6ZSgpPyB0aGlzLnNwbGl0U2hlZXRCbG9jaygwLCBsZWZ0LmdldFNpemUoKS1zaXplKVsxXTogbGVmdDtcclxuICAgICAgICAgIHJlcyA9IHRoaXMuY29ubmVjdFBoeXNpY3MoXHJcbiAgICAgICAgICAgIGJsb2NrLFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5tYXNzKmJsb2NrLmdldFNpemUoKSxcclxuICAgICAgICAgICAgUEksXHJcbiAgICAgICAgICAgIC10aGlzLnAucGFnZS5zdGFydFZlbG9jaXR5LFxyXG4gICAgICAgICAgICB0aGlzLnAucGFnZS5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PmJsb2NrLnNldCh0aGlzLmdldENsb3NlZEJsb2NrQW5nbGUoYW5nbGUpLCdvcGVuZWQnLGhlaWdodCksXHJcbiAgICAgICAgICAgIEJvb2suZmluaXNoQW5pbWF0aW9uQ2xiLmJpbmQoe2Jvb2s6IHRoaXMsIGJsb2NrfSksXHJcbiAgICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHRoaXMuYW5nbGUgPT09IFBJLzIgfHwgdGhpcy5hbmdsZSA9PT0gMypQSS8yKSB7XHJcbiAgICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgICBibG9jaz10aGlzLmxlZnRDb3ZlcixcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLm1hc3MsXHJcbiAgICAgICAgICAgIFBJLFxyXG4gICAgICAgICAgICAtdGhpcy5wLmNvdmVyLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXQoMipQSS1hbmdsZS8yLGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgaWYoYW5nbGU+UEkvMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhhbmdsZT8gUEkvMjogMCwnY2xvc2VkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+IHRoaXMuc2V0KGFuZ2xlPT09MD8gMDogMipQSS1hbmdsZS8yLDApLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICBmbGlwUmlnaHQoc2l6ZT0xLCBwcm9ncmVzc0NsYj10aGlzLnAuZmxpcFByb2dyZXNzQ2xiKSB7XHJcbiAgICBsZXQgYmxvY2ssIHJlcztcclxuICAgIGlmKHRoaXMuc2hlZXRQaHlzaWNzLmdldFNpemUoKTwyNSkge1xyXG4gICAgICBjb25zdCByaWdodCA9IHRoaXMuc2hlZXRCbG9ja3NbdGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtMV0sIFBJID0gTWF0aC5QSTtcclxuICAgICAgaWYodGhpcy5hbmdsZT09PTApIHtcclxuICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgYmxvY2s9dGhpcy5sZWZ0Q292ZXIsXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIubWFzcyxcclxuICAgICAgICAgIDAsXHJcbiAgICAgICAgICB0aGlzLnAuY292ZXIuc3RhcnRWZWxvY2l0eSxcclxuICAgICAgICAgIHRoaXMucC5jb3Zlci5mbGV4aWJpbGl0eSxcclxuICAgICAgICAgIDAsXHJcbiAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+dGhpcy5zZXQoYW5nbGUvMixoZWlnaHQpLFxyXG4gICAgICAgICAgKGFuZ2xlLGhlaWdodCk9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0KGFuZ2xlLzIsMCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYW5nbGU/IFBJLzI6IDAsJ2Nsb3NlZCcpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHByb2dyZXNzQ2xiXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBpZihyaWdodCAmJiByaWdodC5zdGF0ZT09PSdjbG9zZWQnICYmIHJpZ2h0LmFuZ2xlPD1QSS8yKSB7XHJcbiAgICAgICAgICBibG9jayA9IHNpemU8cmlnaHQuZ2V0U2l6ZSgpPyB0aGlzLnNwbGl0U2hlZXRCbG9jayh0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aC0xLCBzaXplKVswXTogcmlnaHQ7XHJcbiAgICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgICBibG9jayxcclxuICAgICAgICAgICAgdGhpcy5wLnBhZ2UubWFzcypibG9jay5nZXRTaXplKCksXHJcbiAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLnN0YXJ0VmVsb2NpdHksXHJcbiAgICAgICAgICAgIHRoaXMucC5wYWdlLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+YmxvY2suc2V0KHRoaXMuZ2V0Q2xvc2VkQmxvY2tBbmdsZShhbmdsZSksJ29wZW5lZCcsaGVpZ2h0KSxcclxuICAgICAgICAgICAgQm9vay5maW5pc2hBbmltYXRpb25DbGIuYmluZCh7Ym9vazogdGhpcywgYmxvY2t9KSxcclxuICAgICAgICAgICAgcHJvZ3Jlc3NDbGJcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYodGhpcy5hbmdsZT09PVBJLzIgfHwgdGhpcy5hbmdsZSA9PT0gMypQSS8yKSB7XHJcbiAgICAgICAgICByZXMgPSB0aGlzLmNvbm5lY3RQaHlzaWNzKFxyXG4gICAgICAgICAgICBibG9jaz10aGlzLnJpZ2h0Q292ZXIsXHJcbiAgICAgICAgICAgIHRoaXMucC5jb3Zlci5tYXNzLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICB0aGlzLnAuY292ZXIuc3RhcnRWZWxvY2l0eSxcclxuICAgICAgICAgICAgdGhpcy5wLmNvdmVyLmZsZXhpYmlsaXR5LFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnNldChQSS8yK2FuZ2xlLzIsaGVpZ2h0KTtcclxuICAgICAgICAgICAgICBpZihhbmdsZTxQSS8yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNoZWV0QmxvY2tzKFBJLzIrMWUtNywnY2xvc2VkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAoYW5nbGUsaGVpZ2h0KT0+dGhpcy5zZXQoUEkvMithbmdsZS8yLDApLFxyXG4gICAgICAgICAgICBwcm9ncmVzc0NsYlxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxuICAvLyB9XHJcblxyXG4gIGNsZWFySG92ZXJJbmZvKCkge1xyXG4gICAgdGhpcy5wYWdlTWFuYWdlci50dXJuT25FdmVudHMoKTtcclxuICAgIGRlbGV0ZSB0aGlzLmhvdmVySW5mby5ibG9jay5mb3JjZTtcclxuICAgIGRlbGV0ZSB0aGlzLmhvdmVySW5mby5ibG9jay5jb3JuZXJGb3JjZTtcclxuICAgIGRlbGV0ZSB0aGlzLmhvdmVySW5mbztcclxuICB9XHJcblxyXG4gIHhTZWdtZW50KCkge1xyXG4gICAgY29uc3QgYm94cyA9IHRoaXMudG1wLmJveHMsIHJlcyA9IHt9O1xyXG4gICAgaWYodGhpcy5sZWZ0Q292ZXIucGh5c2ljSWQpIHtcclxuICAgICAgYm94c1swXS5zZXRGcm9tT2JqZWN0KHRoaXMucmlnaHRDb3Zlci50aHJlZSk7XHJcbiAgICAgIHJlcy5taW4gPSAtKHJlcy5tYXggPSBib3hzWzBdLm1heC54KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYodGhpcy5yaWdodENvdmVyLnBoeXNpY0lkKSB7XHJcbiAgICAgIGJveHNbMF0uc2V0RnJvbU9iamVjdCh0aGlzLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgIHJlcy5tYXggPSAtKHJlcy5taW4gPSBib3hzWzBdLm1pbi54KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBib3hzWzBdLnNldEZyb21PYmplY3QodGhpcy5sZWZ0Q292ZXIudGhyZWUpO1xyXG4gICAgICBib3hzWzFdLnNldEZyb21PYmplY3QodGhpcy5yaWdodENvdmVyLnRocmVlKTtcclxuICAgICAgYm94c1swXS51bmlvbihib3hzWzFdKTtcclxuICAgICAgcmVzLm1pbiA9IGJveHNbMF0ubWluLng7XHJcbiAgICAgIHJlcy5tYXggPSBib3hzWzBdLm1heC54O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIGNvbXB1dGVUYXJnZXQocG9pbnQpIHtcclxuICAgIGxldCB7eCwgeX0gPSBwb2ludCwgc2VnID0gdGhpcy54U2VnbWVudCgpLCBhbmdsZTtcclxuICAgIGFuZ2xlID0gKHNlZy5tYXgteCkvKHNlZy5tYXgtc2VnLm1pbikqTWF0aC5QSTtcclxuICAgIC8vIGFuZ2xlID0gTWF0aC5hY29zKHgvTWF0aC5zcXJ0KHgqeCt5KnkpKTtcclxuICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmRyYWdBbmdsZSwgTWF0aC5taW4oTWF0aC5QSS10aGlzLmRyYWdBbmdsZSwgYW5nbGUpKTtcclxuICB9XHJcblxyXG4gIG9uUGlja0NhbGxiYWNrKG9iamVjdCkge1xyXG4gICAgbGV0IHJlcyA9IGZhbHNlO1xyXG4gICAgY29uc3QgYmxvY2sgPSBvYmplY3Qub2JqZWN0LnVzZXJEYXRhLnNlbGYsXHJcbiAgICAgICAgICBwID0gey4uLm9iamVjdC51dn0sIGkgPSBvYmplY3QuZmFjZS5tYXRlcmlhbEluZGV4O1xyXG4gICAgaWYoaTwyKSB7XHJcbiAgICAgIHAueCA9IGk9PT0wPyBwLng6IDEtcC54O1xyXG4gICAgICBpZihibG9jay5jb3JuZXJUYXJnZXQudGVzdEludGVyc2VjdGlvbihudWxsLCBwKSAmJiBibG9jay5waHlzaWNJZCkge1xyXG4gICAgICAgIGlmKHRoaXMuaG92ZXJJbmZvKSB7XHJcbiAgICAgICAgICB0aGlzLmNsZWFySG92ZXJJbmZvKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJsb2NrLmZvcmNlID0gU2hlZXRQaHlzaWNzLmRyYWdGb3JjZUNsYjtcclxuICAgICAgICBibG9jay5jb3JuZXJGb3JjZSA9IFNoZWV0UGh5c2ljcy5nZXREcmFnQ29ybmVyRm9yY2VDbGIodGhpcy5jb21wdXRlVGFyZ2V0KG9iamVjdC5wb2ludCkpO1xyXG4gICAgICAgIHRoaXMuZHJhZ0luZm8gPSB7XHJcbiAgICAgICAgICBvYmplY3QsXHJcbiAgICAgICAgICBibG9ja1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmVzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnR1cm5PZmZFdmVudHMoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIG9uRHJhZ0NhbGxiYWNrKHBvaW50KSB7XHJcbiAgICBjb25zdCBibG9jayA9IHRoaXMuZHJhZ0luZm8uYmxvY2ssIHAgPSBibG9jay5nZXRQcm9wcygpO1xyXG4gICAgYmxvY2suZm9yY2UgPSBTaGVldFBoeXNpY3MuZHJhZ0ZvcmNlQ2xiO1xyXG4gICAgYmxvY2suY29ybmVyRm9yY2UgPSBTaGVldFBoeXNpY3MuZ2V0RHJhZ0Nvcm5lckZvcmNlQ2xiKHRoaXMuY29tcHV0ZVRhcmdldChwb2ludCkpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBvblJlbGVhc2VDYWxsYmFjaygpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmRyYWdJbmZvLmJsb2NrLmZvcmNlO1xyXG4gICAgZGVsZXRlIHRoaXMuZHJhZ0luZm8uYmxvY2suY29ybmVyRm9yY2U7XHJcbiAgICBkZWxldGUgdGhpcy5kcmFnSW5mbztcclxuICAgIHRoaXMucGFnZU1hbmFnZXIudHVybk9uRXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICBnZXRGbGlwcGluZyhpKSB7XHJcbiAgICByZXR1cm4gaT8gdGhpcy5nZXRMZWZ0RmxpcHBpbmcoKTogdGhpcy5nZXRSaWdodEZsaXBwaW5nKCk7XHJcbiAgfVxyXG5cclxuICBmbGlwKGksIHNpemU9MSkge1xyXG4gICAgcmV0dXJuIGk/IHRoaXMuZmxpcExlZnQoc2l6ZSk6IHRoaXMuZmxpcFJpZ2h0KHNpemUpO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlTW91c2UoZW5hYmxlKSB7XHJcbiAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IGVuYWJsZTtcclxuICB9XHJcblxyXG4gIGNvcm5lckNhbGxiYWNrKGUsIGRhdGEpIHtcclxuICAgIGlmKHRoaXMubW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgIGNvbnN0IHtpLCBufSA9IGRhdGEuZGF0YTtcclxuICAgICAgaWYoZS50eXBlPT09J21vdXNlb3ZlcicpIHtcclxuICAgICAgICBpZih0aGlzLmhvdmVySW5mbyAmJiB0aGlzLmhvdmVySW5mby5wZW5kaW5ncyE9PXVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgKyt0aGlzLmhvdmVySW5mby5wZW5kaW5ncztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBpZih0aGlzLmhvdmVySW5mbykge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dyb25nIHN0YXRlOiBlbGVtZW50IGlzIGFscmVhZHkgaG92ZXInKTtcclxuICAgICAgICAgICAgaWYodGhpcy5ob3ZlckluZm8ubiE9PW4pIHtcclxuICAgICAgICAgICAgICB0aGlzLmNsZWFySG92ZXJJbmZvKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmKCF0aGlzLmhvdmVySW5mbyAmJiAhdGhpcy5kcmFnSW5mbykge1xyXG4gICAgICAgICAgICBsZXQgcmVzID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGhvdmVyQW5nbGUgPSAwLjAyLFxyXG4gICAgICAgICAgICAgICAgICBob3ZlciA9IHRoaXMuZ2V0QmxvY2tCeVBhZ2UobiksXHJcbiAgICAgICAgICAgICAgICAgIHBvc3NpYmxlID0gdGhpcy5nZXRGbGlwcGluZyhpKTtcclxuICAgICAgICAgICAgaWYobj4xICYmIG48MioodGhpcy5wLnNoZWV0cysxKSAmJiBob3Zlci5waHlzaWNJZCAmJiAoaG92ZXIuYW5nbGU8aG92ZXJBbmdsZSB8fCBob3Zlci5hbmdsZT5NYXRoLlBJLWhvdmVyQW5nbGUpKSB7XHJcbiAgICAgICAgICAgICAgcmVzID0gUHJvbWlzZS5yZXNvbHZlKGhvdmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGhvdmVyPT09cG9zc2libGUpIHtcclxuICAgICAgICAgICAgICBjb25zdCBzaGVldEJsb2NrcyA9IFtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdENvdmVyLFxyXG4gICAgICAgICAgICAgICAgLi4udGhpcy5zaGVldEJsb2NrcyxcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRDb3ZlclxyXG4gICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgY29uc3QgaiA9IHNoZWV0QmxvY2tzLmluZGV4T2YoaG92ZXIpLCBuZXh0QmxvY2sgPSB+aj8gc2hlZXRCbG9ja3NbaisyKmktMV06IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICBpZighbmV4dEJsb2NrIHx8ICFuZXh0QmxvY2sucGh5c2ljSWQgfHwgbmV4dEJsb2NrLmFuZ2xlPmhvdmVyQW5nbGUgJiYgbmV4dEJsb2NrLmFuZ2xlPE1hdGguUEktaG92ZXJBbmdsZSkge1xyXG4gICAgICAgICAgICAgICAgcmVzID0gdGhpcy5mbGlwKGksIDEpLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgICAgICAgICAgICAgaWYoIWJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuaG92ZXJJbmZvO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hlZXRQaHlzaWNzLnNldFBhcmFtZXRyKGJsb2NrLnBoeXNpY0lkLCAndmVsb2NpdHknLCAwKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gYmxvY2s7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG92ZXJJbmZvID0ge1xyXG4gICAgICAgICAgICAgICAgICBwZW5kaW5nczogMVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgICAgICAgICBpZih0aGlzLmhvdmVySW5mbyAmJiB0aGlzLmhvdmVySW5mby5wZW5kaW5nczwxKSB7XHJcbiAgICAgICAgICAgICAgICBibG9jayA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmhvdmVySW5mbztcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYoYmxvY2spIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZU1hbmFnZXIudHVybk9mZkV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgIHAgPSBibG9jay5nZXRQcm9wcygpO1xyXG4gICAgICAgICAgICAgICAgYmxvY2suZm9yY2UgPSB0aGlzLnNoZWV0UGh5c2ljcy5nZXRUYXJnZXRGb3JjZUNsYihwLm1hc3MqYmxvY2suZ2V0U2l6ZSgpLCBpPyBNYXRoLlBJLWhvdmVyQW5nbGU6IGhvdmVyQW5nbGUpO1xyXG4gICAgICAgICAgICAgICAgYmxvY2suY29ybmVyRm9yY2UgPSAoKT0+IChpPyAtMTogMSkqU2hlZXRQaHlzaWNzLmhvdmVyQ29ybmVyRm9yY2VDbGIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hlZXRQaHlzaWNzLnNldFBhcmFtZXRyKGJsb2NrLnBoeXNpY0lkLCAnYW5nbGUnLCBpPyBNYXRoLlBJLTAuNSpob3ZlckFuZ2xlOiAwLjUqaG92ZXJBbmdsZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvdmVySW5mbyA9IHtcclxuICAgICAgICAgICAgICAgICAgbixcclxuICAgICAgICAgICAgICAgICAgYmxvY2tcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSgxLzMwKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZih0aGlzLmhvdmVySW5mbyAmJiBlLnR5cGU9PT0nbW91c2VvdXQnKSB7XHJcbiAgICAgICAgaWYodGhpcy5ob3ZlckluZm8ucGVuZGluZ3MhPT11bmRlZmluZWQpIHtcclxuICAgICAgICAgIC0tdGhpcy5ob3ZlckluZm8ucGVuZGluZ3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYobj09PXRoaXMuaG92ZXJJbmZvLm4pIHtcclxuICAgICAgICAgIHRoaXMuY2xlYXJIb3ZlckluZm8oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihlLnR5cGU9PT0nbW91c2Vkb3duJykge1xyXG4gICAgICAgIHRoaXMuY29ybmVyQ2xpY2tEYXRhID0ge1xyXG4gICAgICAgICAgeDogZS5wYWdlWCxcclxuICAgICAgICAgIHk6IGUucGFnZVlcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoZS50eXBlPT09J2NsaWNrJykge1xyXG4gICAgICAgIGlmKE1hdGguc3FydChNYXRoLnBvdyh0aGlzLmNvcm5lckNsaWNrRGF0YS54LWUucGFnZVgsMikrTWF0aC5wb3codGhpcy5jb3JuZXJDbGlja0RhdGEueS1lLnBhZ2VZLDIpKTw1KSB7XHJcbiAgICAgICAgICBjb25zdCBob3ZlciA9IHRoaXMuZ2V0QmxvY2tCeVBhZ2Uobik7XHJcbiAgICAgICAgICBpZihob3Zlci5waHlzaWNJZCkge1xyXG4gICAgICAgICAgICBjb25zdCBpZCA9IGhvdmVyLnBoeXNpY0lkLFxyXG4gICAgICAgICAgICAgICAgICBwcm9wcyA9IGhvdmVyLmdldFByb3BzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hlZXRQaHlzaWNzLnNldFBhcmFtZXRyKGlkLCAndmVsb2NpdHknLCAoaT8gLTE6IDEpKnByb3BzLnN0YXJ0VmVsb2NpdHkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGUgdGhpcy5jb3JuZXJDbGlja0RhdGE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZFNoZWV0QmxvY2socCwgYmxvY2spIHtcclxuICAgIHRoaXMuc2hlZXRCbG9ja3Muc3BsaWNlKHAsIDAsIGJsb2NrKTtcclxuICAgIHRoaXMuc3Vic2NyaWJlU2hlZXRCbG9jayhibG9jaywgMik7XHJcbiAgICB0aGlzLnRocmVlU2hlZXRCbG9ja3MuYWRkKGJsb2NrLnRocmVlKTtcclxuICB9XHJcblxyXG4gIHN1YnNjcmliZVNoZWV0QmxvY2soYmxvY2ssIG9mZnNldCkge1xyXG4gICAgY29uc3QgZXZlbnRDb252ZXJ0ZXIgPSBuZXcgQ3VzdG9tRXZlbnRDb252ZXJ0ZXIodGhpcy52aXN1YWwud25kLCB0aGlzLnZpc3VhbC5kb2MsIENpcmNsZVRhcmdldC50ZXN0KSxcclxuICAgICAgICAgIHIgPSAwLjE1LFxyXG4gICAgICAgICAgdGFyZ2V0ID0gbmV3IENpcmNsZVRhcmdldCgxLTAuNSpyLCAwLjUqciwgcik7XHJcbiAgICB0YXJnZXQuYmxvY2sgPSBibG9jaztcclxuICAgIHRhcmdldC5jYWxsYmFjayA9IHRoaXMuY29ybmVyQ2FsbGJhY2suYmluZCh0aGlzKTtcclxuICAgIGV2ZW50Q29udmVydGVyLmFkZEN1c3RvbSh0YXJnZXQpO1xyXG4gICAgYmxvY2suY29ybmVyVGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgYmxvY2sudGhyZWUudXNlckRhdGEubW91c2VDYWxsYmFjayA9IChlLCBkYXRhKT0+IHtcclxuICAgICAgY29uc3QgaSA9IGRhdGEuZmFjZS5tYXRlcmlhbEluZGV4O1xyXG4gICAgICBpZihpPDIpIHtcclxuICAgICAgICBjb25zdCBuID0gaT09PTA/IG9mZnNldCsyKmJsb2NrLnAuZmlyc3Q6IG9mZnNldCsyKmJsb2NrLnAubGFzdC0xO1xyXG4gICAgICAgIGV2ZW50Q29udmVydGVyLmNvbnZlcnQoZSwge3g6IGk9PT0wPyBkYXRhLnV2Lng6IDEtZGF0YS51di54LCB5OiBkYXRhLnV2LnksIGksIG59KTtcclxuICAgICAgICB0aGlzLnBhZ2VNYW5hZ2VyLnRyYW5zZmVyRXZlbnRUb1RleHR1cmUobiwgZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBibG9jay50aHJlZS51c2VyRGF0YS50b3VjaENhbGxiYWNrID0gKGUsIGRhdGEpPT4ge1xyXG4gICAgICBjb25zdCBpID0gZGF0YS5mYWNlLm1hdGVyaWFsSW5kZXg7XHJcbiAgICAgIGlmKGk8Mikge1xyXG4gICAgICAgIGNvbnN0IG4gPSBpPT09MD8gb2Zmc2V0KzIqYmxvY2sucC5maXJzdDogb2Zmc2V0KzIqYmxvY2sucC5sYXN0LTE7XHJcbiAgICAgICAgdGhpcy5wYWdlTWFuYWdlci50cmFuc2ZlckV2ZW50VG9UZXh0dXJlKG4sIGUsIGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy52aXN1YWwuZHJhZy5hZGRUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC5tb3VzZUV2ZW50cy5hZGRUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC50b3VjaEV2ZW50cy5hZGRUaHJlZShibG9jay50aHJlZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVTaGVldEJsb2NrKGJsb2NrKSB7XHJcbiAgICB0aGlzLnZpc3VhbC5tb3VzZUV2ZW50cy5yZW1vdmVUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC50b3VjaEV2ZW50cy5yZW1vdmVUaHJlZShibG9jay50aHJlZSk7XHJcbiAgICB0aGlzLnZpc3VhbC5kcmFnLnJlbW92ZVRocmVlKGJsb2NrLnRocmVlKTtcclxuICAgIHRoaXMudGhyZWVTaGVldEJsb2Nrcy5yZW1vdmUoYmxvY2sudGhyZWUpO1xyXG4gICAgYmxvY2suZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlU2hlZXRCbG9ja3MoZmlyc3QsIHNpemUpIHtcclxuICAgIGNvbnN0IGJsb2NrcyA9IHRoaXMuc2hlZXRCbG9ja3Muc3BsaWNlKGZpcnN0LCBzaXplKTtcclxuICAgIGZvcihsZXQgYmxvY2sgb2YgYmxvY2tzKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlU2hlZXRCbG9jayhibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRUZXh0dXJlKG1hdGVyaWFsLCBuKSB7XHJcbiAgICB0aGlzLnBhZ2VNYW5hZ2VyLnNldFRleHR1cmUobWF0ZXJpYWwsIG4pO1xyXG4gIH1cclxuXHJcbiAgc2V0UGFnZVRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMuc2V0VGV4dHVyZShtYXRlcmlhbCwgbisyKTtcclxuICB9XHJcblxyXG4gIHNldExlZnRDb3ZlclRleHR1cmUobWF0ZXJpYWwsIG4pIHtcclxuICAgIHRoaXMuc2V0VGV4dHVyZShtYXRlcmlhbCwgbik7XHJcbiAgfVxyXG5cclxuICBzZXRSaWdodENvdmVyVGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5zZXRUZXh0dXJlKG1hdGVyaWFsLCBuKzIqKHRoaXMucC5zaGVldHMrMSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGZpbmlzaEFuaW1hdGlvbkNsYihhbmdsZSkge1xyXG4gICAgdGhpcy5ibG9jay5zZXQodGhpcy5ib29rLmdldENsb3NlZEJsb2NrQW5nbGUoYW5nbGUpLmNsb3NlZEFuZ2xlLCdjbG9zZWQnLDApO1xyXG4gICAgY29uc3QgaSA9IHRoaXMuYm9vay5zaGVldEJsb2Nrcy5pbmRleE9mKHRoaXMuYmxvY2spO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgaWYoYW5nbGU9PT0wKSB7XHJcbiAgICAgICAgdGhpcy5ib29rLm1lcmdlU2hlZXRCbG9ja3MoaSwgdGhpcy5ib29rLnNoZWV0QmxvY2tzLmxlbmd0aC1pKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLmJvb2subWVyZ2VTaGVldEJsb2NrcygwLCBpKzEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjYWxjQmxvY2tGb3JjZShibG9jaywgb2JqZWN0LCBhbmdsZSwgdmVsb2NpdHksIGNvcm5lckhlaWdodCkge1xyXG4gICAgcmV0dXJuIGJsb2NrLmZvcmNlPyBibG9jay5mb3JjZShvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KTogMDtcclxuICB9XHJcblxyXG4gIGNhbGNCbG9ja0Nvcm5lckZvcmNlKGJsb2NrLCBvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KSB7XHJcbiAgICByZXR1cm4gYmxvY2suY29ybmVyRm9yY2U/IGJsb2NrLmNvcm5lckZvcmNlKG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpOiAwO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5QmVmb3JlQW5pbWF0aW9uKCkge1xyXG4gICAgbGV0IHJlcztcclxuICAgIGlmKHRoaXMuYW5pbWF0aW9uTm90aWZpY2F0aW9uKSB7XHJcbiAgICAgIHJlcyA9IFByb21pc2UucmVqZWN0KCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5hbmltYXRpb25Ob3RpZmljYXRpb24gPSB0cnVlO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgIHR5cGU6ICdiZWZvcmVBbmltYXRpb24nXHJcbiAgICAgIH0pO1xyXG4gICAgICByZXMgPSB0aGlzLmxheWVyTWFuYWdlci5oaWRlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5QWZ0ZXJBbmltYXRpb24oKSB7XHJcbiAgICBpZih0aGlzLmFuaW1hdGlvbk5vdGlmaWNhdGlvbikge1xyXG4gICAgICBjb25zdCBwID0gdGhpcy5nZXRQYWdlKCk7XHJcbiAgICAgIGlmKHRoaXMudXNlckRpcmVjdGlvbi5sYXN0VG9wUGFnZSE9PXApIHtcclxuICAgICAgICB0aGlzLnVzZXJEaXJlY3Rpb24uZGlyZWN0aW9uID0gTWF0aC5zaWduKHAtdGhpcy51c2VyRGlyZWN0aW9uLmxhc3RUb3BQYWdlKTtcclxuICAgICAgICB0aGlzLnVzZXJEaXJlY3Rpb24ubGFzdFRvcFBhZ2UgPSBwO1xyXG4gICAgICB9XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmFuaW1hdGlvbk5vdGlmaWNhdGlvbjtcclxuICAgICAgdGhpcy5sYXllck1hbmFnZXIuc2hvdygpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgIHR5cGU6ICdhZnRlckFuaW1hdGlvbidcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRVc2VyRGlyZWN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudXNlckRpcmVjdGlvbjtcclxuICB9XHJcblxyXG4gIGNvbm5lY3RQaHlzaWNzKGJsb2NrLCBtYXNzLCBhbmdsZSwgdmVsb2NpdHksIGZsZXhpYmlsaXR5LCBjb3ZlckhlaWdodCwgc2ltdWxhdGVDbGIsIHJlbW92ZUNsYiwgcHJvZ3Jlc3NDbGIpIHtcclxuICAgIGNvbnN0IHR5cGUgPSAoKT0+IHRoaXMuaG92ZXJJbmZvPyAnaG92ZXInOiAodGhpcy5kcmFnSW5mbz8gJ2RyYWcnOiAnZnJlZScpLFxyXG4gICAgICByZXMgPSB0aGlzLnNoZWV0UGh5c2ljcy5nZXRTaXplKCk/IFByb21pc2UucmVzb2x2ZSgpOiB0aGlzLm5vdGlmeUJlZm9yZUFuaW1hdGlvbigpO1xyXG4gICAgcmV0dXJuIHJlcy50aGVuKCgpPT4ge1xyXG4gICAgICBibG9jay5waHlzaWNJZCA9IHRoaXMuc2hlZXRQaHlzaWNzLmFkZE9iamVjdChcclxuICAgICAgICBtYXNzLFxyXG4gICAgICAgIGFuZ2xlLFxyXG4gICAgICAgIHZlbG9jaXR5LFxyXG4gICAgICAgIGZsZXhpYmlsaXR5LFxyXG4gICAgICAgIGNvdmVySGVpZ2h0LFxyXG4gICAgICAgIChhbmdsLCBjaCk9PiB7XHJcbiAgICAgICAgICBzaW11bGF0ZUNsYihhbmdsLCBjaCk7XHJcbiAgICAgICAgICBwcm9ncmVzc0NsYihibG9jaywgTWF0aC5hYnMoYW5nbGUtYW5nbCkvTWF0aC5QSSwgJ3Byb2Nlc3MnLCB0eXBlKCkpO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVUaHJlZSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGFuZ2wsIGNoKT0+IHtcclxuICAgICAgICAgIHJlbW92ZUNsYihhbmdsLCBjaCk7XHJcbiAgICAgICAgICBkZWxldGUgYmxvY2sucGh5c2ljSWQ7XHJcbiAgICAgICAgICBwcm9ncmVzc0NsYihibG9jaywgTWF0aC5hYnMoYW5nbGUtYW5nbCkvTWF0aC5QSSwgJ2ZpbmlzaCcsIHR5cGUoKSk7XHJcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICAgICAgICBpZighdGhpcy5zaGVldFBoeXNpY3MuZ2V0U2l6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5ub3RpZnlBZnRlckFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlVGhyZWUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KT0+IHRoaXMuY2FsY0Jsb2NrRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpLFxyXG4gICAgICAgIChvYmplY3QsIGFuZ2xlLCB2ZWxvY2l0eSwgY29ybmVySGVpZ2h0KT0+IHRoaXMuY2FsY0Jsb2NrQ29ybmVyRm9yY2UoYmxvY2ssIG9iamVjdCwgYW5nbGUsIHZlbG9jaXR5LCBjb3JuZXJIZWlnaHQpXHJcbiAgICAgICk7XHJcbiAgICAgIHByb2dyZXNzQ2xiKGJsb2NrLCAwLCAnaW5pdCcsIHR5cGUoKSk7XHJcbiAgICAgIHJldHVybiBibG9jaztcclxuICAgIH0pLmNhdGNoKCgpPT4gdW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgdGhpcy5sYXN0TW91c2VQb3MudCs9ZHQ7XHJcbiAgICBpZih0aGlzLmlzUHJvY2Vzc2luZygpICYmIHRoaXMubGFzdE1vdXNlUG9zLnBhZ2VYIT09dW5kZWZpbmVkICYmIHRoaXMubGFzdE1vdXNlUG9zLnQtKHRoaXMubGFzdE1vdXNlUG9zLmxhc3RUIHx8IDApPjAuMjUgJiYgIXRoaXMuaG92ZXJJbmZvICYmICF0aGlzLmRyYWdJbmZvKSB7XHJcbiAgICAgIHRoaXMubGFzdE1vdXNlUG9zLmxhc3RUID0gdGhpcy5sYXN0TW91c2VQb3MudDtcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAkKHRoaXMudmlzdWFsLmVsZW1lbnQpLnRyaWdnZXIoJC5FdmVudCgnbW91c2Vtb3ZlJywgdGhpcy5sYXN0TW91c2VQb3MpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNoZWV0UGh5c2ljcy5zaW11bGF0ZShkdCk7XHJcbiAgfVxyXG5cclxuICBzcGxpdFNoZWV0QmxvY2soaSwgbGVmdFNpemUpIHtcclxuICAgIGNvbnN0IGJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tpXTtcclxuICAgIGlmKGJsb2NrICYmIGxlZnRTaXplPGJsb2NrLmdldFNpemUoKSkge1xyXG4gICAgICBjb25zdCBuZXdCbG9jayA9IG5ldyBTaGVldEJsb2NrKHRoaXMudmlzdWFsLCB7Li4udGhpcy5wLCBzZXRUZXh0dXJlOiB0aGlzLnNldFBhZ2VUZXh0dXJlLmJpbmQodGhpcyl9LCBibG9jay5wLmZpcnN0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5hbmdsZSwgYmxvY2suc3RhdGUpO1xyXG4gICAgICBibG9jay5zZXQoYmxvY2suYW5nbGUsIGJsb2NrLnN0YXRlLCBibG9jay5jb3JuZXIuaGVpZ2h0LCBibG9jay5wLmZpcnN0K2xlZnRTaXplLCBibG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLmFkZFNoZWV0QmxvY2soaSwgbmV3QmxvY2spO1xyXG4gICAgICByZXR1cm4gW25ld0Jsb2NrLCBibG9ja107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtZXJnZVNoZWV0QmxvY2tzKGZpcnN0LCBzaXplKSB7XHJcbiAgICBpZihmaXJzdDx0aGlzLnNoZWV0QmxvY2tzLmxlbmd0aCkge1xyXG4gICAgICBzaXplID0gTWF0aC5taW4odGhpcy5zaGVldEJsb2Nrcy5sZW5ndGgtZmlyc3QsIHNpemUpO1xyXG4gICAgICBjb25zdCBmaXJzdEJsb2NrID0gdGhpcy5zaGVldEJsb2Nrc1tmaXJzdF0sIGxhc3RCbG9jayA9IHRoaXMuc2hlZXRCbG9ja3NbZmlyc3Qrc2l6ZS0xXTtcclxuICAgICAgZmlyc3RCbG9jay5zZXQoZmlyc3RCbG9jay5hbmdsZSwgZmlyc3RCbG9jay5zdGF0ZSwgZmlyc3RCbG9jay5jb3JuZXIuaGVpZ2h0LCBmaXJzdEJsb2NrLnAuZmlyc3QsIGxhc3RCbG9jay5wLmxhc3QpO1xyXG4gICAgICB0aGlzLnJlbW92ZVNoZWV0QmxvY2tzKGZpcnN0KzEsIHNpemUtMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTaGVldEJsb2NrcyhhbmdsZSwgc3RhdGUpIHtcclxuICAgIGlmKHN0YXRlPT09J2Nsb3NlZCcpIHtcclxuICAgICAgdGhpcy5jbG9zZWRBbmdsZSA9IGFuZ2xlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaGVldEJsb2Nrcy5mb3JFYWNoKChzKT0+IHtcclxuICAgICAgaWYoIXMucGh5c2ljSWQpIHtcclxuICAgICAgICBzLnNldChhbmdsZSwgc3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldChhbmdsZSwgaGVpZ2h0PTApIHtcclxuICAgIHRoaXMuYW5nbGUgPSBhbmdsZTtcclxuICAgIGNvbnN0IFBJID0gTWF0aC5QSTtcclxuICAgIGlmKGFuZ2xlPFBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KDApO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMisyKmFuZ2xlKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoMCwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgwKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldCgwLCdjbG9zZWQnLDApO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTwyKlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS1QSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KGEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS8yK2EsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtYSk7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8MypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtUEkvMik7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChQSS8yKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJLzIpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoUEksJ29wZW5lZCcsMCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoYSwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw0KlBJLzQpIHtcclxuICAgICAgY29uc3QgYT0yKihhbmdsZS0zKlBJLzQpK1BJLzI7XHJcbiAgICAgIHRoaXMuYmluZGVyLnNldChhKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLWEpO1xyXG4gICAgICB0aGlzLmxlZnRDb3Zlci5zZXQoYSwnY2xvc2VkJywwKTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoYSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoUEkvMiwnb3BlbmVkJyxoZWlnaHQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihhbmdsZTw1KlBJLzQpIHtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldExlZnQoLVBJKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSSwnY2xvc2VkJyk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMi0yKihhbmdsZS1QSSkpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NipQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNSpQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLWEpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkrYSk7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdjbG9zZWQnLDApO1xyXG5cclxuICAgICAgdGhpcy5zZXRTaGVldEJsb2NrcyhQSS1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSSthKTtcclxuICAgICAgdGhpcy5yaWdodENvdmVyLnNldChQSS8yLWEsJ29wZW5lZCcsaGVpZ2h0KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8NypQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNipQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzIpO1xyXG5cclxuICAgICAgdGhpcy5iaW5kZXIuc2V0TGVmdCgtUEkvMik7XHJcbiAgICAgIHRoaXMubGVmdENvdmVyLnNldChQSS1hLCdvcGVuZWQnLGhlaWdodCk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRSaWdodCgtUEkvMik7XHJcbiAgICAgIHRoaXMucmlnaHRDb3Zlci5zZXQoMCwnb3BlbmVkJywwKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYoYW5nbGU8OCpQSS80KSB7XHJcbiAgICAgIGNvbnN0IGE9MiooYW5nbGUtNypQSS80KTtcclxuICAgICAgdGhpcy5iaW5kZXIuc2V0KFBJLzItYSk7XHJcblxyXG4gICAgICB0aGlzLmJpbmRlci5zZXRMZWZ0KC1QSS8yKTtcclxuICAgICAgdGhpcy5sZWZ0Q292ZXIuc2V0KFBJLzIsJ29wZW5lZCcsaGVpZ2h0KTtcclxuXHJcbiAgICAgIHRoaXMuc2V0U2hlZXRCbG9ja3MoUEkvMi1hLCdjbG9zZWQnKTtcclxuXHJcbiAgICAgIHRoaXMuYmluZGVyLnNldFJpZ2h0KC1QSS8yK2EpO1xyXG4gICAgICB0aGlzLnJpZ2h0Q292ZXIuc2V0KFBJLzItYSwnY2xvc2VkJywwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjcmVhdGVTaWRlVGV4dHVyZShjb2xvciwgdHlwZSkge1xyXG4gICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKDgsIDgpO1xyXG4gICAgaWYodHlwZT09PSdjb2xvcicpIHtcclxuICAgICAgY29uc3QgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoY29sb3IsIDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCAwLCA4LCA3KTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKGNvbG9yLDAuNSksIDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCA3LCA4LCAxKTtcclxuICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuXHJcbiAgcHJlcGFyZVByb3BzKHByb3BzKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jYWxjUHJvcHMoQm9vay5tZXJnZVByb3BzKGJvb2tQcm9wcygpLCBwcm9wcykpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG1lcmdlUHJvcHMoZmlyc3QsIHNlY29uZCkge1xyXG4gICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uZmlyc3QsXHJcbiAgICAgIC4uLnNlY29uZCxcclxuICAgICAgc2hlZXQ6IHtcclxuICAgICAgICAuLi5maXJzdC5zaGVldCxcclxuICAgICAgICAuLi5zZWNvbmQuc2hlZXQsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNvdmVyOiB7XHJcbiAgICAgICAgLi4uZmlyc3QuY292ZXIsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNvdmVyLFxyXG4gICAgICB9LFxyXG4gICAgICBwYWdlOiB7XHJcbiAgICAgICAgLi4uZmlyc3QucGFnZSxcclxuICAgICAgICAuLi5zZWNvbmQucGFnZSxcclxuICAgICAgfSxcclxuICAgICAgY3NzTGF5ZXJQcm9wczoge1xyXG4gICAgICAgIC4uLmZpcnN0LmNzc0xheWVyUHJvcHMsXHJcbiAgICAgICAgLi4uc2Vjb25kLmNzc0xheWVyUHJvcHMsXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjYWxjUHJvcHMocHJvcHMpIHtcclxuICAgIGNvbnN0IHAgPSB7XHJcbiAgICAgIC4uLnByb3BzLFxyXG4gICAgICBzaGVldDoge1xyXG4gICAgICAgIC4uLnByb3BzLnNoZWV0XHJcbiAgICAgIH0sXHJcbiAgICAgIGNvdmVyOiB7XHJcbiAgICAgICAgLi4ucHJvcHMuc2hlZXQsXHJcbiAgICAgICAgLi4ucHJvcHMuY292ZXJcclxuICAgICAgfSxcclxuICAgICAgcGFnZToge1xyXG4gICAgICAgIC4uLnByb3BzLnNoZWV0LFxyXG4gICAgICAgIC4uLnByb3BzLnBhZ2VcclxuICAgICAgfSxcclxuICAgICAgY3NzTGF5ZXJQcm9wczoge1xyXG4gICAgICAgIC4uLnByb3BzLmNzc0xheWVyUHJvcHMsXHJcbiAgICAgICAgJFxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgc2NhbGUgPSAxMCxcclxuICAgIGhlaWdodCA9IHNjYWxlKnAuaGVpZ2h0LFxyXG4gICAgd2lkdGggPSBzY2FsZSpwLndpZHRoLFxyXG4gICAgZmxleGlibGVDb3JuZXJLID0gTWF0aC5taW4oaGVpZ2h0LCB3aWR0aCkvd2lkdGgsXHJcbiAgICBmbGlwUHJvZ3Jlc3NDbGIgPSAoKT0+IHVuZGVmaW5lZCxcclxuICAgIHNoZWV0ID0ge1xyXG4gICAgICBzaWRlVGV4dHVyZTogcC5zaGVldC5zaWRlVGV4dHVyZSB8fCBCb29rLmNyZWF0ZVNpZGVUZXh0dXJlKHAuc2hlZXQuY29sb3IsIHAuc2hlZXQuc2lkZSksXHJcbiAgICB9LFxyXG4gICAgY292ZXIgPSB7XHJcbiAgICAgIC4uLnNoZWV0LFxyXG4gICAgICAuLi5wLmNvdmVyLFxyXG4gICAgICBmbGV4aWJsZUNvcm5lcjogZmxleGlibGVDb3JuZXJLKnAuY292ZXIuZmxleGlibGVDb3JuZXIsXHJcbiAgICAgIGRlcHRoOiBzY2FsZSpwLmNvdmVyLmRlcHRoLFxyXG4gICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICBwYWRkaW5nOiBzY2FsZSpwLmNvdmVyLnBhZGRpbmdcclxuICAgIH0sXHJcbiAgICBwYWdlID0ge1xyXG4gICAgICAuLi5zaGVldCxcclxuICAgICAgLi4ucC5wYWdlLFxyXG4gICAgICBmbGV4aWJsZUNvcm5lcjogZmxleGlibGVDb3JuZXJLKnAucGFnZS5mbGV4aWJsZUNvcm5lcixcclxuICAgICAgZGVwdGg6IHNjYWxlKnAucGFnZS5kZXB0aCxcclxuICAgICAgd2lkdGg6IGNvdmVyLndpZHRoIC0gY292ZXIucGFkZGluZyxcclxuICAgICAgaGVpZ2h0OiBjb3Zlci5oZWlnaHQgLSAyKmNvdmVyLnBhZGRpbmdcclxuICAgIH0sXHJcbiAgICBtYXJrZXIgPSB7XHJcbiAgICAgIHVzZTogZmFsc2UsXHJcbiAgICAgIGNvbG9yOiAwWEZGMDAwMCxcclxuICAgICAgc2l6ZTogc2NhbGUqMC4wMDFcclxuICAgIH07XHJcbiAgICBpZihjb3Zlci5jb2xvciE9PXNoZWV0LmNvbG9yICYmICFwLmNvdmVyLnNpZGVUZXh0dXJlKSB7XHJcbiAgICAgIGNvdmVyLnNpZGVUZXh0dXJlID0gQm9vay5jcmVhdGVTaWRlVGV4dHVyZShjb3Zlci5jb2xvciwgY292ZXIuc2lkZSk7XHJcbiAgICB9XHJcbiAgICBpZihwYWdlLmNvbG9yIT09c2hlZXQuY29sb3IgJiYgIXAucGFnZS5zaWRlVGV4dHVyZSkge1xyXG4gICAgICBwYWdlLnNpZGVUZXh0dXJlID0gQm9vay5jcmVhdGVTaWRlVGV4dHVyZShwYWdlLmNvbG9yLCBwYWdlLnNpZGUpO1xyXG4gICAgfVxyXG4gICAgaWYocC5jc3NMYXllcnNMb2FkZXIpIHtcclxuICAgICAgcC5jc3NMYXllcnNMb2FkZXIgPSB0aGlzLmNzc0xheWVyc0xvYWRlcihwLmNzc0xheWVyc0xvYWRlcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gey4uLnAsIHNjYWxlLCBoZWlnaHQsIHdpZHRoLCBmbGlwUHJvZ3Jlc3NDbGIsIGNvdmVyLCBwYWdlLCBtYXJrZXJ9O1xyXG4gIH1cclxuXHJcbiAgY3NzTGF5ZXJzTG9hZGVyKGxvYWRlcikge1xyXG4gICAgcmV0dXJuIChuLCBjbGIpPT4ge1xyXG4gICAgICByZXR1cm4gbG9hZGVyKG4sIChscyk9PiB7XHJcbiAgICAgICAgY29uc3QgbmxzID0gW107XHJcbiAgICAgICAgZm9yKGxldCBsIG9mIGxzKSB7XHJcbiAgICAgICAgICBubHMucHVzaCh7XHJcbiAgICAgICAgICAgIC4uLmwsXHJcbiAgICAgICAgICAgIGpzOiB0aGlzLmNzc0xheWVySnNPYmplY3QobClcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xiKG5scyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0xheWVySnNPYmplY3QobCkge1xyXG4gICAgY29uc3QgY2xJZkV4ID0gKGYpPT4ge1xyXG4gICAgICBsZXQgcjtcclxuICAgICAgaWYoZikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICByID0gZigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gKGMsIHApPT4ge1xyXG4gICAgICBsZXQgbyA9IHt9O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGluaXQgPSBldmFsKGwuanMpO1xyXG4gICAgICAgIG8gPSBpbml0PyBpbml0KGMsIHApIHx8IHt9OiB7fTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBubyA9IHRoaXMuY3NzTGF5ZXJKc09iamVjdEluaXQoYywgIHApLCBybyA9IHt9O1xyXG4gICAgICBmb3IobGV0IG4gb2YgWydoaWRlJywgJ2hpZGRlbicsICdzaG93JywgJ3Nob3duJywgJ2Rpc3Bvc2UnXSkge1xyXG4gICAgICAgIHJvW25dID0gKCk9PiB7XHJcbiAgICAgICAgICBjbElmRXgobm9bbl0pO1xyXG4gICAgICAgICAgY2xJZkV4KG9bbl0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJvO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNzc0xheWVySnNPYmplY3RJbml0KGMsIHApIHtcclxuICAgIGMuZmluZCgnLmdvLXRvLXBhZ2UnKS5vbignY2xpY2snLCAoZSk9PiB7XHJcbiAgICAgIGxldCBuID0gJChlLnRhcmdldCk7XHJcbiAgICAgIHdoaWxlKG4ubGVuZ3RoICYmICFuLmhhc0NsYXNzKCdnby10by1wYWdlJykpIHtcclxuICAgICAgICBuID0gJChuWzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIG4gPSBwYXJzZUludChuLmF0dHIoJ2RhdGEtbnVtYmVyJykpO1xyXG4gICAgICBpZighaXNOYU4obikpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgcC5zY2VuZS5jdHJsLmdvVG9QYWdlKG4tMSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgY29uc3QgeXMgPSBjLmZpbmQoJy55b3V0dWJlJyk7XHJcbiAgICBpZih5cy5sZW5ndGgpIHtcclxuICAgICAgeXMuaHRtbCgnPGRpdiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7XCI+PC9kaXY+Jyk7XHJcbiAgICAgIFlvdVR1YmVBcGkuaW5pdCgpLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgZm9yKGxldCBpPTA7IGk8eXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgIGxldCB5ID0geXNbaV07XHJcbiAgICAgICAgICBjb25zdCBuID0gJCh5KSwgcGxheWVyID0gbmV3IFlULlBsYXllcihuLmZpbmQoJ2RpdicpWzBdLCB7dmlkZW9JZDogbi5hdHRyKCdkYXRhLWlkJyl9KTtcclxuICAgICAgICAgIG5bMF0ucGxheWVyID0gcGxheWVyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBoaWRlOiAoKT0+IHtcclxuICAgICAgICBpZih0aGlzLnBlbmRpbmdQbGF5ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5wZW5kaW5nUGxheWVycyA9IFtdO1xyXG4gICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuICAgICAgICAgICAgdHlwZTogJ3BlbmRpbmdQbGF5ZXJzJ1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGMuZmluZCgnLnBhdXNlLW9uLWhpZGUnKS5lYWNoKChfLCBwKT0+IHRoaXMuY3NzRnMucGF1c2UocCkpO1xyXG4gICAgICB9LFxyXG4gICAgICBzaG93bjogKCk9PiBjLmZpbmQoJy5wbGF5LW9uLXNob3duJykuZWFjaCgoXywgcCk9PiB0aGlzLmNzc0ZzLnBsYXkocCkpLFxyXG4gICAgICBkaXNwb3NlOiAoKT0+IGMuZmluZCgnLnBhdXNlLW9uLWhpZGUnKS5lYWNoKChfLCBwKT0+IHRoaXMuY3NzRnMucGF1c2UocCkpXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY3NzRnMgPSB7XHJcbiAgICBwbGF5OiAocGxheWVyKT0+IHtcclxuICAgICAgaWYocGxheWVyLnBsYXkpIHtcclxuICAgICAgICBwbGF5ZXIuZmIzZE5vUGxheSA9IGZhbHNlO1xyXG4gICAgICAgIChwbGF5ZXIucGxheSgpfHx7Y2F0Y2g6ICgpPT4gdW5kZWZpbmVkfSkuY2F0Y2goKGUpPT4ge1xyXG4gICAgICAgICAgaWYoIXBsYXllci5mYjNkTm9QbGF5ICYmIGUubmFtZT09PSdOb3RBbGxvd2VkRXJyb3InKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ1BsYXllcnMucHVzaChwbGF5ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdwZW5kaW5nUGxheWVycydcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZigkKHBsYXllcikuaGFzQ2xhc3MoJ3lvdXR1YmUnKSkge1xyXG4gICAgICAgIGNvbnN0IHAgPSBwbGF5ZXIucGxheWVyO1xyXG4gICAgICAgIHBsYXllci5mYjNkTm9QbGF5ID0gZmFsc2U7XHJcbiAgICAgICAgaWYocCAmJiBwLnBsYXlWaWRlbykge1xyXG4gICAgICAgICAgcC5wbGF5VmlkZW8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpPT4ge1xyXG4gICAgICAgICAgICBpZighcGxheWVyLmZiM2ROb1BsYXkpIHtcclxuICAgICAgICAgICAgICB0aGlzLmNzc0ZzLnBsYXkocGxheWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSwgMjAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBwYXVzZTogKHBsYXllcik9PiB7XHJcbiAgICAgIGlmKHBsYXllci5wYXVzZSkge1xyXG4gICAgICAgIHBsYXllci5mYjNkTm9QbGF5ID0gdHJ1ZTtcclxuICAgICAgICBwbGF5ZXIucGF1c2UoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKCQocGxheWVyKS5oYXNDbGFzcygneW91dHViZScpKSB7XHJcbiAgICAgICAgY29uc3QgcCA9IHBsYXllci5wbGF5ZXI7XHJcbiAgICAgICAgcGxheWVyLmZiM2ROb1BsYXkgPSB0cnVlO1xyXG4gICAgICAgIGlmKHAgJiYgcC5wYXVzZVZpZGVvKSB7XHJcbiAgICAgICAgICBwLnBhdXNlVmlkZW8oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2suanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IENvbnRyb2xsZXIgZnJvbSAnQ29udHJvbGxlcic7XHJcbmltcG9ydCB7cHJvcHMgYXMgIGJvb2tDb250cm9sbGVyUHJvcHN9IGZyb20gJy4uL3Byb3BzL2Jvb2tDb250cm9sbGVyJztcclxuaW1wb3J0IEV2ZW50c1RvQWN0aW9ucyBmcm9tICdFdmVudHNUb0FjdGlvbnMnO1xyXG5pbXBvcnQgU3RhdHMgZnJvbSAnc3RhdHMuanMnO1xyXG5pbXBvcnQgT2JqZWN0M0RXYXRjaGVyIGZyb20gJ09iamVjdDNEV2F0Y2hlcic7XHJcbmltcG9ydCBGdWxsU2NyZWVuWCBmcm9tICdGdWxsU2NyZWVuWCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rQ29udHJvbGxlciBleHRlbmRzIENvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihib29rLCB2aWV3LCBwcm9wcykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMubmF2aWdhdGlvbkNvbnRyb2xzID0gdHJ1ZTtcclxuICAgIHRoaXMuYm9vayA9IGJvb2s7XHJcbiAgICB0aGlzLnZpc3VhbCA9IGJvb2sudmlzdWFsO1xyXG4gICAgdGhpcy5wID0gQm9va0NvbnRyb2xsZXIucHJlcGFyZVByb3BzKHByb3BzKTtcclxuICAgIHRoaXMucC5ydGwgPSBib29rLnAucnRsO1xyXG5cclxuICAgIHRoaXMub3JiaXQgPSBib29rLnZpc3VhbC5nZXRPcmJpdCgpO1xyXG4gICAgYm9vay5zZXRGbGlwUHJvZ3Jlc3NDbGIodGhpcy51cGRhdGVWaWV3SWZTdGF0ZS5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMudmlldyA9IHZpZXc7XHJcbiAgICB0aGlzLmJpbmRBY3Rpb25zKCk7XHJcblxyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgc21hcnRQYW46ICF0aGlzLmFjdGlvbnNbJ2NtZFNtYXJ0UGFuJ10uYWN0aXZlLFxyXG4gICAgICBzaW5nbGVQYWdlOiB0aGlzLmlzU2luZ2xlUGFnZUF2YWlsYWJsZSgpPyB0aGlzLmFjdGlvbnNbJ2NtZFNpbmdsZVBhZ2UnXS5hY3RpdmUgfHwgdGhpcy5hY3Rpb25zWydjbWRTaW5nbGVQYWdlJ10uYWN0aXZlRm9yTW9iaWxlICYmIHRoaXMudmlzdWFsLmlzTW9iaWxlKCk6IGZhbHNlLFxyXG4gICAgICBzdGF0czogdGhpcy5hY3Rpb25zWydjbWRTdGF0cyddLmFjdGl2ZSxcclxuICAgICAgbGlnaHRpbmc6IHRoaXMucC5saWdodGluZy5kZWZhdWx0LFxyXG4gICAgICBhY3RpdmVTaWRlOiAxXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGJveDAgPSBuZXcgVEhSRUUuQm94MygpLCBib3gxID0gbmV3IFRIUkVFLkJveDMoKSxcclxuICAgICAgICAgIGJvb2tXaWR0aCA9IGJvb2sub3BlbmVkQm94Lm1heC54LWJvb2sub3BlbmVkQm94Lm1pbi54O1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlciA9IG5ldyBPYmplY3QzRFdhdGNoZXIodGhpcy52aXN1YWwsICgpPT4ge1xyXG4gICAgICBpZih0aGlzLnN0YXRlLnNpbmdsZVBhZ2UpIHtcclxuICAgICAgICBpZih0aGlzLnN0YXRlLmFjdGl2ZVNpZGUpIHtcclxuICAgICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLnJpZ2h0Q292ZXIudGhyZWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGJveDAuc2V0RnJvbU9iamVjdChib29rLmxlZnRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgYm94MS5zZXRGcm9tT2JqZWN0KGJvb2sucmlnaHRDb3Zlci50aHJlZSk7XHJcbiAgICAgICAgYm94MC51bmlvbihib3gxKTtcclxuICAgICAgICBjb25zdCB3aWR0aCA9IE1hdGgubWF4KGJveDAubWluLngtYm94MC5taW4ueCwgYm9va1dpZHRoKSwgeDAgPSAoYm94MC5taW4ueCtib3gwLm1heC54KS8yO1xyXG4gICAgICAgIGJveDAubWluLnggPSB4MC0wLjUqd2lkdGg7XHJcbiAgICAgICAgYm94MC5tYXgueCA9IHgwKzAuNSp3aWR0aDtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYm94MDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IHRoaXMucC5zY2FsZS5kZWZhdWx0O1xyXG4gICAgdGhpcy5ib29rLnNldFpvb20odGhpcy5ib29rV2F0Y2hlci5zY2FsZSwgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlKTtcclxuXHJcbiAgICB0aGlzLlN0YXRzID0gbmV3IFN0YXRzKCk7XHJcbiAgICB0aGlzLlN0YXRzLmRvbUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG4gICAgdGhpcy5TdGF0cy5kb21FbGVtZW50LnN0eWxlLnRvcCA9ICcwcHgnO1xyXG5cclxuICAgIHRoaXMudmlzdWFsLnNldEV4dHJhTGlnaHRpbmcodGhpcy5zdGF0ZS5saWdodGluZyk7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBvblNjcmVlbk1vZGVDaGFuZ2VkOiB0aGlzLm9uU2NyZWVuTW9kZUNoYW5nZWQuYmluZCh0aGlzKSxcclxuICAgICAgc3RhdHM6IHRoaXMuU3RhdHMudXBkYXRlLmJpbmQodGhpcy5TdGF0cyksXHJcbiAgICAgIG9uVXBkYXRlVmlldzogdGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcylcclxuICAgIH1cclxuICAgIEZ1bGxTY3JlZW5YLmFkZEV2ZW50TGlzdGVuZXIodGhpcy52aWV3LmdldFBhcmVudENvbnRhaW5lcigpLm93bmVyRG9jdW1lbnQsIHRoaXMuYmluZHMub25TY3JlZW5Nb2RlQ2hhbmdlZCk7XHJcblxyXG4gICAgdGhpcy5jbWRTbWFydFBhbigpO1xyXG5cclxuICAgIHRoaXMuYm9vay5lbmFibGVMb2FkaW5nQW5pbWF0aW9uKHRoaXMucC5sb2FkaW5nQW5pbWF0aW9uLmJvb2spO1xyXG4gICAgaWYodGhpcy5wLmxvYWRpbmdBbmltYXRpb24uc2tpbikge1xyXG4gICAgICB0aGlzLmluaXRMb2FkaW5nQW5pbWF0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ib29rLmVuYWJsZUxvYWRpbmdBbmltYXRpb24odGhpcy5wLmxvYWRpbmdBbmltYXRpb24uYm9vayk7XHJcbiAgICB0aGlzLmJvb2suc2V0QXV0b1Jlc29sdXRpb24odGhpcy5wLmF1dG9SZXNvbHV0aW9uLmVuYWJsZWQsIHRoaXMucC5hdXRvUmVzb2x1dGlvbi5jb2VmZmljaWVudCk7XHJcblxyXG4gICAgdGhpcy52aXN1YWwuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcykpO1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ3BlbmRpbmdQbGF5ZXJzJywgdGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIEZ1bGxTY3JlZW5YLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy52aWV3LmdldFBhcmVudENvbnRhaW5lcigpLm93bmVyRG9jdW1lbnQsIHRoaXMuYmluZHMub25TY3JlZW5Nb2RlQ2hhbmdlZCk7XHJcbiAgICBkZWxldGUgdGhpcy5ib29rO1xyXG4gICAgZGVsZXRlIHRoaXMudmlldztcclxuICAgIGRlbGV0ZSB0aGlzLnZpc3VhbDtcclxuICB9XHJcblxyXG4gIHJlYWR5KHNjZW5lKSB7XHJcbiAgICBpZih0aGlzLnZpZXcudGVtcGxhdGVPYmplY3QuYXBwTG9hZGVkKSB7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLnZpZXcudGVtcGxhdGVPYmplY3QuYXBwTG9hZGVkKHNjZW5lKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpbml0TG9hZGluZ0FuaW1hdGlvbigpIHtcclxuICAgIGNvbnN0IGhhbmRsZXIgPSAoKT0+IHtcclxuICAgICAgY29uc3QgcGFnZXMgPSB0aGlzLmJvb2suZ2V0VG9wUGFnZXMoKTtcclxuICAgICAgbGV0IHZpc2libGUgPSBmYWxzZTtcclxuICAgICAgZm9yKGxldCBuIG9mIHBhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmJvb2suZ2V0UGFnZVN0YXRlKG4pO1xyXG4gICAgICAgIHZpc2libGUgPSBzdGF0ZT09PXVuZGVmaW5lZCB8fCBzdGF0ZT09PSdsb2FkaW5nJztcclxuICAgICAgICBpZih2aXNpYmxlKSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nJywge1xyXG4gICAgICAgIHZpc2libGVcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZUFuaW1hdGlvbicsIGhhbmRsZXIpO1xyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyQW5pbWF0aW9uJywgaGFuZGxlcik7XHJcbiAgICB0aGlzLmJvb2suYWRkRXZlbnRMaXN0ZW5lcignbG9hZFBhZ2UnLCBoYW5kbGVyKTtcclxuICAgIHRoaXMuYm9vay5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRQYWdlJywgaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBlbmFibGVOYXZpZ2F0aW9uKGVuYWJsZSkge1xyXG4gICAgdGhpcy5uYXZpZ2F0aW9uQ29udHJvbHMgPSBlbmFibGU7XHJcbiAgfVxyXG5cclxuICBzZXRUb2NDdHJsKHRvY0N0cmwpIHtcclxuICAgIHRoaXMudG9jQ3RybCA9IHRvY0N0cmw7XHJcbiAgICB0aGlzLnRvY0N0cmwub25DaGFuZ2UgPSB0aGlzLnVwZGF0ZVZpZXcuYmluZCh0aGlzKTtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2hhcmVDdHJsKHNoYXJlQ3RybCkge1xyXG4gICAgdGhpcy5zaGFyZUN0cmwgPSBzaGFyZUN0cmw7XHJcbiAgICB0aGlzLnNoYXJlQ3RybC5vbkNoYW5nZSA9IHRoaXMudXBkYXRlVmlldy5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBzZXRQcmludGVyKHByaW50ZXIpIHtcclxuICAgIHRoaXMucHJpbnRlciA9IHByaW50ZXI7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHNldFNvdW5kcyhzb3VuZHMpIHtcclxuICAgIHRoaXMuc291bmRzID0gc291bmRzO1xyXG4gICAgc291bmRzLnNldEVuYWJsZWQodGhpcy5hY3Rpb25zWydjbWRTb3VuZHMnXS5hY3RpdmUpO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgb25TY3JlZW5Nb2RlQ2hhbmdlZChlKSB7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNhblpvb21JbigpIHtcclxuICAgIHJldHVybiAhdGhpcy5zdGF0ZS5zbWFydFBhbiB8fCBNYXRoLmFicyh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlLXRoaXMucC5zY2FsZS5tYXgpPnRoaXMucC5lcHM7XHJcbiAgfVxyXG5cclxuICBjYW5ab29tT3V0KCkge1xyXG4gICAgcmV0dXJuICF0aGlzLnN0YXRlLnNtYXJ0UGFuIHx8IE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtdGhpcy5wLnNjYWxlLm1pbik+dGhpcy5wLmVwcztcclxuICB9XHJcblxyXG4gIGNhbkRlZmF1bHRab29tKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuc21hcnRQYW47XHJcbiAgfVxyXG5cclxuICBzZXRCb29rWm9vbShzY2FsZSkge1xyXG4gICAgLy8gc2V0VGltZW91dCgoKT0+IHtcclxuICAgIC8vICAgaWYoTWF0aC5hYnModGhpcy5ib29rV2F0Y2hlci5zY2FsZS1zY2FsZSk8MWUtMykge1xyXG4gICAgICAgIHRoaXMuYm9vay5zZXRab29tKHNjYWxlLCB0aGlzLnN0YXRlLnNpbmdsZVBhZ2UpO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyB9LCAxMDAwKTtcclxuICB9XHJcblxyXG4gIGNtZFpvb21JbigpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc21hcnRQYW4pIHtcclxuICAgICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IE1hdGgubWluKHRoaXMucC5zY2FsZS5tYXgsIHRoaXMuYm9va1dhdGNoZXIuc2NhbGUrdGhpcy5wLnNjYWxlLmRlbHRhKTtcclxuICAgICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLm9yYml0Lnpvb21Jbig2LjYqdGhpcy5wLnNjYWxlLmRlbHRhLzAuMzIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjbWRab29tT3V0KCkge1xyXG4gICAgaWYodGhpcy5zdGF0ZS5zbWFydFBhbikge1xyXG4gICAgICB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlID0gTWF0aC5tYXgodGhpcy5wLnNjYWxlLm1pbiwgdGhpcy5ib29rV2F0Y2hlci5zY2FsZS10aGlzLnAuc2NhbGUuZGVsdGEpO1xyXG4gICAgICB0aGlzLnNldEJvb2tab29tKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMub3JiaXQuem9vbU91dCg2LjYqdGhpcy5wLnNjYWxlLmRlbHRhLzAuMzIpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBzZXRTY2FsZShzY2FsZSkge1xyXG4gICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IE1hdGgubWluKHRoaXMucC5zY2FsZS5tYXgsIE1hdGgubWF4KHRoaXMucC5zY2FsZS5taW4sIHNjYWxlKSk7XHJcbiAgICB0aGlzLnNldEJvb2tab29tKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUpO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjbWREZWZhdWx0Wm9vbSgpIHtcclxuICAgIGlmKHRoaXMuc3RhdGUuc21hcnRQYW4pIHtcclxuICAgICAgdGhpcy5ib29rV2F0Y2hlci5zY2FsZSA9IHRoaXMucC5zY2FsZS5kZWZhdWx0O1xyXG4gICAgICB0aGlzLnNldEJvb2tab29tKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZFRvYygpIHtcclxuICAgIGlmKHRoaXMudG9jQ3RybCkge1xyXG4gICAgICB0aGlzLnRvY0N0cmwudG9nbGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZFNoYXJlKCkge1xyXG4gICAgaWYodGhpcy5zaGFyZUN0cmwpIHtcclxuICAgICAgdGhpcy5zaGFyZUN0cmwudG9nbGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNtZEZhc3RCYWNrd2FyZCgpIHtcclxuICAgIGlmKCF0aGlzLmNhbkZsaXBMZWZ0KCkpIHJldHVybjtcclxuICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwTGVmdCg1KSk7XHJcbiAgfVxyXG5cclxuICBjbWRCYWNrd2FyZCgpIHtcclxuICAgIGlmKCF0aGlzLmNhbkZsaXBMZWZ0KCkpIHJldHVybjtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYodGhpcy5zdGF0ZS5hY3RpdmVTaWRlKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoMSkpLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgICAgIGlmKGJsb2NrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLnN0YXJ0RmxpcCh0aGlzLmJvb2suZmxpcExlZnQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kQmlnQmFja3dhcmQoKSB7XHJcbiAgICB0aGlzLmNtZEJhY2t3YXJkKCk7XHJcbiAgfVxyXG5cclxuICBjbWRGb3J3YXJkKCkge1xyXG4gICAgaWYoIXRoaXMuY2FuRmxpcFJpZ2h0KCkpIHJldHVybjtcclxuICAgIGlmKHRoaXMuc3RhdGUuc2luZ2xlUGFnZSkge1xyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAodGhpcy5nZXRQYWdlKCkrMSklMjtcclxuICAgICAgaWYoIXRoaXMuc3RhdGUuYWN0aXZlU2lkZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuYWN0aXZlU2lkZSA9IDE7XHJcbiAgICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBSaWdodCgxKSkudGhlbigoYmxvY2spPT4ge1xyXG4gICAgICAgICAgaWYoYmxvY2spIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3RpdmVTaWRlID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuc3RhcnRGbGlwKHRoaXMuYm9vay5mbGlwUmlnaHQoMSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kQmlnRm9yd2FyZCgpIHtcclxuICAgIHRoaXMuY21kRm9yd2FyZCgpO1xyXG4gIH1cclxuXHJcbiAgY21kRmFzdEZvcndhcmQoKSB7XHJcbiAgICBpZighdGhpcy5jYW5GbGlwUmlnaHQoKSkgcmV0dXJuO1xyXG4gICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBSaWdodCg1KSk7XHJcbiAgfVxyXG5cclxuICBjbWRTYXZlKCkge1xyXG4gICAgY29uc3QgYSA9ICQoJzxhIGhyZWY9XCInK3RoaXMucC5kb3dubG9hZFVSTCsnXCIgZG93bmxvYWQgdGFyZ2V0PVwiX2JsYW5rXCI+PC9hPicpLmFwcGVuZFRvKHRoaXMudmlldy5nZXRDb250YWluZXIoKSk7XHJcbiAgICBhWzBdLmNsaWNrKCk7XHJcbiAgICBhLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgY21kUHJpbnQoKSB7XHJcbiAgICB0aGlzLnByaW50ZXIucHJpbnQoKTtcclxuICB9XHJcblxyXG4gIGNtZEZ1bGxTY3JlZW4oKSB7XHJcbiAgICBpZighRnVsbFNjcmVlblguYWN0aXZhdGVkKCkpIHtcclxuICAgICAgRnVsbFNjcmVlblgucmVxdWVzdCh0aGlzLnZpZXcuZ2V0UGFyZW50Q29udGFpbmVyKCkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIEZ1bGxTY3JlZW5YLmNhbmNlbCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY21kU21hcnRQYW4oKSB7XHJcbiAgICB0aGlzLnN0YXRlLnNtYXJ0UGFuID0gIXRoaXMuc3RhdGUuc21hcnRQYW47XHJcbiAgICBpZih0aGlzLnN0YXRlLnNtYXJ0UGFuKSB7XHJcbiAgICAgIHRoaXMub3JiaXQubWluQXppbXV0aEFuZ2xlID0gMDtcclxuICAgICAgdGhpcy5vcmJpdC5tYXhBemltdXRoQW5nbGUgPSAwO1xyXG4gICAgICB0aGlzLm9yYml0Lm1pblBvbGFyQW5nbGUgPSAwO1xyXG4gICAgXHR0aGlzLm9yYml0Lm1heFBvbGFyQW5nbGUgPSBNYXRoLlBJLzQ7XHJcbiAgICAgIHRoaXMuYm9va1dhdGNoZXIuZW5hYmxlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5vcmJpdC5taW5BemltdXRoQW5nbGUgPSAtSW5maW5pdHk7XHJcbiAgICAgIHRoaXMub3JiaXQubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7XHJcbiAgICAgIHRoaXMub3JiaXQubWluUG9sYXJBbmdsZSA9IDA7XHJcbiAgICBcdHRoaXMub3JiaXQubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7XHJcbiAgICAgIHRoaXMuYm9va1dhdGNoZXIuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBpc1NpbmdsZVBhZ2VBdmFpbGFibGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ib29rLmdldFBhZ2VzKCkhPT0yO1xyXG4gIH1cclxuXHJcbiAgY21kU2luZ2xlUGFnZSgpIHtcclxuICAgIGlmKHRoaXMuaXNTaW5nbGVQYWdlQXZhaWxhYmxlKCkpIHtcclxuICAgICAgdGhpcy5zdGF0ZS5zaW5nbGVQYWdlID0gIXRoaXMuc3RhdGUuc2luZ2xlUGFnZTtcclxuICAgICAgdGhpcy5zZXRCb29rWm9vbSh0aGlzLmJvb2tXYXRjaGVyLnNjYWxlKTtcclxuICAgICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hBc3luYyh7XHJcbiAgICAgICAgdHlwZTogJ3BhZ2VNb2RlJyxcclxuICAgICAgICB2YWx1ZTogdGhpcy5zdGF0ZS5zaW5nbGVQYWdlPyAnc2luZ2xlJzogJ2RvdWJsZSdcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbWRTb3VuZHMoKSB7XHJcbiAgICBpZih0aGlzLnNvdW5kcykge1xyXG4gICAgICB0aGlzLnNvdW5kcy50b2dsZSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBjbWRTdGF0cygpIHtcclxuICAgIHRoaXMuc3RhdGUuc3RhdHMgPSAhdGhpcy5zdGF0ZS5zdGF0cztcclxuICAgIGlmKHRoaXMuc3RhdGUuc3RhdHMpIHtcclxuICAgICAgJCh0aGlzLnZpZXcuZ2V0Q29udGFpbmVyKCkpLmFwcGVuZCh0aGlzLlN0YXRzLmRvbUVsZW1lbnQpO1xyXG4gICAgICB0aGlzLnZpc3VhbC5hZGRSZW5kZXJDYWxsYmFjayh0aGlzLmJpbmRzLnN0YXRzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAkKHRoaXMudmlldy5nZXRDb250YWluZXIoKSkuZmluZCh0aGlzLlN0YXRzLmRvbUVsZW1lbnQpLnJlbW92ZSgpO1xyXG4gICAgICB0aGlzLnZpc3VhbC5yZW1vdmVSZW5kZXJDYWxsYmFjayh0aGlzLmJpbmRzLnN0YXRzKTtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgY21kTGlnaHRpbmdVcCgpIHtcclxuICAgIHRoaXMuc3RhdGUubGlnaHRpbmcgPSBNYXRoLm1pbih0aGlzLnN0YXRlLmxpZ2h0aW5nK3RoaXMucC5saWdodGluZy5kZWx0YSwgdGhpcy5wLmxpZ2h0aW5nLm1heCk7XHJcbiAgICB0aGlzLnZpc3VhbC5zZXRFeHRyYUxpZ2h0aW5nKHRoaXMuc3RhdGUubGlnaHRpbmcpO1xyXG4gICAgdGhpcy5ib29rLnVwZGF0ZVRocmVlKCk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZExpZ2h0aW5nRG93bigpIHtcclxuICAgIHRoaXMuc3RhdGUubGlnaHRpbmcgPSBNYXRoLm1heCh0aGlzLnN0YXRlLmxpZ2h0aW5nLXRoaXMucC5saWdodGluZy5kZWx0YSwgdGhpcy5wLmxpZ2h0aW5nLm1pbik7XHJcbiAgICB0aGlzLnZpc3VhbC5zZXRFeHRyYUxpZ2h0aW5nKHRoaXMuc3RhdGUubGlnaHRpbmcpO1xyXG4gICAgdGhpcy5ib29rLnVwZGF0ZVRocmVlKCk7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIGNtZFBlbmRpbmdQbGF5KCkge1xyXG4gICAgdGhpcy5ib29rLnJlc29sdmVQZW5kaW5nUGxheWVycygpO1xyXG4gIH1cclxuXHJcbiAgZ29Ub1BhZ2UocGFnZSkge1xyXG4gICAgcGFnZSA9IE1hdGgubWF4KE1hdGgubWluKHBhZ2UsIHRoaXMuYm9vay5nZXRQYWdlcygpLTEpLDApO1xyXG4gICAgaWYodGhpcy5wLnJ0bCkge1xyXG4gICAgICBwYWdlID0gdGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTEtcGFnZTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhZ2VOdW0gPSBNYXRoLm1heChNYXRoLm1pbihwYWdlLCB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCktMSksMCk7XHJcbiAgICB0aGlzLnN0YXRlLmFjdGl2ZVNpZGUgPSAocGFnZU51bSsxKSUyO1xyXG4gICAgbGV0IHRhcmdldCA9IE1hdGgubWF4KE1hdGgubWluKHBhZ2UtMStwYWdlJTIsIHRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS0xKSwwKSwgY3VycmVudCA9IHRoaXMuYm9vay5nZXRQYWdlKCksIGZsaXBzID0gW10sIGNvdnMgPSAwOztcclxuICAgIGlmKHRhcmdldCE9Y3VycmVudCkge1xyXG4gICAgICBpZihjdXJyZW50PT09MCkge1xyXG4gICAgICAgIGZsaXBzLnB1c2goMSk7XHJcbiAgICAgICAgY3VycmVudCs9MTtcclxuICAgICAgICArK2NvdnM7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihjdXJyZW50PT09dGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTEpIHtcclxuICAgICAgICBmbGlwcy5wdXNoKC0xKTtcclxuICAgICAgICBjdXJyZW50LT0yO1xyXG4gICAgICAgICsrY292cztcclxuICAgICAgfVxyXG4gICAgICBsZXQgY3YgPSAwO1xyXG4gICAgICBpZih0YXJnZXQ9PT0wKSB7XHJcbiAgICAgICAgY3YgPSAtMTtcclxuICAgICAgICB0YXJnZXQrPTE7XHJcbiAgICAgICAgKytjb3ZzO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYodGFyZ2V0PT09dGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTEpIHtcclxuICAgICAgICBjdiA9IDE7XHJcbiAgICAgICAgdGFyZ2V0LT0yO1xyXG4gICAgICAgICsrY292cztcclxuICAgICAgfVxyXG4gICAgICBpZih0YXJnZXQtY3VycmVudCkge1xyXG4gICAgICAgIGZsaXBzLnB1c2goTWF0aC5jZWlsKCh0YXJnZXQtY3VycmVudCkvMikpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKGN2KSB7XHJcbiAgICAgICAgZmxpcHMucHVzaChjdik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzZXRDbGIgPSAoZmwsIHRpbWUsIGNsYik9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICAgIGlmKGZsPDApIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBMZWZ0KC1mbCwgY2xiKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydEZsaXAodGhpcy5ib29rLmZsaXBSaWdodChmbCwgY2xiKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSwgdGltZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZihjb3ZzPT09Mikge1xyXG4gICAgICBzZXRDbGIoZmxpcHNbMF0sIDAsIChibG9jaywgcHJvZ3Jlc3MsIHN0YXRlKT0+IHtcclxuICAgICAgICBpZihzdGF0ZT09J2ZpbmlzaCcgJiYgcHJvZ3Jlc3M9PTEpIHtcclxuICAgICAgICAgIHNldENsYihmbGlwc1tmbGlwcy5sZW5ndGgtMV0sIDApO1xyXG4gICAgICAgIH1cclxuICAgICAgfSkudGhlbigoKT0+IHNldENsYihmbGlwc1sxXSwgNDAwKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgbGV0IG5leHQgPSBQcm9taXNlLnJlc29sdmUoKSwgdGltZSA9IDA7XHJcbiAgICAgIGZvcihsZXQgZmwgb2YgZmxpcHMpIHtcclxuICAgICAgICBuZXh0ID0gbmV4dC50aGVuKCgpPT4gc2V0Q2xiKGZsLCB0aW1lKSk7XHJcbiAgICAgICAgdGltZSA9IDQwMDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhcnRGbGlwKGZsaXBSZXMpIHtcclxuICAgIHJldHVybiBmbGlwUmVzPyBmbGlwUmVzLnRoZW4oKGJsb2NrKT0+IHtcclxuICAgICAgaWYoYmxvY2spIHtcclxuICAgICAgICB0aGlzLmRpc3BhdGNoQXN5bmMoe1xyXG4gICAgICAgICAgdHlwZTogJ3N0YXJ0RmxpcCdcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYmxvY2s7XHJcbiAgICB9KTogUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XHJcbiAgfVxyXG5cclxuICBlbmRGbGlwKGJsb2NrKSB7XHJcbiAgICB0aGlzLmRpc3BhdGNoQXN5bmMoe1xyXG4gICAgICB0eXBlOiAnZW5kRmxpcCdcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZSgpIHtcclxuICAgIGNvbnN0IHBhZ2UgPSB0aGlzLmJvb2suZ2V0UGFnZSgpO1xyXG4gICAgcmV0dXJuIHBhZ2U/IE1hdGgubWluKHRoaXMuYm9vay5nZXRQYWdlKCkrdGhpcy5zdGF0ZS5hY3RpdmVTaWRlLCB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCktMSk6IDA7XHJcbiAgfVxyXG5cclxuICBnZXRQYWdlRm9yR1VJKCkge1xyXG4gICAgbGV0IG4gPSAodGhpcy5zdGF0ZS5zaW5nbGVQYWdlPyB0aGlzLmdldFBhZ2UoKTogdGhpcy5ib29rLmdldFBhZ2UoKSkrMTtcclxuICAgIGlmKHRoaXMucC5ydGwpIHtcclxuICAgICAgbiA9IHRoaXMuYm9vay5nZXRCb29rUGFnZXMoKS1uKzE7XHJcbiAgICB9XHJcbiAgICBpZihuPnRoaXMuYm9vay5nZXRQYWdlcygpKSB7XHJcbiAgICAgIG4gPSB0aGlzLmJvb2suZ2V0UGFnZXMoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuO1xyXG4gIH1cclxuXHJcbiAgaW5wUGFnZShlLCBkYXRhKSB7XHJcbiAgICB0aGlzLmdvVG9QYWdlKGRhdGEtMSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3SWZTdGF0ZShibG9jaywgcHJvZ3Jlc3MsIHN0YXRlLCB0eXBlKSB7XHJcbiAgICBpZihzdGF0ZT09PSdpbml0JyB8fCBzdGF0ZT09PSdmaW5pc2gnKSB7XHJcbiAgICAgIHNldFRpbWVvdXQodGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcyksIDEwMCk7XHJcbiAgICB9XHJcbiAgICBpZihzdGF0ZT09PSdmaW5pc2gnKSB7XHJcbiAgICAgIHRoaXMuZW5kRmxpcChibG9jayk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc0NtZFZpc2libGUobmFtZSkge1xyXG4gICAgcmV0dXJuICQodGhpcy52aXN1YWwuZWxlbWVudCkud2lkdGgoKTx0aGlzLnAubmFycm93Vmlldy53aWR0aD8gKHRoaXMuYWN0aW9uc1tuYW1lXS5lbmFibGVkSW5OYXJyb3c9PT11bmRlZmluZWQ/IHRoaXMuYWN0aW9uc1tuYW1lXS5lbmFibGVkOiB0aGlzLmFjdGlvbnNbbmFtZV0uZW5hYmxlZEluTmFycm93KTogdGhpcy5hY3Rpb25zW25hbWVdLmVuYWJsZWQ7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3U3RhdGUoKSB7XHJcbiAgICB0aGlzLnZpZXdTdGF0ZSA9IHtcclxuICAgICAgJ2NtZFpvb21Jbic6IHtcclxuICAgICAgICBlbmFibGU6IHRoaXMuY2FuWm9vbUluKCksXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFpvb21JbicpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFpvb21PdXQnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0aGlzLmNhblpvb21PdXQoKSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kWm9vbU91dCcpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZERlZmF1bHRab29tJzoge1xyXG4gICAgICAgIGVuYWJsZTogdGhpcy5jYW5EZWZhdWx0Wm9vbSgpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWREZWZhdWx0Wm9vbScpLFxyXG4gICAgICAgIGFjdGl2ZTogdGhpcy5jYW5EZWZhdWx0Wm9vbSgpICYmIE1hdGguYWJzKHRoaXMuYm9va1dhdGNoZXIuc2NhbGUtdGhpcy5wLnNjYWxlLmRlZmF1bHQpPHRoaXMucC5lcHNcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFRvYyc6IHtcclxuICAgICAgICBlbmFibGU6ICEhdGhpcy50b2NDdHJsLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRUb2MnKSAmJiB0aGlzLnRvY0N0cmwsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRvY0N0cmwgJiYgdGhpcy50b2NDdHJsLnZpc2libGVcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNoYXJlJzoge1xyXG4gICAgICAgIGVuYWJsZTogISF0aGlzLnNoYXJlQ3RybCxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kU2hhcmUnKSAmJiB0aGlzLnNoYXJlQ3RybCxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuc2hhcmVDdHJsICYmIHRoaXMuc2hhcmVDdHJsLnZpc2libGVcclxuICAgICAgfSxcclxuICAgICAgJ2lucFBhZ2VzJzoge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgdmFsdWU6IHRoaXMuYm9vay5nZXRQYWdlcygpXHJcbiAgICAgIH0sXHJcbiAgICAgICdpbnBQYWdlJzoge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlOiAhdGhpcy5ib29rLmlzUHJvY2Vzc2luZygpICYmIHRoaXMubmF2aWdhdGlvbkNvbnRyb2xzLFxyXG4gICAgICAgIHZhbHVlOiB0aGlzLmdldFBhZ2VGb3JHVUkoKVxyXG4gICAgICB9LFxyXG4gICAgICAnY21kU2F2ZSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFNhdmUnKSAmJiAhIXRoaXMucC5kb3dubG9hZFVSTCxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRQcmludCc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFByaW50JykgJiYgISF0aGlzLnByaW50ZXIsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICAnY21kRnVsbFNjcmVlbic6IHtcclxuICAgICAgICBlbmFibGU6IEZ1bGxTY3JlZW5YLmF2YWlsYWJsZSgpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRGdWxsU2NyZWVuJyksXHJcbiAgICAgICAgYWN0aXZlOiBGdWxsU2NyZWVuWC5hdmFpbGFibGUoKSAmJiBGdWxsU2NyZWVuWC5hY3RpdmF0ZWQoKVxyXG4gICAgICB9LFxyXG4gICAgICAnd2lkQ29udHJvbHMnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICAnd2lkU2V0dGluZ3MnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCd3aWRTZXR0aW5ncycpLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNtYXJ0UGFuJzoge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZSgnY21kU21hcnRQYW4nKSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMuc3RhdGUuc21hcnRQYW5cclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNpbmdsZVBhZ2UnOiB7XHJcbiAgICAgICAgZW5hYmxlOiB0aGlzLmlzU2luZ2xlUGFnZUF2YWlsYWJsZSgpLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTaW5nbGVQYWdlJyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLnNpbmdsZVBhZ2VcclxuICAgICAgfSxcclxuICAgICAgJ2NtZFNvdW5kcyc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogIHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRTb3VuZHMnKSAmJiAhIXRoaXMuc291bmRzLFxyXG4gICAgICAgIGFjdGl2ZTogISF0aGlzLnNvdW5kcyAmJiB0aGlzLnNvdW5kcy5lbmFibGVkXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRTdGF0cyc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5pc0NtZFZpc2libGUoJ2NtZFN0YXRzJyksXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnN0YXRlLnN0YXRzXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRMaWdodGluZ1VwJzoge1xyXG4gICAgICAgIGVuYWJsZTogTWF0aC5hYnModGhpcy5zdGF0ZS5saWdodGluZy10aGlzLnAubGlnaHRpbmcubWF4KT50aGlzLnAuZXBzLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRMaWdodGluZ1VwJyksXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICAnY21kTGlnaHRpbmdEb3duJzoge1xyXG4gICAgICAgIGVuYWJsZTogTWF0aC5hYnModGhpcy5zdGF0ZS5saWdodGluZy10aGlzLnAubGlnaHRpbmcubWluKT50aGlzLnAuZXBzLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuaXNDbWRWaXNpYmxlKCdjbWRMaWdodGluZ0Rvd24nKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICdjbWRQZW5kaW5nUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgICd3aWRQZW5kaW5nUGxheSc6IHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy5ib29rLmhhc1BlbmRpbmdQbGF5ZXJzKCksXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBsZWZ0ID0gdGhpcy5jYW5GbGlwTGVmdCgpLFxyXG4gICAgICAgICAgcmlnaHQgPSB0aGlzLmNhbkZsaXBSaWdodCgpO1xyXG4gICAgY29uc3QgZmxpcHBlcnNFbmFibGUgPSB7XHJcbiAgICAgIGNtZEZhc3RCYWNrd2FyZDogbGVmdCxcclxuICAgICAgY21kQmFja3dhcmQ6IGxlZnQsXHJcbiAgICAgIGNtZEJpZ0JhY2t3YXJkOiBsZWZ0LFxyXG4gICAgICBjbWRGb3J3YXJkOiByaWdodCxcclxuICAgICAgY21kQmlnRm9yd2FyZDogcmlnaHQsXHJcbiAgICAgIGNtZEZhc3RGb3J3YXJkOiByaWdodFxyXG4gICAgfTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyhmbGlwcGVyc0VuYWJsZSkpIHtcclxuICAgICAgdGhpcy52aWV3U3RhdGVbbmFtZV0gPSB7XHJcbiAgICAgICAgZW5hYmxlOiBmbGlwcGVyc0VuYWJsZVtuYW1lXSxcclxuICAgICAgICB2aXNpYmxlOiB0aGlzLmlzQ21kVmlzaWJsZShuYW1lKSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY2FuRmxpcExlZnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXZpZ2F0aW9uQ29udHJvbHMgJiYgKCEhdGhpcy5ib29rLmdldExlZnRGbGlwcGluZygpIHx8IHRoaXMuc3RhdGUuc2luZ2xlUGFnZSAmJiB0aGlzLnAucnRsICYmIHRoaXMuZ2V0UGFnZSgpPT09Mik7XHJcbiAgfVxyXG5cclxuICBjYW5GbGlwUmlnaHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXZpZ2F0aW9uQ29udHJvbHMgJiYgKCEhdGhpcy5ib29rLmdldFJpZ2h0RmxpcHBpbmcoKSB8fCB0aGlzLnN0YXRlLnNpbmdsZVBhZ2UgJiYgIXRoaXMucC5ydGwgJiYgdGhpcy5nZXRQYWdlKCk9PT10aGlzLmJvb2suZ2V0UGFnZXMoKS0yKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVZpZXcoKSB7XHJcbiAgICBpZih0aGlzLnZpZXcpIHtcclxuICAgICAgdGhpcy51cGRhdGVWaWV3U3RhdGUoKTtcclxuICAgICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMudmlld1N0YXRlKSkge1xyXG4gICAgICAgIHRoaXMudmlldy5zZXRTdGF0ZShuYW1lLCB0aGlzLnZpZXdTdGF0ZVtuYW1lXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEFjdGlvbnMoKSB7XHJcbiAgICBjb25zdCBpc1N3aXBwaW5nID0gKG5hbWUpPT4ge1xyXG4gICAgICByZXR1cm4gdGhpcy5hY3Rpb25zLnRvdWNoQ21kU3dpcGUuZW5hYmxlZCAmJiB0aGlzLmFjdGlvbnMudG91Y2hDbWRTd2lwZS5jb2RlPT09dGhpcy5hY3Rpb25zW25hbWVdLmNvZGUgJiYgdGhpcy5zdGF0ZS5zbWFydFBhbiAmJiB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlPD0xO1xyXG4gICAgfSwgY21kcyA9IHt9O1xyXG5cclxuICAgIGZvcihsZXQgbmFtZSBpbiB0aGlzKSB7XHJcbiAgICAgIGlmKG5hbWUuaW5kZXhPZignY21kJyk9PT0wKSB7XHJcbiAgICAgICAgY21kc1tuYW1lXSA9IHtcclxuICAgICAgICAgIGFjdGl2YXRlOiAoLi4uYXJncyk9PiB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudmlld1N0YXRlICYmIHRoaXMudmlld1N0YXRlW25hbWVdLmVuYWJsZSkge1xyXG4gICAgICAgICAgICAgIHRoaXNbbmFtZV0oLi4uYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgLi4uY21kcyxcclxuICAgICAgY21kUGFuTGVmdDoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIHtcclxuICAgICAgICAgIHN0YXRlOiAnbW92ZScsXHJcbiAgICAgICAgICBkeDogLXRoaXMucC5wYW4uc3BlZWQsXHJcbiAgICAgICAgICBkeTogMFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblJpZ2h0OiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IChlKT0+IHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwge1xyXG4gICAgICAgICAgc3RhdGU6ICdtb3ZlJyxcclxuICAgICAgICAgIGR4OiB0aGlzLnAucGFuLnNwZWVkLFxyXG4gICAgICAgICAgZHk6IDBcclxuICAgICAgICB9KVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQYW5VcDoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB0aGlzLm9yYml0LmFjdGlvbnMucGFuKGUsIHtcclxuICAgICAgICAgIHN0YXRlOiAnbW92ZScsXHJcbiAgICAgICAgICBkeDogMCxcclxuICAgICAgICAgIGR5OiAtdGhpcy5wLnBhbi5zcGVlZFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhbkRvd246IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUpPT4gdGhpcy5vcmJpdC5hY3Rpb25zLnBhbihlLCB7XHJcbiAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgZHg6IDAsXHJcbiAgICAgICAgICBkeTogdGhpcy5wLnBhbi5zcGVlZFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kUm90YXRlOiB7XHJcbiAgICAgICAgYWN0aXZhdGU6IHRoaXMub3JiaXQuYWN0aW9ucy5yb3RhdGVcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWREcmFnWm9vbToge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSwgZGF0YSk9PiB7XHJcbiAgICAgICAgICBpZihkYXRhLmR5PjApIHtcclxuICAgICAgICAgICAgdGhpcy5jbWRab29tT3V0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIGlmKGRhdGEuZHk8MCkge1xyXG4gICAgICAgICAgICB0aGlzLmNtZFpvb21JbigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRQYW46IHtcclxuICAgICAgICBhY3RpdmF0ZTogdGhpcy5vcmJpdC5hY3Rpb25zLnBhblxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFdoZWVsWm9vbToge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSk9PiB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICBpZihlLmRlbHRhWTwwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY21kWm9vbU91dCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSBpZihlLmRlbHRhWT4wKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY21kWm9vbUluKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFJvdGF0ZToge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSwgZGF0YSk9PiB7XHJcbiAgICAgICAgICBpZighaXNTd2lwcGluZygndG91Y2hDbWRSb3RhdGUnKSkge1xyXG4gICAgICAgICAgICBpZihkYXRhLnN0YXRlPT09J21vdmUnKSB7XHJcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub3JiaXQuYWN0aW9ucy5yb3RhdGUoZSwgZGF0YSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFpvb206IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUsIGRhdGEpPT4ge1xyXG4gICAgICAgICAgaWYoIWlzU3dpcHBpbmcoJ3RvdWNoQ21kWm9vbScpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGwgPSBmdW5jdGlvbih2KSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIE1hdGguc3FydCh2Lngqdi54K3YueSp2LnkpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZihkYXRhLnN0YXRlPT09J3N0YXJ0Jykge1xyXG4gICAgICAgICAgICAgIHRoaXMudG91Y2hab29tRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGw6IGwoZGF0YSksXHJcbiAgICAgICAgICAgICAgICBzY2FsZTogdGhpcy5ib29rV2F0Y2hlci5zY2FsZVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZihkYXRhLnN0YXRlPT09J21vdmUnKSB7XHJcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0U2NhbGUobChkYXRhKS90aGlzLnRvdWNoWm9vbURhdGEubCp0aGlzLnRvdWNoWm9vbURhdGEuc2NhbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB0b3VjaENtZFBhbjoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoZSwgZGF0YSk9PiB7XHJcbiAgICAgICAgICBpZighaXNTd2lwcGluZygndG91Y2hDbWRQYW4nKSkge1xyXG4gICAgICAgICAgICBpZihkYXRhLnN0YXRlPT09J21vdmUnICYmICghdGhpcy5zdGF0ZS5zbWFydFBhbiB8fCB0aGlzLmJvb2tXYXRjaGVyLnNjYWxlPjEpKSB7XHJcbiAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIHRoaXMub3JiaXQuYWN0aW9ucy5wYW4oZSwgZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kU3dpcGU6IHtcclxuICAgICAgICBhY3RpdmF0ZTogKGUsIGRhdGEpPT4ge1xyXG4gICAgICAgICAgaWYoaXNTd2lwcGluZygndG91Y2hDbWRTd2lwZScpKSB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuc3RhdGU9PT0nc3RhcnQnKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgdG91Y2ggPSAoZS50b3VjaGVzIHx8IGUub3JpZ2luYWxFdmVudC50b3VjaGVzKVt0aGlzLmFjdGlvbnMudG91Y2hDbWRTd2lwZS5jb2RlLTFdO1xyXG4gICAgICAgICAgICAgIHRoaXMuc3dpcGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICB4MDogdG91Y2gucGFnZVgsXHJcbiAgICAgICAgICAgICAgICB5MDogdG91Y2gucGFnZVksXHJcbiAgICAgICAgICAgICAgICB4OiB0b3VjaC5wYWdlWCxcclxuICAgICAgICAgICAgICAgIHk6IHRvdWNoLnBhZ2VZXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmKGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgaWYoIXRoaXMuc3dpcGVEYXRhLmhhbmRsZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dpcGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAuLi50aGlzLnN3aXBlRGF0YSxcclxuICAgICAgICAgICAgICAgICAgeDogdGhpcy5zd2lwZURhdGEueCtkYXRhLmR4LFxyXG4gICAgICAgICAgICAgICAgICB5OiB0aGlzLnN3aXBlRGF0YS55K2RhdGEuZHlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKE1hdGguYWJzKHRoaXMuc3dpcGVEYXRhLngwLXRoaXMuc3dpcGVEYXRhLngpPjEwMCkge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN3aXBlRGF0YS54MD50aGlzLnN3aXBlRGF0YS54PyB0aGlzLmNtZEZvcndhcmQoKTogdGhpcy5jbWRCYWNrd2FyZCgpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnN3aXBlRGF0YS5oYW5kbGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3dpcGVEYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICB3aWRTZXR0aW5nczoge1xyXG4gICAgICAgIGFjdGl2YXRlOiAoKT0+IHVuZGVmaW5lZFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYmluZEFjdGlvbnMoKSB7XHJcbiAgICB0aGlzLmVUb0EgPSBuZXcgRXZlbnRzVG9BY3Rpb25zKCQodGhpcy52aXN1YWwuZWxlbWVudCkpO1xyXG4gICAgdGhpcy5lVG9BLmFkZEFjdGlvbigoZSk9PiBlLnByZXZlbnREZWZhdWx0KCksICdjb250ZXh0bWVudScsIEV2ZW50c1RvQWN0aW9ucy5tb3VzZUJ1dHRvbnMuUmlnaHQsIDApO1xyXG5cclxuICAgIHRoaXMuYWN0aW9ucyA9IHRoaXMuZ2V0QWN0aW9ucygpO1xyXG4gICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKHRoaXMuYWN0aW9ucykpIHtcclxuICAgICAgY29uc3QgYWN0aW9uID0ge1xyXG4gICAgICAgIC4uLnRoaXMuYWN0aW9uc1tuYW1lXSxcclxuICAgICAgICAuLi50aGlzLnAuYWN0aW9uc1tuYW1lXVxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmFjdGlvbnNbbmFtZV0gPSBhY3Rpb247XHJcbiAgICAgIGlmKGFjdGlvbi5lbmFibGVkKSB7XHJcbiAgICAgICAgY29uc3QgZmxhZ3MgPSBhY3Rpb24uZmxhZ3MgfHwgMDtcclxuICAgICAgICBpZihhY3Rpb24udHlwZSkge1xyXG4gICAgICAgICAgdGhpcy5lVG9BLmFkZEFjdGlvbihhY3Rpb24uYWN0aXZhdGUsIGFjdGlvbi50eXBlLCBhY3Rpb24uY29kZSwgZmxhZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGFjdGlvbi5jb2RlIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICB0aGlzLmVUb0EuYWRkQWN0aW9uKGFjdGlvbi5hY3RpdmF0ZSwgJ2tleWRvd24nLCBhY3Rpb24uY29kZSwgZmxhZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHByZXBhcmVQcm9wcyhwcm9wcykge1xyXG4gICAgcmV0dXJuIEJvb2tDb250cm9sbGVyLmNhbGNQcm9wcyhCb29rQ29udHJvbGxlci5tZXJnZVByb3BzKGJvb2tDb250cm9sbGVyUHJvcHMoKSwgcHJvcHMpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRBY3Rpb25zKHByb3BzLCBhY3Rpb25zKSB7XHJcbiAgICBmb3IobGV0IG5hbWUgb2YgT2JqZWN0LmtleXMoYWN0aW9ucyB8fCB7fSkpIHtcclxuICAgICAgcHJvcHMuYWN0aW9uc1tuYW1lXSA9IHtcclxuICAgICAgICAuLi5wcm9wcy5hY3Rpb25zW25hbWVdLFxyXG4gICAgICAgIC4uLmFjdGlvbnNbbmFtZV1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBtZXJnZVByb3BzKGZpcnN0LCBzZWNvbmQpIHtcclxuICAgIHNlY29uZCA9IHNlY29uZCB8fCB7fTtcclxuICAgIGZ1bmN0aW9uIG1lcmdlKGZpcnN0LCBzZWNvbmQpIHtcclxuICAgICAgc2Vjb25kID0gc2Vjb25kIHx8IHt9O1xyXG4gICAgICBjb25zdCBwcm9wcyA9IHtcclxuICAgICAgICAuLi5maXJzdCxcclxuICAgICAgICAuLi5zZWNvbmRcclxuICAgICAgfTtcclxuICAgICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKGZpcnN0KSkge1xyXG4gICAgICAgIGlmKHR5cGVvZiBmaXJzdFtuYW1lXT09PSdvYmplY3QnKSB7XHJcbiAgICAgICAgICBwcm9wc1tuYW1lXSA9IG1lcmdlKGZpcnN0W25hbWVdLCBzZWNvbmRbbmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcHJvcHM7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm9wcyA9IG1lcmdlKGZpcnN0LCBzZWNvbmQpO1xyXG4gICAgQm9va0NvbnRyb2xsZXIuc2V0QWN0aW9ucyhwcm9wcywgZmlyc3QuYWN0aW9ucyk7XHJcbiAgICBCb29rQ29udHJvbGxlci5zZXRBY3Rpb25zKHByb3BzLCBzZWNvbmQuYWN0aW9ucyk7XHJcbiAgICByZXR1cm4gcHJvcHM7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2FsY1Byb3BzKHByb3BzKSB7XHJcbiAgICBwcm9wcy5zY2FsZS5kZWx0YSA9IChwcm9wcy5zY2FsZS5tYXgtcHJvcHMuc2NhbGUubWluKS9wcm9wcy5zY2FsZS5sZXZlbHM7XHJcbiAgICBwcm9wcy5saWdodGluZy5kZWx0YSA9IChwcm9wcy5saWdodGluZy5tYXgtcHJvcHMubGlnaHRpbmcubWluKS9wcm9wcy5saWdodGluZy5sZXZlbHM7XHJcbiAgICByZXR1cm4gcHJvcHM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tDb250cm9sbGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJvb2tQcmludGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgYm9vaywgc3R5bGVTaGVldCkge1xyXG4gICAgdGhpcy5ib29rID0gYm9vaztcclxuICAgIHRoaXMuc3R5bGVTaGVldCA9IHN0eWxlU2hlZXQ7XHJcbiAgICB0aGlzLnduZCA9IGNvbnRleHQud25kO1xyXG4gICAgdGhpcy5kb2MgPSBjb250ZXh0LmRvYztcclxuICAgIHRoaXMucGFnZUNhbGxiYWNrID0gYm9vay5nZXRQYWdlQ2FsbGJhY2soKTtcclxuICAgIGNvbnN0IHRlc3QgPSB0aGlzLnBhZ2VDYWxsYmFjaygwKTtcclxuICAgIHRoaXMudHlwZSA9IHRlc3QudHlwZTtcclxuICAgIGlmKHRoaXMudHlwZT09PSdwZGYnKSB7XHJcbiAgICAgIHRoaXMucGRmU3JjID0gdGVzdC5zcmMuc3JjO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FuY2VsKCkge1xyXG4gICAgdGhpcy5jYW5jZWxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgaWYodGhpcy5mcmFtZSkge1xyXG4gICAgICB0aGlzLmZyYW1lLnJlbW92ZSgpO1xyXG4gICAgICBkZWxldGUgdGhpcy5mcmFtZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaW50KCkge1xyXG4gICAgZGVsZXRlIHRoaXMuY2FuY2VsZWQ7XHJcbiAgICBpZih0aGlzLnR5cGU9PT0ncGRmJykge1xyXG4gICAgICBsZXQgcHJpbnRXbmQsIGNhbGxNYW51YWxseSA9IGZhbHNlO1xyXG4gICAgICBpZih0aGlzLnVzZUlGcmFtZSgpKSB7XHJcbiAgICAgICAgY2FsbE1hbnVhbGx5ID0gISF0aGlzLmZyYW1lO1xyXG4gICAgICAgIGlmKCF0aGlzLmZyYW1lKSB7XHJcbiAgICAgICAgICB0aGlzLmZyYW1lID0gJCgnPGlmcmFtZSBzcmM9XCInK3RoaXMucGRmU3JjKydcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+PC9pZnJhbWU+JykuYXBwZW5kVG8odGhpcy5kb2MuYm9keSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByaW50V25kID0gdGhpcy5mcmFtZVswXS5jb250ZW50V2luZG93O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHByaW50V25kID0gdGhpcy53bmQub3Blbih0aGlzLnBkZlNyYyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYoY2FsbE1hbnVhbGx5KSB7XHJcbiAgICAgICAgcHJpbnRXbmQucHJpbnQoKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAkKHByaW50V25kKS5vbignbG9hZCcsICgpPT4ge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcHJpbnRXbmQucHJpbnQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMucmVuZGVyQ29udGVudCgpLlxyXG4gICAgICAgIHRoZW4oKGNvbnRlbnQpPT4ge1xyXG4gICAgICAgICAgY29uc3QgcHJpbnRXbmQgPSB0aGlzLnduZC5vcGVuKCksXHJcbiAgICAgICAgICBwcmludERvYyA9IHByaW50V25kLmRvY3VtZW50LFxyXG4gICAgICAgICAgaHRtbCA9IGBcclxuICAgICAgICAgICAgPCFET0NUWVBFIGh0bWw+XHJcbiAgICAgICAgICAgIDxodG1sPlxyXG4gICAgICAgICAgICAgIDxoZWFkPlxyXG4gICAgICAgICAgICAgICAgPG1ldGEgY2hhcnNldD1cInV0Zi04XCI+XHJcbiAgICAgICAgICAgICAgICA8dGl0bGU+M0QgRmxpcEJvb2sgLSBQcmludGluZzwvdGl0bGU+XHJcbiAgICAgICAgICAgICAgICAke2NvbnRlbnQuaGVhZH1cclxuICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxyXG4gICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwcmludERvY3VtZW50KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5wcmludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChwcmludERvY3VtZW50LCAxMDApO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICA8L3NjcmlwdD5cclxuICAgICAgICAgICAgICA8L2hlYWQ+XHJcbiAgICAgICAgICAgICAgPGJvZHkgb25sb2FkPVwiaW5pdCgpXCI+XHJcbiAgICAgICAgICAgICAgICAke2NvbnRlbnQuYm9keX1cclxuICAgICAgICAgICAgICA8L2JvZHk+XHJcbiAgICAgICAgICAgIDwvaHRtbD5cclxuICAgICAgICAgIGAuZmIzZFFGaWx0ZXIoKTtcclxuICAgICAgICAgIHByaW50RG9jLm9wZW4oKTtcclxuICAgICAgICAgIHByaW50RG9jLndyaXRlKGh0bWwpO1xyXG4gICAgICAgICAgcHJpbnREb2MuY2xvc2UoKTtcclxuICAgICAgICB9KS5cclxuICAgICAgICBjYXRjaCgoZSk9PiBjb25zb2xlLndhcm4oJzNEIEZsaXBCb29rIC0gUHJpbnRpbmcgd2FzIGNhbmNlbGVkJykpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJvZ3Jlc3Modikge1xyXG4gICAgaWYodGhpcy5jYW5jZWxlZCkge1xyXG4gICAgICB0aHJvdyAnQ2FuY2VsIFByaW50aW5nJztcclxuICAgIH1cclxuICAgIGlmKHRoaXMub25Qcm9ncmVzcykge1xyXG4gICAgICB0aGlzLm9uUHJvZ3Jlc3MoTWF0aC5mbG9vcih2KjEwMCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ29udGVudCgpIHtcclxuICAgIGNvbnN0IHBhZ2VzID0gdGhpcy5ib29rLmdldFBhZ2VzKCksIGhlYWQgPSBuZXcgU2V0KCksIGJvZHkgPSBbXTtcclxuICAgIGxldCBkb25lID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICBmb3IobGV0IHBhZ2U9MDsgcGFnZTxwYWdlczsgKytwYWdlKSB7XHJcbiAgICAgIGNvbnN0IGluZm8gPSB0aGlzLnBhZ2VDYWxsYmFjayhwYWdlKTtcclxuICAgICAgaWYoaW5mby50eXBlPT09J2ltYWdlJykge1xyXG4gICAgICAgIGRvbmUgPSBkb25lLnRoZW4oKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnByb2dyZXNzKHBhZ2UvcGFnZXMpO1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVySW1hZ2UoaGVhZCwgYm9keSwgaW5mby5zcmMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYoaW5mby50eXBlPT09J2h0bWwnKSB7XHJcbiAgICAgICAgZG9uZSA9IGRvbmUudGhlbigoKT0+IHtcclxuICAgICAgICAgIHRoaXMucHJvZ3Jlc3MocGFnZS9wYWdlcyk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJIdG1sKGhlYWQsIGJvZHksIGluZm8uc3JjKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRvbmUudGhlbigoKT0+IHtcclxuICAgICAgdGhpcy5wcm9ncmVzcygxKTtcclxuICAgICAgcmV0dXJuIHtoZWFkOiB0aGlzLnJlbmRlckhlYWQoaGVhZCksIGJvZHk6IGJvZHkuam9pbignXFxuJyl9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB3cmFwKGNvbnRlbnQpIHtcclxuICAgIHJldHVybiBgPGRpdiBjbGFzcz1cImZiM2QtcHJpbnRlci1wYWdlXCI+JHtjb250ZW50fTwvZGl2PmA7XHJcbiAgfVxyXG5cclxuICByZW5kZXJJbWFnZShoZWFkLCBib2R5LCBzcmMpIHtcclxuICAgIGJvZHkucHVzaChCb29rUHJpbnRlci53cmFwKGA8aW1nIHNyYz1cIiR7c3JjfVwiIC8+YCkpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySHRtbChoZWFkLCBib2R5LCBzcmMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcclxuICAgICAgJC5nZXQoc3JjLCAoaHRtbCk9PiB7XHJcbiAgICAgICAgY29uc3QgbGlua3MgPSBodG1sLm1hdGNoKC88bGluay4qPz4vaWcpIHx8IFtdO1xyXG4gICAgICAgIGZvcihsZXQgbGluayBvZiBsaW5rcykge1xyXG4gICAgICAgICAgaWYobGluay5tYXRjaCgvc3R5bGVzaGVldC9pKSkge1xyXG4gICAgICAgICAgICBjb25zdCBocmVmID0gbGluay5tYXRjaCgvaHJlZlxccyo9XFxzKlsnXCJdKC4qKVsnXCJdL2kpO1xyXG4gICAgICAgICAgICBpZihocmVmKSB7XHJcbiAgICAgICAgICAgICAgaGVhZC5hZGQoaHJlZlsxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29udGVudCA9IGh0bWwubWF0Y2goLzxib2R5Lio/PihbXFxTXFxzXSopPFxcL2JvZHk+L2kpO1xyXG4gICAgICAgIGlmKGNvbnRlbnQpIHtcclxuICAgICAgICAgIGJvZHkucHVzaChCb29rUHJpbnRlci53cmFwKGNvbnRlbnRbMV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KS5mYWlsKChlKT0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICByZWplY3QoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcmVuZGVySGVhZChoZWFkKSB7XHJcbiAgICBjb25zdCBjb250ZW50ID0gW107XHJcbiAgICBoZWFkLmZvckVhY2goKGspPT4gY29udGVudC5wdXNoKGA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIiR7a31cIj5gKSk7XHJcbiAgICBjb250ZW50LnB1c2godGhpcy5zdHlsZVNoZWV0PyBgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCIke3RoaXMuc3R5bGVTaGVldH1cIj5gOiBCb29rUHJpbnRlci5kZWZhdWx0U3R5bGVTaGVldCgpKTtcclxuICAgIHJldHVybiBjb250ZW50LmpvaW4oJ1xcbicpO1xyXG4gIH1cclxuXHJcbiAgdXNlSUZyYW1lKCkge1xyXG4gICAgY29uc3QgaXNDaHJvbWl1bSA9IHRoaXMud25kLmNocm9tZSxcclxuICAgICAgd2luTmF2ID0gdGhpcy53bmQubmF2aWdhdG9yLFxyXG4gICAgICB2ZW5kb3JOYW1lID0gd2luTmF2LnZlbmRvcixcclxuICAgICAgaXNJRWVkZ2UgPSB3aW5OYXYudXNlckFnZW50LmluZGV4T2YoXCJFZGdlXCIpPi0xLFxyXG4gICAgICBpc0lPU0Nocm9tZSA9IHdpbk5hdi51c2VyQWdlbnQubWF0Y2goXCJDcmlPU1wiKTtcclxuICAgIGxldCB1c2U7XHJcbiAgICBpZihpc0lPU0Nocm9tZSl7XHJcbiAgICAgIHVzZSA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYoaXNDaHJvbWl1bSAmJiB2ZW5kb3JOYW1lPT09J0dvb2dsZSBJbmMuJyAmJiAhaXNJRWVkZ2UpIHtcclxuICAgICAgdXNlID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHVzZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0U3R5bGVTaGVldCgpIHtcclxuICAgIHJldHVybiBgXHJcbiAgICAgIDxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj5cclxuICAgICAgICBib2R5IHtcclxuICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5mYjNkLXByaW50ZXItcGFnZSB7XHJcbiAgICAgICAgICBwYWdlLWJyZWFrLWFmdGVyOiBhbHdheXM7XHJcbiAgICAgICAgfVxyXG4gICAgICA8L3N0eWxlPlxyXG4gICAgYC5mYjNkUUZpbHRlcigpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Cb29rUHJpbnRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBWaWV3IGZyb20gJ1ZpZXcnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9va1ZpZXcgZXh0ZW5kcyBWaWV3IHtcclxuXHJcbiAgc3RhdGljIFBBR0VfSEFORExFUl9ERUxBWSA9IDEwMDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgb25Mb2FkLCB0ZW1wbGF0ZSwgaGFuZGxlcikge1xyXG4gICAgc3VwZXIoY29udGFpbmVyLCBvbkxvYWQsIHRlbXBsYXRlLCBoYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIGluaXRWaWV3KCkge1xyXG4gICAgdGhpcy52aWV3ID0gdGhpcy5jb250YWluZXIuZmluZCgnLnZpZXcnKTtcclxuICAgIHRoaXMuYm9va21hcmtzVmlldyA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy53aWRCb29rbWFya3MnKTtcclxuICAgIHRoaXMudGh1bWJuYWlsc1ZpZXcgPSB0aGlzLmNvbnRhaW5lci5maW5kKCcud2lkVGh1bWJuYWlscycpO1xyXG4gICAgdGhpcy5zZWFyY2hWaWV3ID0gdGhpcy5jb250YWluZXIuZmluZCgnLndpZFNlYXJjaCcpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SGFuZGxlcnMoaWQpIHtcclxuICAgIGxldCBoYW5kbGVycztcclxuICAgIGlmKGlkPT09J2lucFBhZ2UnKSB7XHJcbiAgICAgIGhhbmRsZXJzID0gW3tcclxuICAgICAgICBpbnBQYWdlOiAoZSwgZGF0YSk9PiB0aGlzLmNhbGxMYXRlcihzdXBlci5nZXRIYW5kbGVycyhpZCksIGlkLCBlLCBkYXRhLCBCb29rVmlldy5QQUdFX0hBTkRMRVJfREVMQVkpXHJcbiAgICAgIH1dO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGhhbmRsZXJzID0gc3VwZXIuZ2V0SGFuZGxlcnMoaWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhhbmRsZXJzO1xyXG4gIH1cclxuXHJcbiAgb25JdGVtU3RhdGVDaGFuZ2VkKGlkLCBzdGF0ZSkge1xyXG4gICAgaWYoaWQ9PT0nY21kRnVsbFNjcmVlbicpIHtcclxuICAgICAgaWYoc3RhdGUuYWN0aXZlKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnRDb250YWluZXIuYWRkQ2xhc3MoJ2Z1bGxzY3JlZW4nKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLnBhcmVudENvbnRhaW5lci5yZW1vdmVDbGFzcygnZnVsbHNjcmVlbicpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRWaWV3KCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmlldztcclxuICB9XHJcblxyXG4gIGdldEJvb2ttYXJrc1ZpZXcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ib29rbWFya3NWaWV3O1xyXG4gIH1cclxuXHJcbiAgZ2V0VGh1bWJuYWlsc1ZpZXcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy50aHVtYm5haWxzVmlldztcclxuICB9XHJcblxyXG4gIGdldFNlYXJjaFZpZXcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hWaWV3O1xyXG4gIH1cclxuXHJcbiAgZ2V0Rm9ybXMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGdldExpbmtzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ2NtZFpvb21JbicsXHJcbiAgICAgICdjbWRab29tT3V0JyxcclxuICAgICAgJ2NtZERlZmF1bHRab29tJyxcclxuICAgICAgJ2NtZFRvYycsXHJcbiAgICAgICdjbWRGYXN0QmFja3dhcmQnLFxyXG4gICAgICAnY21kQmFja3dhcmQnLFxyXG4gICAgICAnY21kQmlnQmFja3dhcmQnLFxyXG4gICAgICAnY21kRm9yd2FyZCcsXHJcbiAgICAgICdjbWRCaWdGb3J3YXJkJyxcclxuICAgICAgJ2NtZEZhc3RGb3J3YXJkJyxcclxuICAgICAgJ2NtZFNhdmUnLFxyXG4gICAgICAnY21kUHJpbnQnLFxyXG4gICAgICAnY21kRnVsbFNjcmVlbicsXHJcbiAgICAgICdjbWRTbWFydFBhbicsXHJcbiAgICAgICdjbWRTaW5nbGVQYWdlJyxcclxuICAgICAgJ2NtZFNvdW5kcycsXHJcbiAgICAgICdjbWRTdGF0cycsXHJcbiAgICAgICdjbWRTaGFyZScsXHJcbiAgICAgICdjbWRMaWdodGluZ1VwJyxcclxuICAgICAgJ2NtZExpZ2h0aW5nRG93bicsXHJcbiAgICAgICdjbWRDbG9zZVRvYycsXHJcbiAgICAgICdjbWRDbG9zZVNoYXJlJyxcclxuICAgICAgJ2NtZEJvb2ttYXJrcycsXHJcbiAgICAgICdjbWRTZWFyY2gnLFxyXG4gICAgICAnY21kVGh1bWJuYWlscycsXHJcbiAgICAgICdjbWRQZW5kaW5nUGxheScsXHJcbiAgICAgICdjbWRGYWNlYm9vaycsXHJcbiAgICAgICdjbWRUd2l0dGVyJyxcclxuICAgICAgJ2NtZEVtYWlsJ1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGdldFdpZGdldHMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAnd2lkTG9hZGluZ1Byb2dyZXNzJyxcclxuICAgICAgJ3dpZFVzZXJNZXNzYWdlJyxcclxuICAgICAgJ3dpZEZsb2F0V25kJyxcclxuICAgICAgJ3dpZFNoYXJlJyxcclxuICAgICAgJ3dpZFRvY01lbnUnLFxyXG4gICAgICAnd2lkQm9va21hcmtzJyxcclxuICAgICAgJ3dpZFRodW1ibmFpbHMnLFxyXG4gICAgICAnd2lkU2VhcmNoJyxcclxuICAgICAgJ3dpZENvbnRyb2xzJyxcclxuICAgICAgJ3dpZFNldHRpbmdzJyxcclxuICAgICAgJ3dpZExvYWRpbmcnLFxyXG4gICAgICAnd2lkUGVuZGluZ1BsYXknXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5wdXRzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgJ2lucFBhZ2UnLFxyXG4gICAgICAnaW5wUGFnZXMnXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGV4dHMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAndHh0TG9hZGluZ1Byb2dyZXNzJyxcclxuICAgICAgJ3R4dFVzZXJNZXNzYWdlJyxcclxuICAgICAgJ3R4dFNoYXJlTGluaydcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXRUZW1wbGF0ZSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGh0bWw6ICd0ZW1wbGF0ZXMvZGVmYXVsdC1ib29rLXZpZXcuaHRtbCcsXHJcbiAgICAgIHN0eWxlczogW1xyXG4gICAgICAgICdjc3MvYmxhY2stYm9vay12aWV3LmNzcydcclxuICAgICAgXSxcclxuICAgICAgbGlua3M6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICByZWw6ICdzdHlsZXNoZWV0JyxcclxuICAgICAgICAgIGhyZWY6ICdjc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MnXHJcbiAgICAgICAgfVxyXG4gICAgICBdLFxyXG4gICAgICBzY3JpcHQ6ICdqcy9kZWZhdWx0LWJvb2stdmlldy5qcydcclxuICAgIH07XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL0Jvb2tWaWV3LmpzIiwiaW1wb3J0IEJvb2tQcm9wc0J1aWxkZXIgZnJvbSAnLi9Cb29rUHJvcHNCdWlsZGVyJztcclxuaW1wb3J0IEltYWdlRmFjdG9yeSBmcm9tICdJbWFnZUZhY3RvcnknO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xiQm9va1Byb3BzQnVpbGRlciBleHRlbmRzIEJvb2tQcm9wc0J1aWxkZXIge1xyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHBhZ2VDYWxsYmFjaywgcGFnZXMsIG9uUmVhZHksIHN0eWxlKSB7XHJcbiAgICBzdXBlcihvblJlYWR5LCBzdHlsZSk7XHJcbiAgICB0aGlzLmNhbGNTaGVldHMocGFnZXMpO1xyXG4gICAgdGhpcy5wYWdlcyA9IHBhZ2VzO1xyXG4gICAgdGhpcy5wYWdlQ2FsbGJhY2sgPSBwYWdlQ2FsbGJhY2s7XHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBwYWdlQ2FsbGJhY2s6IHBhZ2VDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgdGhpcy5pbWFnZUZhY3RvcnkgPSBuZXcgSW1hZ2VGYWN0b3J5KGNvbnRleHQpO1xyXG5cclxuICAgIGlmKHBhZ2VzPjApIHtcclxuICAgICAgY29uc3QgdGVzdCA9IHRoaXMuaW1hZ2VGYWN0b3J5LmJ1aWxkKHBhZ2VDYWxsYmFjaygwKSwgMCwgdGhpcy5kZWZhdWx0cy5zaGVldC53aWR0aFRleGVscywgdGhpcy5kZWZhdWx0cy5zaGVldC5oZWlnaHRUZXhlbHMsIHRoaXMuZGVmYXVsdHMuc2hlZXQuY29sb3IpO1xyXG4gICAgICB0ZXN0Lm9uTG9hZCA9ICgpPT4ge1xyXG4gICAgICAgIHRoaXMuY2FsY1Byb3BzKHRlc3Qud2lkdGgsIHRlc3QuaGVpZ2h0KTtcclxuICAgICAgICB0ZXN0LmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnJlYWR5KCk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcyA9IHRoaXMuZGVmYXVsdHM7XHJcbiAgICAgIHRoaXMucmVhZHkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvQ2xiQm9va1Byb3BzQnVpbGRlci5qcyIsImltcG9ydCBTaGVldEJsb2NrIGZyb20gJy4vU2hlZXRCbG9jayc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3ZlciBleHRlbmRzIFNoZWV0QmxvY2sge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIHAsIGFuZ2xlLCBzdGF0ZSkge1xyXG4gICAgc3VwZXIodmlzdWFsLCBwLCAwLCAxLCBhbmdsZSwgc3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UHJvcHMoKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi50aGlzLnAuY292ZXIsXHJcbiAgICAgIHNoZWV0czogMVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGxvYWRQb2ludHMoKSB7XHJcbiAgICBjb25zdCBvcGVuZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAgWzIsMyw0XSxcclxuICAgICAgWzIsMyw0LDUsNl1cclxuICAgIF0sXHJcbiAgICBjbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlcyA9IFtcclxuICAgICAgWzAsMSwyXSxcclxuICAgICAgWzAsMSwyXVxyXG4gICAgXSxcclxuICAgIGludGVycG9sYXRpb25Qb2ludHMgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB4OiBbXHJcbiAgICAgICAgICAgICBbMCwwLjI4NzcsMC42MzQ3LDAuODE3NCwxLjAwMDBdLFxyXG4gICAgICAgICAgICAgWzAsMC4yODMxLDAuNjI1NiwwLjgwODIsMC45OTA5XSxcclxuICAgICAgICAgICAgIFswLDAuMjYwMywwLjU5MzYsMC43NzYzLDAuOTU4OV0sXHJcbiAgICAgICAgICAgICBbMCwwLjEzNzAsMC4zODgxLDAuNTM0MiwwLjY3NThdLFxyXG4gICAgICAgICAgICAgWzAsMCwwLDAsMF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgICAgWzAsMC4wMiwwLjAwNSwtMC4wMDEsLTAuMDAyNV0sXHJcbiAgICAgICAgICAgICBbMCwwLjA0LDAuMDEsLTAuMDAyLC0wLjAwNV0sXHJcbiAgICAgICAgICAgICBbMCwgMC4yNDY2LCAwLjQ3OTUsIDAuNTcwOCwgMC42NzU4XSxcclxuICAgICAgICAgICAgIFswLCAwLjI4NzcsIDAuNjM0NywgMC44MTc0LCAxLjAwMDBdXHJcbiAgICAgICAgXVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgeDogW1xyXG4gICAgICAgICAgICAgWzAsMC4yODc3LDAuNjM0NywwLjgxNzQsMS4wMDAwXSxcclxuICAgICAgICAgICAgIFswLDAuMjgzMSwwLjYyNTYsMC44MDgyLDAuOTkwOV0sXHJcbiAgICAgICAgICAgICBbMCwwLjI2MDMsMC41OTM2LDAuNzc2MywwLjk1ODldLFxyXG4gICAgICAgICAgICAgWzAuMDAwLDAuMjMzLDAuNTYzLDAuNzQ2LDAuOTI3XSxcclxuICAgICAgICAgICAgIFswLjAwMCwwLjE0NCwwLjQzMywwLjYxMywwLjc5Nl0sXHJcbiAgICAgICAgICAgICBbMC4wMDAsMC4wNzAsMC4yODgsMC40NTUsMC42MjZdLFxyXG4gICAgICAgICAgICAgWzAsMCwwLDAsMF1cclxuICAgICAgICBdLFxyXG4gICAgICAgIHk6IFtcclxuICAgICAgICAgICAgIFswLDAsMCwwLDBdLFxyXG4gICAgICAgICAgICAgWzAsMC4wMiwwLjAwNSwtMC4wMDEsLTAuMDAyNV0sXHJcbiAgICAgICAgICAgICBbMCwwLjA0LDAuMDEsLTAuMDAyLC0wLjAwNV0sXHJcbiAgICAgICAgICAgICBbMC4wMDAsMC4xNjgsMC4yNjksMC4yNzAsMC4yNTVdLFxyXG4gICAgICAgICAgICAgWzAuMDAwLDAuMjQ1LDAuNDM1LDAuNDU4LDAuNDYwXSxcclxuICAgICAgICAgICAgIFswLjAwMCwwLjI3OCwwLjU0NCwwLjYxNCwwLjY3M10sXHJcbiAgICAgICAgICAgICBbMCwgMC4yODc3LCAwLjYzNDcsIDAuODE3NCwgMS4wMDAwXVxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgXTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGludGVycG9sYXRpb25Qb2ludHMsXHJcbiAgICAgIG9wZW5lZEludGVycG9sYXRpb25JbmRlY2VzLFxyXG4gICAgICBjbG9zZWRJbnRlcnBvbGF0aW9uSW5kZWNlc1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Db3Zlci5qcyIsImltcG9ydCBTaGVldENzc0xheWVyIGZyb20gJy4vU2hlZXRDc3NMYXllcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDc3NMYXllcnNNYW5hZ2VyIHtcclxuICBjb25zdHJ1Y3Rvcihib29rKSB7XHJcbiAgICB0aGlzLmJvb2sgPSBib29rO1xyXG4gICAgdGhpcy5wcm9wcyA9IGJvb2sucC5jc3NMYXllclByb3BzO1xyXG4gICAgdGhpcy52aXN1YWwgPSBib29rLnZpc3VhbDtcclxuICAgIHRoaXMucGFnZU1hbmFnZXIgPSBib29rLnBhZ2VNYW5hZ2VyO1xyXG4gICAgdGhpcy53cmFwcGVycyA9IHt9O1xyXG4gICAgdGhpcy5wZW5kaW5ncyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWN0aXZlcygpIHtcclxuICAgIGxldCBwYWdlID0gdGhpcy5ib29rLmdldFBhZ2UoKSwgcGFnZXMgPSB0aGlzLmJvb2suZ2V0Qm9va1BhZ2VzKCksIGFjcyA9IHBhZ2U9PT0wIHx8IHBhZ2U9PT1wYWdlcy0xPyBbcGFnZV06IFtwYWdlLCBwYWdlKzFdO1xyXG4gICAgaWYoIXRoaXMud3JhcHBlcnNbMF0gJiYgcGFnZSE9PTApIHtcclxuICAgICAgYWNzID0gWzAsIC4uLmFjc107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWNzO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGZvcihsZXQgdyBvZiBPYmplY3QudmFsdWVzKHRoaXMud3JhcHBlcnMpKSB7XHJcbiAgICAgIHcubGF5ZXJzLmZvckVhY2goKGwpPT4gbC5kaXNwb3NlKCkpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMud3JhcHBlcnM7XHJcbiAgfVxyXG5cclxuICBzaG93KCkge1xyXG4gICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcclxuICAgIGZvcihsZXQgbiBvZiB0aGlzLmdldEFjdGl2ZXMoKSkge1xyXG4gICAgICBjb25zdCB3ID0gdGhpcy53cmFwcGVyc1tuXTtcclxuICAgICAgaWYodykge1xyXG4gICAgICAgIGlmKHcuc3RhdGU9PT0ncmVhZHknICYmIHcubGF5ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLmJvb2suZ2V0QmxvY2tCeVBhZ2Uobik7XHJcbiAgICAgICAgICB3LmxheWVycy5mb3JFYWNoKChsKT0+IHtcclxuICAgICAgICAgICAgaWYobC5pc0hpZGRlbigpKSB7XHJcbiAgICAgICAgICAgICAgbC51cGRhdGUoYmxvY2spO1xyXG4gICAgICAgICAgICAgIGwuc2hvdygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdyA9IHRoaXMud3JhcHBlcnNbbl0gPSB7XHJcbiAgICAgICAgICBzdGF0ZTogJ2xvYWRpbmcnLFxyXG4gICAgICAgICAgbGF5ZXJzOiBbXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgICAgIHRoaXMucGFnZU1hbmFnZXIuZ2V0TGF5ZXJzKG4sIChsYXllcnMpPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmaW5pc2ggPSAoKT0+IHtcclxuICAgICAgICAgICAgICBpZihsYXllcnMubGVuZ3RoICYmIHRoaXMud3JhcHBlcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5ib29rLmdldEJsb2NrQnlQYWdlKG4pO1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBsIG9mIGxheWVycykge1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBzbCA9IG5ldyBTaGVldENzc0xheWVyKHRoaXMudmlzdWFsLCBibG9jaywgey4uLnRoaXMucHJvcHMsIHBhZ2VOdW1iZXI6IG59KTtcclxuICAgICAgICAgICAgICAgICAgdy5sYXllcnMucHVzaChzbCk7XHJcbiAgICAgICAgICAgICAgICAgIHNsLnNldChsLmNzcywgbC5odG1sLCBsLmpzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLmhpZGRlbiAmJiB+dGhpcy5nZXRBY3RpdmVzKCkuaW5kZXhPZihuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHcubGF5ZXJzLmZvckVhY2goKGwpPT4gbC5zaG93KCkpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHcuc3RhdGUgPSAncmVhZHknO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZih0aGlzLndyYXBwZXJzICYmIChuPT09MCB8fCB0aGlzLndyYXBwZXJzWzBdLnN0YXRlIT09J2xvYWRpbmcnKSkge1xyXG4gICAgICAgICAgICAgIGZpbmlzaCgpO1xyXG4gICAgICAgICAgICAgIGlmKG49PT0wKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGYgb2YgdGhpcy5wZW5kaW5ncykge1xyXG4gICAgICAgICAgICAgICAgICBmKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdzID0gW107XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMucGVuZGluZ3MucHVzaChmaW5pc2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBoaWRlKCkge1xyXG4gICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xyXG4gICAgY29uc3Qgd2FpdCA9IFtdO1xyXG4gICAgZm9yKGxldCB3IG9mIE9iamVjdC52YWx1ZXModGhpcy53cmFwcGVycykpIHtcclxuICAgICAgdy5sYXllcnMuZm9yRWFjaCgobCk9PiB3YWl0LnB1c2gobC5oaWRlKCkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLmFsbCh3YWl0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Dc3NMYXllcnNNYW5hZ2VyLmpzIiwiaW1wb3J0IHskLCBUSFJFRX0gZnJvbSAnLi4vbGlicydcclxuaW1wb3J0IENhY2hlIGZyb20gJ0NhY2hlJztcclxuaW1wb3J0IExvYWRpbmdBbmltYXRpb24gZnJvbSAnTG9hZGluZ0FuaW1hdGlvbic7XHJcbmltcG9ydCBJbWFnZUZhY3RvcnkgZnJvbSAnSW1hZ2VGYWN0b3J5JztcclxuaW1wb3J0IFRleHR1cmVBbmltYXRvciBmcm9tICdUZXh0dXJlQW5pbWF0b3InO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICdHcmFwaFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VNYW5hZ2VyIHtcclxuXHJcbiAgY29uc3RydWN0b3IodmlzdWFsLCBib29rLCBwKSB7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbDtcclxuICAgIHRoaXMuYm9vayA9IGJvb2s7XHJcbiAgICB0aGlzLnBhZ2VRdWVyeSA9ICcnO1xyXG4gICAgdGhpcy5wID0gcDtcclxuICAgIHRoaXMucGFnZUNhY2hlID0gbmV3IENhY2hlKHAuY2FjaGVkUGFnZXMpO1xyXG4gICAgdGhpcy5yZXNvdXJjZXNDYWNoZSA9IG5ldyBDYWNoZSgpO1xyXG5cclxuICAgIHRoaXMuY2FudmFzZXMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPDEwOyArK2kpIHtcclxuICAgICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKCk7XHJcbiAgICAgIHRoaXMuY2FudmFzZXMucHVzaCh7YywgY3R4OiBjLmdldENvbnRleHQoJzJkJyl9KTtcclxuICAgIH1cclxuICAgIHRoaXMubmV4dENhbnZhcyA9IDA7XHJcblxyXG4gICAgdGhpcy5pbWFnZUZhY3RvcnkgPSBuZXcgSW1hZ2VGYWN0b3J5KHsuLi52aXN1YWwsIGRpc3BhdGNoRXZlbnQ6IGJvb2suZGlzcGF0Y2hFdmVudC5iaW5kKGJvb2spLCByZW5kZXJDYW52YXM6IHRoaXMuY2FudmFzZXNbMF0uYywgcmVuZGVyQ2FudmFzQ3R4OiB0aGlzLmNhbnZhc2VzWzBdLmN0eH0sIHRoaXMucmVzb3VyY2VzQ2FjaGUpO1xyXG5cclxuICAgIHRoaXMubG9hZGluZ3MgPSBbXTtcclxuICAgIHRoaXMucmVuZGVyUXVldWUgPSBbXTtcclxuICAgIHRoaXMucHJlZGljdGVkUmVxdWVzdHMgPSBbXTtcclxuXHJcbiAgICB0aGlzLnRtcE1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCk7XHJcbiAgICB2aXN1YWwuYWRkT2JqZWN0KG5ldyBUSFJFRS5NZXNoKG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDFlLTMsIDFlLTMpLCB0aGlzLnRtcE1hdGVyaWFsKSk7XHJcblxyXG4gICAgdGhpcy5sb2FkaW5nQW5pbWF0aW9uID0gdHJ1ZTtcclxuICAgIHRoaXMubG9hZGluZyA9IHt9O1xyXG4gICAgdGhpcy5sb2FkaW5nW3AuY292ZXIuY29sb3JdID0gdGhpcy5jcmVhdGVMb2FkaW5nVGV4dHVyZShwLmNvdmVyKTtcclxuICAgIGlmKHAucGFnZS5jb2xvciE9PXAuY292ZXIuY29sb3IpIHtcclxuICAgICAgdGhpcy5sb2FkaW5nW3AucGFnZS5jb2xvcl0gPSB0aGlzLmNyZWF0ZUxvYWRpbmdUZXh0dXJlKHAucGFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ib29rLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyQW5pbWF0aW9uJywgdGhpcy5sb2FkUHJlZGljdGVkUGFnZXMuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgdGhpcy50dXJuT25FdmVudHMoKTtcclxuXHJcbiAgICB2aXN1YWwuYWRkUmVuZGVyQ2FsbGJhY2sodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbih0aGlzLnVwZGF0ZVJlbmRlclF1ZXVlLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlTG9hZGluZ1RleHR1cmUocCkge1xyXG4gICAgY29uc3Qgc3ByaXRlVGlsZXMgPSA2LCBoZWlnaHRUZXhlbHMgPSBwLmhlaWdodC9wLndpZHRoKnAud2lkdGhUZXhlbHMsXHJcbiAgICAgIHNjYWxlID0gTWF0aC5zcXJ0KDQuNSoyMTAqNC41KjI5Ny8ocC53aWR0aFRleGVscypoZWlnaHRUZXhlbHMpKSxcclxuICAgICAgYW5pbWF0aW9uID0gbmV3IExvYWRpbmdBbmltYXRpb24oc2NhbGUqcC53aWR0aFRleGVscywgc2NhbGUqaGVpZ2h0VGV4ZWxzLCBwLmNvbG9yKSxcclxuICAgICAgYW5pbWF0b3IgPSBuZXcgVGV4dHVyZUFuaW1hdG9yKGFuaW1hdGlvbi5jcmVhdGVTcHJpdGUoc3ByaXRlVGlsZXMpLCBzcHJpdGVUaWxlcywgMSwgc3ByaXRlVGlsZXMsIDAuMik7XHJcbiAgICBhbmltYXRpb24uZGlzcG9zZSgpO1xyXG4gICAgcmV0dXJuIGFuaW1hdG9yO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMudHVybk9mZkV2ZW50cygpO1xyXG4gICAgZm9yKGxldCBjb2xvciBvZiBPYmplY3Qua2V5cyh0aGlzLmxvYWRpbmcpKSB7XHJcbiAgICAgIHRoaXMubG9hZGluZ1tjb2xvcl0uZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMubG9hZGluZztcclxuICAgIHRoaXMucmVzb3VyY2VzQ2FjaGUuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5wYWdlQ2FjaGUuZGlzcG9zZSgpO1xyXG4gICAgZm9yKGxldCBvIG9mIHRoaXMuY2FudmFzZXMpIHtcclxuICAgICAgby5jLmhlaWdodCA9IG8uYy53aWR0aCA9IDA7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgdGhpcy5jYW52YXNlcztcclxuICB9XHJcblxyXG4gIGlzQ292ZXIobikge1xyXG4gICAgcmV0dXJuIG48MiB8fCBuPj0yKih0aGlzLnAuc2hlZXRzKzEpO1xyXG4gIH1cclxuXHJcbiAgaXNNb2JpbGUoKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZpc3VhbC5pc01vYmlsZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFnZVN0YXRlKG4pIHtcclxuICAgIGNvbnN0IG9iamVjdCA9IHRoaXMucGFnZUNhY2hlLmdldChuKTtcclxuICAgIHJldHVybiBvYmplY3Q/IG9iamVjdC5zdGF0ZTogdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlTG9hZGluZ0FuaW1hdGlvbihlbmFibGUpIHtcclxuICAgIHRoaXMubG9hZGluZ0FuaW1hdGlvbiA9IGVuYWJsZTtcclxuICAgIGZvcihsZXQgbyBvZiB0aGlzLmxvYWRpbmdzKSB7XHJcbiAgICAgIHRoaXMuc2V0dXBNYXRlcmlhbChvKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdCkge1xyXG4gICAgaWYodGhpcy5sb2FkaW5nQW5pbWF0aW9uKSB7XHJcbiAgICAgIGNvbnN0IGxvYWRpbmcgPSB7fTtcclxuICAgICAgZm9yKGxldCBvIG9mIHRoaXMubG9hZGluZ3MpIHtcclxuICAgICAgICBpZihvLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgIGxvYWRpbmdbby5jb2xvcl0gPSB0cnVlOztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZm9yKGxldCBjb2xvciBvZiBPYmplY3Qua2V5cyhsb2FkaW5nKSkge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1tjb2xvcl0udXBkYXRlKGR0KTtcclxuICAgICAgICB0aGlzLmJvb2sudXBkYXRlVGhyZWUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlRnJvbUxvYWRpbmdzKG8pIHtcclxuICAgIGNvbnN0IGkgPSB0aGlzLmxvYWRpbmdzLmluZGV4T2Yobyk7XHJcbiAgICBpZih+aSkge1xyXG4gICAgICB0aGlzLmxvYWRpbmdzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZUZyb21SZW5kZXJRdWV1ZShvKSB7XHJcbiAgICBjb25zdCBpID0gdGhpcy5yZW5kZXJRdWV1ZS5pbmRleE9mKG8pO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgdGhpcy5yZW5kZXJRdWV1ZS5zcGxpY2UoaSwgMSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWZyZXNoUGFnZVF1ZXJ5KG4sIHF1ZXJ5PScnKSB7XHJcbiAgICB0aGlzLnBhZ2VRdWVyeSA9IHF1ZXJ5O1xyXG4gICAgY29uc3Qgb2JqZWN0ID0gdGhpcy5wYWdlQ2FjaGUuZ2V0KG4pO1xyXG4gICAgaWYob2JqZWN0ICYmIG9iamVjdC53cmFwcGVyICYmIG9iamVjdC53cmFwcGVyLnNldFF1ZXJ5KSB7XHJcbiAgICAgIGlmKCF0aGlzLnBhZ2VDYWNoZS5yZW1vdmUobikpIHtcclxuICAgICAgICBvYmplY3Qud3JhcHBlci5zZXRRdWVyeShxdWVyeSk7XHJcbiAgICAgICAgdGhpcy5wdXNoSW5SZW5kZXJRdWV1ZShvYmplY3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWZyZXNoWm9vbSgpIHtcclxuICAgIGlmKHRoaXMucC5hdXRvUmVzb2x1dGlvbi5lbmFibGUpIHtcclxuICAgICAgY29uc3QgZXMgPSBbXTtcclxuICAgICAgdGhpcy5wYWdlQ2FjaGUuZm9yRWFjaCgoZSk9PiB7XHJcbiAgICAgICAgZXMucHVzaChlKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGVzLmZvckVhY2goKGUpPT4ge1xyXG4gICAgICAgIGNvbnN0IG9iamVjdCA9IGVbMV07XHJcbiAgICAgICAgaWYob2JqZWN0ICYmIG9iamVjdC53cmFwcGVyKSB7XHJcbiAgICAgICAgICBpZighdGhpcy5wYWdlQ2FjaGUucmVtb3ZlKGVbMF0pKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHVzaEluUmVuZGVyUXVldWUob2JqZWN0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0TGF5ZXJzKG4sIGNsYikge1xyXG4gICAgaWYodGhpcy5wLmNzc0xheWVyc0xvYWRlcikge1xyXG4gICAgICB0aGlzLnAuY3NzTGF5ZXJzTG9hZGVyKG4sICguLi5hcmdzKT0+IHtcclxuICAgICAgICBjb25zdCBvYmplY3QgPSB0aGlzLnBhZ2VDYWNoZS5nZXQobik7XHJcbiAgICAgICAgaWYob2JqZWN0KSB7XHJcbiAgICAgICAgICBpZihvYmplY3Quc3RhdGUhPT0nYWN0aXZlJykge1xyXG4gICAgICAgICAgICBvYmplY3QucGVuZGluZ3MucHVzaCh7Y2xiLCBhcmdzfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2xiKC4uLmFyZ3MpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY2xiKFtdKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlc29sdmVQZW5kaW5ncyhwZW5kaW5ncykge1xyXG4gICAgZm9yKGxldCBwIG9mIHBlbmRpbmdzKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcC5jbGIoLi4ucC5hcmdzKTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGVuZGluZ3Muc3BsaWNlKDAsIHBlbmRpbmdzLmxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICBydGxQYWdlTihuKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wLnJ0bD8gdGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTEtbjogbjtcclxuICB9XHJcblxyXG4gIGxvYWQobWF0ZXJpYWwsIG4pIHtcclxuICAgIGNvbnN0IHBpID0gdGhpcy5ydGxQYWdlTihuKTx0aGlzLmJvb2suZ2V0UGFnZXMoKT8gdGhpcy5wLnBhZ2VDYWxsYmFjayh0aGlzLnJ0bFBhZ2VOKG4pKToge3R5cGU6ICdibGFuayd9LCBwID0gdGhpcy5pc0NvdmVyKG4pPyB0aGlzLnAuY292ZXI6IHRoaXMucC5wYWdlO1xyXG4gICAgY29uc3QgbyA9IHtcclxuICAgICAgbixcclxuICAgICAgdGV4dHVyZTogbmV3IFRIUkVFLlRleHR1cmUoKSxcclxuICAgICAgd3JhcHBlcjogbnVsbCxcclxuICAgICAgc3RhdGU6ICdsb2FkaW5nJyxcclxuICAgICAgbG9ja2VkOiAobik9PiBvLnN0YXRlID09PSAnbG9hZGluZycgfHwgby5zdGF0ZSA9PT0gJ3JlbmRlcmluZycgfHwgdGhpcy5ib29rLmlzQWN0aXZlUGFnZShuKSxcclxuICAgICAgY29sb3I6IHAuY29sb3IsXHJcbiAgICAgIGlzQWN0aXZlOiAoKT0+IHRoaXMuYm9vay5pc0FjdGl2ZVBhZ2UobiksXHJcbiAgICAgIGlzVG9wOiAoKT0+IH50aGlzLmJvb2suZ2V0VG9wUGFnZXMoKS5pbmRleE9mKG4pLFxyXG4gICAgICBkaXNwb3NlOiAoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbW92ZUZyb21Mb2FkaW5ncyhvKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUZyb21SZW5kZXJRdWV1ZShvKTtcclxuICAgICAgICBpZihvLndyYXBwZXIgJiYgby53cmFwcGVyLmRpc3Bvc2UpIHtcclxuICAgICAgICAgIG8ud3JhcHBlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG8udGV4dHVyZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgZGVsZXRlIG8udGV4dHVyZTtcclxuICAgICAgICBkZWxldGUgby53cmFwcGVyO1xyXG4gICAgICB9LFxyXG4gICAgICBwZW5kaW5nczogW11cclxuICAgIH07XHJcbiAgICBvLnRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xyXG4gICAgdGhpcy5sb2FkaW5ncy5wdXNoKG8pO1xyXG4gICAgdGhpcy5zZXRNYXRlcmlhbChvLCBtYXRlcmlhbCk7XHJcblxyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHtcclxuICAgICAgaWYoby50ZXh0dXJlKSB7XHJcbiAgICAgICAgby53aWR0aFRleGVscyA9IHBpLndpZHRoVGV4ZWxzIHx8IHAud2lkdGhUZXhlbHM7XHJcbiAgICAgICAgby5oZWlnaHRUZXhlbHMgPSBwLmhlaWdodC9wLndpZHRoKnAud2lkdGhUZXhlbHM7XHJcbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5jYWxjUmVzb2x1dGlvbihvKTtcclxuICAgICAgICBvLndyYXBwZXIgPSB0aGlzLmltYWdlRmFjdG9yeS5idWlsZChwaSwgcGkubnVtYmVyPT09dW5kZWZpbmVkPyB0aGlzLnJ0bFBhZ2VOKG4pOiBwaS5udW1iZXIsIHJlcy53aWR0aCwgcmVzLmhlaWdodCwgcC5jb2xvciwgdGhpcy5wLmluamVjdG9yKTtcclxuICAgICAgICBpZihvLndyYXBwZXIuc2V0UXVlcnkpIHtcclxuICAgICAgICAgIG8ud3JhcHBlci5zZXRRdWVyeSh0aGlzLnBhZ2VRdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG8uc2ltdWxhdGUgPSBwaS5pbnRlcmFjdGl2ZT8gKG8ud3JhcHBlci5zaW11bGF0ZSB8fCAoKCk9PiB1bmRlZmluZWQpKS5iaW5kKG8ud3JhcHBlcik6IHVuZGVmaW5lZDtcclxuICAgICAgICBvLndyYXBwZXIub25Mb2FkID0gKCk9PiB7XHJcbiAgICAgICAgICBvLnN0YXRlID0gJ2xvYWRlZCc7XHJcbiAgICAgICAgICB0aGlzLnB1c2hJblJlbmRlclF1ZXVlKG8pO1xyXG4gICAgICAgICAgdGhpcy5ib29rLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgICAgICB0eXBlOiAnbG9hZGVkUGFnZScsXHJcbiAgICAgICAgICAgIHBhZ2U6IG5cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgby53cmFwcGVyLm9uQ2hhbmdlID0gKGltYWdlKT0+IHtcclxuICAgICAgICAgIGlmKG8udGV4dHVyZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21Mb2FkaW5ncyhvKTtcclxuICAgICAgICAgICAgaWYoby5tYXRlcmlhbCkge1xyXG4gICAgICAgICAgICAgIG8ubWF0ZXJpYWwubWFwID0gby50ZXh0dXJlO1xyXG4gICAgICAgICAgICAgIG8ubWF0ZXJpYWwuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoMHhGRkZGRkYpO1xyXG4gICAgICAgICAgICAgIG8ubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG8udGV4dHVyZS5pbWFnZSA9IGltYWdlO1xyXG4gICAgICAgICAgICBvLnRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBvLnRleHR1cmUub25VcGRhdGUgPSAoKT0+IHtcclxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgICAgICAgICAgICBpZihvLnN0YXRlICE9PSAncXVldWVkRm9yUmVuZGVyJykge1xyXG4gICAgICAgICAgICAgICAgICBvLnN0YXRlID0gJ2FjdGl2ZSc7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZVBlbmRpbmdzKG8ucGVuZGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVuZGVyaW5nO1xyXG4gICAgICAgICAgICAgICAgLy90aGlzLnVwZGF0ZVJlbmRlclF1ZXVlKCk7XHJcbiAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy50bXBNYXRlcmlhbC5tYXAgPSBvLnRleHR1cmU7XHJcbiAgICAgICAgICAgIHRoaXMudG1wTWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy5ib29rLmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICB0eXBlOiAnbG9hZFBhZ2UnLFxyXG4gICAgICBwYWdlOiBuXHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLnBhZ2VDYWNoZS5wdXQobiwgbyk7XHJcbiAgfVxyXG5cclxuICBpc1NpbmdsZVBhZ2Uobykge1xyXG4gICAgcmV0dXJuIHRoaXMucC5zaW5nbGVQYWdlIHx8ICFvLm4gfHwgby5uPT09dGhpcy5ib29rLmdldEJvb2tQYWdlcygpLTE7XHJcbiAgfVxyXG5cclxuICBjYWxjUmVzb2x1dGlvbihvKSB7XHJcbiAgICBsZXQgcmVzO1xyXG4gICAgaWYodGhpcy5wLmF1dG9SZXNvbHV0aW9uLmVuYWJsZSkge1xyXG4gICAgICBjb25zdCBrID0gTWF0aC5taW4oKHRoaXMuaXNTaW5nbGVQYWdlKG8pPyAxOiAwLjUpKnRoaXMudmlzdWFsLndpZHRoKCkvby53aWR0aFRleGVscywgdGhpcy52aXN1YWwuaGVpZ2h0KCkvby5oZWlnaHRUZXhlbHMpO1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgd2lkdGg6IHRoaXMucC5hdXRvUmVzb2x1dGlvbi5rKnRoaXMucC56b29tKmsqby53aWR0aFRleGVscyxcclxuICAgICAgICBoZWlnaHQ6IHRoaXMucC5hdXRvUmVzb2x1dGlvbi5rKnRoaXMucC56b29tKmsqby5oZWlnaHRUZXhlbHNcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgd2lkdGg6IG8ud2lkdGhUZXhlbHMsXHJcbiAgICAgICAgaGVpZ2h0OiBvLmhlaWdodFRleGVsc1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHB1c2hJblJlbmRlclF1ZXVlKG8pIHtcclxuICAgIGlmKG8uc3RhdGUhPT0ncXVldWVkRm9yUmVuZGVyJyAmJiBvLnN0YXRlIT09J2xvYWRpbmcnKSB7XHJcbiAgICAgIG8uc3RhdGUgPSAncXVldWVkRm9yUmVuZGVyJztcclxuICAgICAgdGhpcy5yZW5kZXJRdWV1ZS5wdXNoKG8pO1xyXG4gICAgICAvLyB0aGlzLnVwZGF0ZVJlbmRlclF1ZXVlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGVSZW5kZXJRdWV1ZSgpIHtcclxuICAgIGlmKHRoaXMuY2FudmFzZXMpIHtcclxuICAgICAgY29uc3QgcCA9IHRoaXMucDtcclxuICAgICAgaWYoIXRoaXMucmVuZGVyaW5nKSB7XHJcbiAgICAgICAgaWYocC5yZW5kZXJXaGlsZUZsaXBwaW5nIHx8ICF0aGlzLmJvb2suaXNQcm9jZXNzaW5nKCkpIHtcclxuICAgICAgICAgIGxldCBhY3RpdmUsIHRvcDtcclxuICAgICAgICAgIGZvcihsZXQgbyBvZiB0aGlzLnJlbmRlclF1ZXVlKSB7XHJcbiAgICAgICAgICAgIGlmKCFhY3RpdmUgJiYgby5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgYWN0aXZlID0gbztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZihvLmlzVG9wKCkpIHtcclxuICAgICAgICAgICAgICB0b3AgPSBvO1xyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnJlbmRlcmluZyA9IHRvcCB8fCBhY3RpdmU7XHJcblxyXG4gICAgICAgICAgaWYodGhpcy5pc01vYmlsZSgpICYmIHAucmVuZGVySW5hY3RpdmVQYWdlc09uTW9iaWxlIHx8ICF0aGlzLmlzTW9iaWxlKCkgJiYgcC5yZW5kZXJJbmFjdGl2ZVBhZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLnJlbmRlcmluZykge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHVkID0gdGhpcy5ib29rLmdldFVzZXJEaXJlY3Rpb24oKSwgbmVhciA9IHt9O1xyXG4gICAgICAgICAgICAgIGZvcihsZXQgbyBvZiB0aGlzLnJlbmRlclF1ZXVlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHVkLmxhc3RUb3BQYWdlPG8ubjtcclxuICAgICAgICAgICAgICAgIGlmKCFuZWFyW2lkXSB8fCBNYXRoLmFicyhuZWFyW2lkXS5uLXVkLmxhc3RUb3BQYWdlKT5NYXRoLmFicyhvLm4tdWQubGFzdFRvcFBhZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgIG5lYXJbaWRdID0gbztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nID0gbmVhclt1ZC5kaXJlY3Rpb249PT0xXSB8fCBuZWFyW3VkLmRpcmVjdGlvbiE9PTFdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYodGhpcy5yZW5kZXJpbmcpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5yZW5kZXJpbmcud3JhcHBlci5zdGFydFJlbmRlcikge1xyXG4gICAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbVJlbmRlclF1ZXVlKHRoaXMucmVuZGVyaW5nKTtcclxuICAgICAgICAgICAgICB0aGlzLnJlbmRlcmluZy5zdGF0ZSA9ICdyZW5kZXJpbmcnO1xyXG4gICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLmNhbnZhc2VzW3RoaXMubmV4dENhbnZhc107XHJcbiAgICAgICAgICAgICAgdGhpcy5uZXh0Q2FudmFzID0gKHRoaXMubmV4dENhbnZhcysxKSV0aGlzLmNhbnZhc2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgICB0aGlzLnJlbmRlcmluZy53cmFwcGVyLnNldFJlbmRlckNhbnZhcyhvLmMsIG8uY3R4KTtcclxuICAgICAgICAgICAgICB0aGlzLnJlbmRlcmluZy53cmFwcGVyLnNldFJlc29sdXRpb24odGhpcy5jYWxjUmVzb2x1dGlvbih0aGlzLnJlbmRlcmluZykpO1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyaW5nLndyYXBwZXIuc3RhcnRSZW5kZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBkZWxldGUgdGhpcy5yZW5kZXJpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdGhpcy5ib29rLnVwZGF0ZVRocmVlKCk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0VGltZW91dCh0aGlzLnVwZGF0ZVJlbmRlclF1ZXVlLmJpbmQodGhpcyksIDEwMCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0dXJuT25FdmVudHMoKSB7XHJcbiAgICB0aGlzLnRyYW5zZmVyRXZlbnRzID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHR1cm5PZmZFdmVudHMoKSB7XHJcbiAgICBjb25zdCBtb3VzZXVwID0gJC5FdmVudCgnbW91c2V1cCcpLCBtb3VzZW91dCA9ICQuRXZlbnQoJ21vdXNlb3V0Jyk7XHJcbiAgICB0aGlzLnBhZ2VDYWNoZS5mb3JFYWNoKChlbnQpPT4ge1xyXG4gICAgICBjb25zdCBvYmplY3QgPSBlbnRbMV07XHJcbiAgICAgIGlmKG9iamVjdC5zaW11bGF0ZSkge1xyXG4gICAgICAgIG9iamVjdC5zaW11bGF0ZShtb3VzZXVwLCB1bmRlZmluZWQsIDAsIDApO1xyXG4gICAgICAgIG9iamVjdC5zaW11bGF0ZShtb3VzZW91dCwgdW5kZWZpbmVkLCAwLCAwKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnRyYW5zZmVyRXZlbnRzID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICB0cmFuc2ZlckV2ZW50VG9UZXh0dXJlKG4sIGUsIGRhdGEpIHtcclxuICAgIGlmKHRoaXMudHJhbnNmZXJFdmVudHMpIHtcclxuICAgICAgY29uc3QgdG9PYmplY3QgPSB0aGlzLmdldE9yTG9hZFRleHR1cmVPYmplY3QodW5kZWZpbmVkLCBuKTtcclxuICAgICAgaWYodG9PYmplY3Qud3JhcHBlcikge1xyXG4gICAgICAgIGNvbnN0IHt1dn0gPSBkYXRhLCB0b0RvYyA9IHRvT2JqZWN0LndyYXBwZXIuZ2V0U2ltdWxhdGVkRG9jKCk7XHJcbiAgICAgICAgdGhpcy5wYWdlQ2FjaGUuZm9yRWFjaCgoZW50KT0+IHtcclxuICAgICAgICAgIGNvbnN0IG9iamVjdCA9IGVudFsxXTtcclxuICAgICAgICAgIGlmKG9iamVjdC5zaW11bGF0ZSkge1xyXG4gICAgICAgICAgICBvYmplY3Quc2ltdWxhdGUoZSwgdG9Eb2MsIHV2LngsIHV2LnkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBsb2FkUHJlZGljdGVkUGFnZXMoKSB7XHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT4ge1xyXG4gICAgICBjb25zdCB1ZCA9IHRoaXMuYm9vay5nZXRVc2VyRGlyZWN0aW9uKCk7XHJcbiAgICAgIHRoaXMucHJlZGljdGVkUmVxdWVzdHMgPSBbXTtcclxuICAgICAgZm9yKGxldCBpID0gMCwgcCA9IHVkLmxhc3RUb3BQYWdlICsgdWQuZGlyZWN0aW9uOyBpPHRoaXMucC5wcmVsb2FkUGFnZXM7ICsraSwgcCs9dWQuZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5wcmVkaWN0ZWRSZXF1ZXN0cy5wdXNoKHApO1xyXG4gICAgICB9XHJcbiAgICAgIGZvcihsZXQgcCBvZiB0aGlzLnByZWRpY3RlZFJlcXVlc3RzKSB7XHJcbiAgICAgICAgaWYocD49MCAmJiBwPHRoaXMuYm9vay5nZXRCb29rUGFnZXMoKSAmJiAhdGhpcy5wYWdlQ2FjaGUuZ2V0KHApKSB7XHJcbiAgICAgICAgICB0aGlzLmxvYWQodW5kZWZpbmVkLCBwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2V0TWF0ZXJpYWwobywgbWF0ZXJpYWwpIHtcclxuICAgIHRoaXMucGFnZUNhY2hlLmZvckVhY2goKGUpPT4ge1xyXG4gICAgICBjb25zdCBvYiA9IGVbMV07XHJcbiAgICAgIGlmKG8hPT1vYiAmJiBvYi5tYXRlcmlhbD09PW1hdGVyaWFsKSB7XHJcbiAgICAgICAgZGVsZXRlIG9iLm1hdGVyaWFsO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmKG1hdGVyaWFsICYmIG1hdGVyaWFsIT09by5tYXRlcmlhbCkge1xyXG4gICAgICBvLm1hdGVyaWFsID0gbWF0ZXJpYWw7XHJcbiAgICAgIHRoaXMuc2V0dXBNYXRlcmlhbChvKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldHVwTWF0ZXJpYWwobykge1xyXG4gICAgby5tYXRlcmlhbC5tYXAgPSBvLnRleHR1cmUuaW1hZ2U/IG8udGV4dHVyZTogKHRoaXMubG9hZGluZ0FuaW1hdGlvbj8gdGhpcy5sb2FkaW5nW28uY29sb3JdLnRleHR1cmU6IG51bGwpO1xyXG4gICAgaWYoIW8ubWF0ZXJpYWwubWFwKSB7XHJcbiAgICAgIG8ubWF0ZXJpYWwuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3Ioby5jb2xvcik7XHJcbiAgICB9XHJcbiAgICBvLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGdldE9yTG9hZFRleHR1cmVPYmplY3QobWF0ZXJpYWwsIG4pIHtcclxuICAgIGxldCBvYmplY3QgPSB0aGlzLnBhZ2VDYWNoZS5nZXQobik7XHJcbiAgICBpZighb2JqZWN0KSB7XHJcbiAgICAgIG9iamVjdCA9IHRoaXMubG9hZChtYXRlcmlhbCwgbik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5zZXRNYXRlcmlhbChvYmplY3QsIG1hdGVyaWFsKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb2JqZWN0O1xyXG4gIH1cclxuXHJcbiAgc2V0VGV4dHVyZShtYXRlcmlhbCwgbikge1xyXG4gICAgdGhpcy5nZXRPckxvYWRUZXh0dXJlT2JqZWN0KG1hdGVyaWFsLCBuKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9QYWdlTWFuYWdlci5qcyIsImltcG9ydCBCb29rUHJvcHNCdWlsZGVyIGZyb20gJy4vQm9va1Byb3BzQnVpbGRlcic7XHJcbmltcG9ydCBQZGYgZnJvbSAnUGRmJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBkZkJvb2tQcm9wc0J1aWxkZXIgZXh0ZW5kcyBCb29rUHJvcHNCdWlsZGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Ioc3JjLCBvblJlYWR5LCBzdHlsZSkge1xyXG4gICAgc3VwZXIob25SZWFkeSwgc3R5bGUpO1xyXG4gICAgdGhpcy5wZGYgPSBuZXcgUGRmKHNyYyk7XHJcbiAgICB0aGlzLnBhZ2VEZXNjcmlwdGlvbiA9IHtcclxuICAgICAgdHlwZTogJ3BkZicsXHJcbiAgICAgIHNyYzogdGhpcy5wZGYsXHJcbiAgICAgIGludGVyYWN0aXZlOiB0cnVlXHJcbiAgICB9O1xyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgcGFnZUNhbGxiYWNrOiB0aGlzLnBhZ2VDYWxsYmFjay5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgdGhpcy5wZGYuZ2V0SGFuZGxlcih0aGlzLmluaXQuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5wZGYuZGlzcG9zZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgaW5pdChoYW5kbGVyKSB7XHJcbiAgICBjb25zdCBwYWdlcyA9IHRoaXMucGRmLmdldFBhZ2VzTnVtKCk7XHJcbiAgICB0aGlzLnBhZ2VzID0gcGFnZXM7XHJcbiAgICB0aGlzLmNhbGNTaGVldHMocGFnZXMpO1xyXG4gICAgaWYocGFnZXM+MCkge1xyXG4gICAgICBoYW5kbGVyLmdldFBhZ2UoMSkuXHJcbiAgICAgIHRoZW4oKHBhZ2UpPT4ge1xyXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0ID0gcGFnZS5nZXRWaWV3cG9ydCh7c2NhbGU6IDF9KSwgc2l6ZSA9IHt3aWR0aDogdmlld3BvcnQud2lkdGgsIGhlaWdodDogdmlld3BvcnQuaGVpZ2h0fTtcclxuICAgICAgICB0aGlzLmNhbGNQcm9wcyhzaXplLndpZHRoLCBzaXplLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5yZWFkeSgpO1xyXG4gICAgICB9KS5cclxuICAgICAgY2F0Y2goKGUpPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMucHJvcHMgPSB0aGlzLmRlZmF1bHRzO1xyXG4gICAgICB0aGlzLnJlYWR5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwYWdlQ2FsbGJhY2sobikge1xyXG4gICAgcmV0dXJuIHRoaXMucGFnZURlc2NyaXB0aW9uO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9QZGZCb29rUHJvcHNCdWlsZGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGRmTGlua3NIYW5kbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3IocGRmLCBjdHJsLCBlbGVtZW50KSB7XHJcbiAgICB0aGlzLnBkZiA9IHBkZjtcclxuICAgIHRoaXMuY3RybCA9IGN0cmw7XHJcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG4gICAgdGhpcy5jdXJzb3JzID0gW107XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG5cclxuICB9XHJcblxyXG4gIHNldEhhbmRsZXIoaGFuZGxlcikge1xyXG4gICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuICB9XHJcblxyXG4gIGRlZmF1bHRIYW5kbGVyKHR5cGUsIGRlc3RpbmF0aW9uKSB7XHJcbiAgICBpZih0eXBlPT09J2ludGVybmFsJykge1xyXG4gICAgICB0aGlzLmN0cmwuZ29Ub1BhZ2UoZGVzdGluYXRpb24pO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZih0eXBlPT09J2V4dGVybmFsJykge1xyXG4gICAgICB3aW5kb3cub3BlbihkZXN0aW5hdGlvbiwgJ19ibGFuaycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FsbEhhbmRsZXJzKHR5cGUsIGRlc3RpbmF0aW9uKSB7XHJcbiAgICBpZighdGhpcy5oYW5kbGVyIHx8ICF0aGlzLmhhbmRsZXIodHlwZSwgZGVzdGluYXRpb24pKSB7XHJcbiAgICAgIHRoaXMuZGVmYXVsdEhhbmRsZXIodHlwZSwgZGVzdGluYXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGFuZGxlRXZlbnQoZGF0YSkge1xyXG4gICAgY29uc3QgZSA9IGRhdGEuZXZlbnQsIGFubm8gPSBkYXRhLmFubm90YXRpb247XHJcbiAgICBzd2l0Y2goZS50eXBlKSB7XHJcbiAgICAgIGNhc2UgJ21vdXNlb3Zlcic6IHtcclxuICAgICAgICB0aGlzLmN1cnNvcnMucHVzaCh0aGlzLmVsZW1lbnQuY3NzKCdjdXJzb3InKSk7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNzcygnY3Vyc29yJywgJ3BvaW50ZXInKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZW91dCc6IHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY3NzKCdjdXJzb3InLCB0aGlzLmN1cnNvcnMucG9wKCkgfHwgJycpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ3RvdWNodGFwJzpcclxuICAgICAgY2FzZSAnY2xpY2snOiB7XHJcbiAgICAgICAgaWYoYW5uby51cmwpIHtcclxuICAgICAgICAgIHRoaXMuY2FsbEhhbmRsZXJzKCdleHRlcm5hbCcsIGFubm8udXJsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihhbm5vLmRlc3QpIHtcclxuICAgICAgICAgIHRoaXMucGRmLmdldERlc3RpbmF0aW9uKGFubm8uZGVzdCkuXHJcbiAgICAgICAgICAgIHRoZW4oKG51bWJlcik9PiB0aGlzLmNhbGxIYW5kbGVycygnaW50ZXJuYWwnLCBudW1iZXIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2NsYXNzZXMvUGRmTGlua3NIYW5kbGVyLmpzIiwiaW1wb3J0IEZpbmRlciBmcm9tICdGaW5kZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VhcmNoRW5naW5lIHtcclxuICBjb25zdHJ1Y3RvcihwYWdlQ2FsbGJhY2ssIHBhZ2VzKSB7XHJcbiAgICB0aGlzLnBhZ2VDYWxsYmFjayA9IHBhZ2VDYWxsYmFjaztcclxuICAgIHRoaXMucGFnZXMgPSBwYWdlcztcclxuICAgIHRoaXMucmVzdWx0cyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgc2V0UXVlcnkocXVlcnkpIHtcclxuICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgIHRoaXMudXBkYXRlID0gdHJ1ZTtcclxuICAgIHRoaXMucHJvY2VzcygpO1xyXG4gIH1cclxuXHJcbiAgcHJvY2VzcygpIHtcclxuICAgIGlmKHRoaXMudXBkYXRlKSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLnJlc3VsdHM7XHJcbiAgICAgIHRoaXMucmVzdWx0cyA9IFtdO1xyXG4gICAgICBpZih0aGlzLm9uUGFnZUhpdHNDaGFuZ2VkKSB7XHJcbiAgICAgICAgZm9yKGxldCByZXMgb2YgcmVzdWx0cykge1xyXG4gICAgICAgICAgdGhpcy5vblBhZ2VIaXRzQ2hhbmdlZCh1bmRlZmluZWQsICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy51cGRhdGUgPSBmYWxzZTtcclxuICAgICAgdGhpcy5wYWdlID0gMDtcclxuICAgICAgdGhpcy5zdGFtcCA9IERhdGUubm93KCk7XHJcbiAgICAgIGlmKHRoaXMucXVlcnkubGVuZ3RoPjEpIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3MoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGlmKHRoaXMucGFnZTx0aGlzLnBhZ2VzKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhbXAgPSB0aGlzLnN0YW1wO1xyXG4gICAgICAgIHRoaXMuZmluZCh0aGlzLnBhZ2VDYWxsYmFjayh0aGlzLnBhZ2UpKS5cclxuICAgICAgICAgIHRoZW4oKGNvbnRleHRzKT0+IHtcclxuICAgICAgICAgICAgaWYoc3RhbXAgPT09IHRoaXMuc3RhbXApIHtcclxuICAgICAgICAgICAgICBpZihjb250ZXh0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgcGFnZTogdGhpcy5wYWdlLFxyXG4gICAgICAgICAgICAgICAgICBjb250ZXh0c1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmKHRoaXMub25QYWdlSGl0c0NoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25QYWdlSGl0c0NoYW5nZWQodGhpcy5wYWdlLCB0aGlzLnF1ZXJ5KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgKyt0aGlzLnBhZ2U7XHJcbiAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmaW5kKHBpKSB7XHJcbiAgICBsZXQgbmV4dDtcclxuICAgIGlmKHBpLnR5cGU9PT0ncGRmJykge1xyXG4gICAgICBuZXh0ID0gbmV3IFByb21pc2UoKHJlc29sdmUpPT4ge1xyXG4gICAgICAgIHBpLnNyYy5nZXRIYW5kbGVyKCgpPT4ge1xyXG4gICAgICAgICAgY29uc3QgbiA9IHBpLm51bWJlcj09PXVuZGVmaW5lZD8gdGhpcy5wYWdlOiBwaS5udW1iZXI7XHJcbiAgICAgICAgICBpZihwaS5zcmMuZ2V0UGFnZVR5cGUobik9PT0ncmlnaHQnKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoW10pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBpLnNyYy5nZXRQYWdlKG4pLlxyXG4gICAgICAgICAgICB0aGVuKChwYWdlKT0+IHtcclxuICAgICAgICAgICAgICBwYWdlLmdldFRleHRDb250ZW50KCkuXHJcbiAgICAgICAgICAgICAgdGhlbigodGV4dENvbnRlbnQpPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgRmluZGVyKHRleHRDb250ZW50Lml0ZW1zLm1hcCgoaXRlbSk9PiBpdGVtLnN0ciksIHRoaXMucXVlcnksIHtoaXRzOiBmYWxzZX0pLmdldENvbnRleHRzKCkpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KS5cclxuICAgICAgICAgICAgY2F0Y2goKCk9PiByZXNvbHZlKFtdKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIG5leHQgPSBQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5leHQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1NlYXJjaEVuZ2luZS5qcyIsImltcG9ydCB7JCwgdHJ9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgV2lkZ2V0Q29udHJvbGxlciBmcm9tICdXaWRnZXRDb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYXJlQ29udHJvbGxlciBleHRlbmRzIFdpZGdldENvbnRyb2xsZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3LCBib29rQ3RybCwgbGlua0J1aWxkZXI9KHBhZ2UpPT4gcGFnZSkge1xyXG4gICAgc3VwZXIodmlldywgJ3dpZFNoYXJlJyk7XHJcbiAgICB0aGlzLmJvb2tDdHJsID0gYm9va0N0cmw7XHJcbiAgICB0aGlzLmxpbmtCdWlsZGVyID0gbGlua0J1aWxkZXI7XHJcbiAgICBib29rQ3RybC5hZGRFdmVudExpc3RlbmVyKCdlbmRGbGlwJywgdGhpcy51cGRhdGVWaWV3LmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgY21kQ2xvc2VTaGFyZSgpIHtcclxuICAgIHRoaXMuaGlkZSgpO1xyXG4gIH1cclxuXHJcbiAgY2xpY2tMaW5rKHUsIGJsYW5rPXRydWUpIHtcclxuICAgIGNvbnN0IGEgPSAkKCc8YSBocmVmPVwiJyt1KydcIicrKGJsYW5rPyAnIHRhcmdldD1cIl9ibGFua1wiJzogJycpKyc+PC9hPicpLmFwcGVuZFRvKHRoaXMudmlldy5nZXRDb250YWluZXIoKSk7XHJcbiAgICBhWzBdLmNsaWNrKCk7XHJcbiAgICBhLnJlbW92ZSgpO1xyXG4gIH1cclxuXHJcbiAgY21kRmFjZWJvb2soKSB7XHJcbiAgICB0aGlzLmNsaWNrTGluaygnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwP3U9JytlbmNvZGVVUklDb21wb25lbnQodGhpcy5nZXRMaW5rKCkpKTtcclxuICB9XHJcblxyXG4gIGNtZFR3aXR0ZXIoKSB7XHJcbiAgICB0aGlzLmNsaWNrTGluaygnaHR0cDovL3R3aXR0ZXIuY29tL3NoYXJlP3VybD0nK2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLmdldExpbmsoKSkpO1xyXG4gIH1cclxuXHJcbiAgY21kRW1haWwoKSB7XHJcbiAgICB0aGlzLmNsaWNrTGluaygnbWFpbHRvOj9zdWJqZWN0PScrdHIoJ1dlIHdhbnRlZCB5b3UgdG8gc2VlIHRoaXMgYm9vaycpKycmYm9keT0nK3RyKCdDaGVjayBvdXQgdGhpcyBzaXRlJykrJyAnK2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLmdldExpbmsoKSksIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIGdldExpbmsoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5saW5rQnVpbGRlcih0aGlzLmJvb2tDdHJsLmdldFBhZ2VGb3JHVUkoKSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3KCkge1xyXG4gICAgaWYodGhpcy52aWV3KSB7XHJcbiAgICAgIGZvcihsZXQgY21kIG9mIFsnY21kQ2xvc2VTaGFyZScsICdjbWRGYWNlYm9vaycsICdjbWRUd2l0dGVyJywgJ2NtZEVtYWlsJ10pIHtcclxuICAgICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoY21kLCB7XHJcbiAgICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgndHh0U2hhcmVMaW5rJywge1xyXG4gICAgICAgIHZhbHVlOiB0aGlzLmdldExpbmsoKSxcclxuICAgICAgICB2aXNpYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgICBzdXBlci51cGRhdGVWaWV3KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1NoYXJlQ29udHJvbGxlci5qcyIsImltcG9ydCBDU1NMYXllciBmcm9tICdDU1NMYXllcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGVldENzc0xheWVyIHtcclxuICBjb25zdHJ1Y3Rvcih2aXN1YWwsIGJsb2NrLCBwcm9wcykge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICBjb25zdCBzaXplID0gYmxvY2suZ2V0VG9wU2l6ZSgpO1xyXG4gICAgdGhpcy5sYXllciA9IG5ldyBDU1NMYXllcihzaXplLndpZHRoLCBzaXplLmhlaWdodCwgcHJvcHMpO1xyXG5cclxuICAgIHRoaXMudXBkYXRlKGJsb2NrKTtcclxuICAgIHRoaXMudmlzdWFsLmFkZENzc09iamVjdCh0aGlzLmxheWVyKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmxheWVyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMudmlzdWFsLnJlbW92ZUNzc09iamVjdCh0aGlzLmxheWVyKTtcclxuICB9XHJcblxyXG4gIGlzSGlkZGVuKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGF5ZXIuaXNIaWRkZW4oKTtcclxuICB9XHJcblxyXG4gIGhpZGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5sYXllci5oaWRlKCk7XHJcbiAgfVxyXG5cclxuICBzaG93KCkge1xyXG4gICAgcmV0dXJuIHRoaXMubGF5ZXIuc2hvdygpO1xyXG4gIH1cclxuXHJcbiAgc2V0KGNzcywgaHRtbCwganMpIHtcclxuICAgIHRoaXMubGF5ZXIuc2V0RGF0YShjc3MsIGh0bWwsIGpzKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShibG9jaykge1xyXG4gICAgdGhpcy5ibG9jayA9IGJsb2NrO1xyXG4gICAgdGhpcy5ibG9jay5nZXRUb3BXb3JsZFJvdGF0aW9uKHRoaXMubGF5ZXIucm90YXRpb24pO1xyXG4gICAgdGhpcy5ibG9jay5nZXRUb3BXb3JsZFBvc2l0aW9uKHRoaXMubGF5ZXIucG9zaXRpb24pO1xyXG4gIH1cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1NoZWV0Q3NzTGF5ZXIuanMiLCJpbXBvcnQgTWF0aFV0aWxzIGZyb20gJ01hdGhVdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGVldFBoeXNpY3Mge1xyXG5cclxuICBzdGF0aWMgdGFyZ2V0Rm9yY2VDbGIobyxhLHYsY2gpIHtcclxuICAgIGNvbnN0IGwgPSBhKnRoaXMucjtcclxuICAgIHJldHVybiAxMDAqdGhpcy5tKnRoaXMuZyooMi8oMStNYXRoLmV4cCgxMCoobC10aGlzLnRsKSkpLTEpLXRoaXMubSo0MCp2O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhvdmVyQ29ybmVyRm9yY2VDbGIobyx2LGwsY2gpIHtcclxuICAgIHJldHVybiA1O1xyXG4gIH1cclxuXHJcbiAgZ2V0VGFyZ2V0Rm9yY2VDbGIobWFzcywgdGFyZ2V0QW5nbGUpIHtcclxuICAgIHJldHVybiBTaGVldFBoeXNpY3MudGFyZ2V0Rm9yY2VDbGIuYmluZCh7XHJcbiAgICAgIGc6IHRoaXMucC5ncmF2aXR5LFxyXG4gICAgICBtOiBtYXNzLFxyXG4gICAgICB0bDogdGFyZ2V0QW5nbGUqdGhpcy5wLnIsXHJcbiAgICAgIHI6IHRoaXMucC5yXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkcmFnRm9yY2VDbGIobyxhLHYsY2gpIHtcclxuICAgIHJldHVybiBvLmZsYnQqby5tKigxMCpvLmcqY2gtNTAqdi8oMStNYXRoLmV4cCgzLjUqTWF0aC5hYnMoY2gpKSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGRyYWdDb3JuZXJGb3JjZUNsYihvLGEsdixjaCkge1xyXG4gICAgcmV0dXJuIDE1KigyLygxK01hdGguZXhwKDEwKihhLXRoaXMudGEpKm8ucikpLTEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldERyYWdDb3JuZXJGb3JjZUNsYih0YXJnZXRBbmdsZSkge1xyXG4gICAgcmV0dXJuIFNoZWV0UGh5c2ljcy5kcmFnQ29ybmVyRm9yY2VDbGIuYmluZCh7XHJcbiAgICAgIHRhOiB0YXJnZXRBbmdsZVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihyPTEsIGdyYXZpdHk9MSwgY29ybmVyRGV2aWF0aW9uPTAuMTUsIGZwcz0yNDApIHtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgcixcclxuICAgICAgY29ybmVyRGV2aWF0aW9uLFxyXG4gICAgICBsOiBNYXRoLlBJKnIsXHJcbiAgICAgIHN0YXJ0RHQ6IDEvZnBzLFxyXG4gICAgICBncmF2aXR5LFxyXG4gICAgICBtYXJnaW46IDAuMDAyKnIsXHJcbiAgICAgIGluZk06IDFlNCxcclxuICAgICAgYXR0ZW1wdHM6IDE2LFxyXG4gICAgICBtYXhJdGVyYXRpb25zOiAxMDBcclxuICAgIH07XHJcbiAgICB0aGlzLm9zID0gW107XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy5vcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2l6ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLm9zLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIGFkZE9iamVjdChtYXNzLCBhbmdsZSwgdmVsb2NpdHksIGZsZXhpYmlsaXR5LCBjb3JuZXJIZWlnaHQsIHNpbXVsYXRlQ2xiLCByZW1vdmVDbGIsIGZvcmNlQ2xiPSgpPT4gMCwgY29ybmVyRm9yY2VDbGI9KCk9PiAwKSB7XHJcbiAgICBjb25zdCBubyA9IHtcclxuICAgICAgaWQ6IE1hdGhVdGlscy5nZXRVbmlxdWUoKSxcclxuICAgICAgbTogbWFzcyxcclxuICAgICAgdjogdmVsb2NpdHksXHJcbiAgICAgIGw6IGFuZ2xlKnRoaXMucC5yLFxyXG4gICAgICBmOiBmb3JjZUNsYixcclxuICAgICAgY2Y6IGNvcm5lckZvcmNlQ2xiLFxyXG4gICAgICBjaDogY29ybmVySGVpZ2h0LFxyXG4gICAgICBmbGJ0OiBmbGV4aWJpbGl0eSxcclxuICAgICAgc2ltdWxhdGVDbGIsXHJcbiAgICAgIHJlbW92ZUNsYlxyXG4gICAgfTtcclxuICAgIGxldCBpID0gdGhpcy5vcy5maW5kSW5kZXgoKG8pPT4gbm8ubDw9by5sKTtcclxuICAgIGkgPSB+aT8gaTogdGhpcy5vcy5sZW5ndGg7XHJcbiAgICB0aGlzLm9zLnNwbGljZShpLCAwLCBubyk7XHJcbiAgICByZXR1cm4gbm8uaWQ7XHJcbiAgfVxyXG5cclxuICBnZXRQYXJhbWV0ck1hcChuYW1lKSB7XHJcbiAgICBjb25zdCBtYXAgPSB7XHJcbiAgICAgIG1hc3M6ICdtJyxcclxuICAgICAgdmVsb2NpdHk6ICd2JyxcclxuICAgICAgZmxleGliaWxpdHk6ICdmbGJ0JyxcclxuICAgICAgY29ybmVySGVpZ2h0OiAnY2gnLFxyXG4gICAgICBzaW11bGF0ZUNsYjogJ3NpbXVsYXRlQ2xiJyxcclxuICAgICAgcmVtb3ZlQ2xiOiAncmVtb3ZlQ2xiJyxcclxuICAgICAgZm9yY2VDbGI6ICdmJyxcclxuICAgICAgY29ybmVyRm9yY2VDbGI6ICdjZidcclxuICAgIH07XHJcbiAgICByZXR1cm4gbWFwW25hbWVdO1xyXG4gIH1cclxuXHJcbiAgc2V0UGFyYW1ldHIoaWQsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICBjb25zdCBvID0gdGhpcy5vcy5maW5kKChvKT0+IG8uaWQ9PT1pZCk7XHJcbiAgICBpZihuYW1lID09PSAnYW5nbGUnKSB7XHJcbiAgICAgIG8ubCA9IHZhbHVlKnRoaXMucC5yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIG9bdGhpcy5nZXRQYXJhbWV0ck1hcChuYW1lKV0gPSB2YWx1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFBhcmFtZXRyKGlkLCBuYW1lKSB7XHJcbiAgICBjb25zdCBvID0gdGhpcy5vcy5maW5kKChvKT0+IG8uaWQ9PT1pZCk7XHJcbiAgICBsZXQgdmFsdWU7XHJcbiAgICBpZihuYW1lID09PSAnYW5nbGUnKSB7XHJcbiAgICAgIHZhbHVlID0gby5sL3RoaXMucC5yO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHZhbHVlID0gb1t0aGlzLmdldFBhcmFtZXRyTWFwKG5hbWUpXTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHNpbXVsYXRlKFQpIHtcclxuICAgIGxldCB0PTAsXHJcbiAgICAgICAgZHQ9dGhpcy5wLnN0YXJ0RHQsXHJcbiAgICAgICAgYXR0ZW1wdD0wLFxyXG4gICAgICAgIGl0PTA7XHJcblxyXG4gICAgd2hpbGUodDxUICYmIGl0PHRoaXMucC5tYXhJdGVyYXRpb25zKSB7XHJcbiAgICAgIGlmKGR0PlQtdCkge1xyXG4gICAgICAgIGR0ID0gVC10O1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IG5vcyA9IHRoaXMuaW50ZWdyYXRlKHRoaXMub3MsIGR0KSxcclxuICAgICAgICAgICAgY2kgPSB0aGlzLmZpbmRDb2xsaXNpb25zKG5vcyk7XHJcbiAgICAgIGlmKGNpLm51bT4xICYmIGF0dGVtcHQ8dGhpcy5wLmF0dGVtcHRzKSB7XHJcbiAgICAgICAgZHQvPTI7XHJcbiAgICAgICAgKythdHRlbXB0O1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGlmKGNpLm51bT09PTEpIHtcclxuICAgICAgICAgIGNvbnN0IHNjb3MgPSB0aGlzLnNvbHZlQ29sbGlzaW9uKG5vc1tjaS5sYXN0LTFdLCBub3NbY2kubGFzdF0pO1xyXG4gICAgICAgICAgbm9zW2NpLmxhc3QtMV0gPSBzY29zWzBdO1xyXG4gICAgICAgICAgbm9zW2NpLmxhc3RdID0gc2Nvc1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZihjaS5udW0+MSkge1xyXG4gICAgICAgICAgY29uc3QgZ3MgPSBbXTtcclxuICAgICAgICAgIGxldCBsYXN0ID0gLTI7XHJcbiAgICAgICAgICBmb3IobGV0IGkgb2YgY2kuYWxsKSB7XHJcbiAgICAgICAgICAgIGlmKGktbGFzdD4xKSB7XHJcbiAgICAgICAgICAgICAgZ3MucHVzaChbXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ3NbZ3MubGVuZ3RoLTFdLnB1c2goaSk7XHJcbiAgICAgICAgICAgIGxhc3QgPSBpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yKGxldCBnIG9mIGdzKSB7XHJcbiAgICAgICAgICAgIGxldCBzZywgaTA7XHJcbiAgICAgICAgICAgIGlmKG5vc1tnWzBdXS5sPk1hdGguUEkvMip0aGlzLnAucikge1xyXG4gICAgICAgICAgICAgIHNnID0gLTE7XHJcbiAgICAgICAgICAgICAgaTAgPSBnW2cubGVuZ3RoLTFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIHNnID0gMTtcclxuICAgICAgICAgICAgICBpMCA9IGdbMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yKGxldCBpPWkwOyBpPG5vcy5sZW5ndGggJiYgaT4tMTsgaSs9c2cpIHtcclxuICAgICAgICAgICAgICBjb25zdCBvID0gbm9zW2krc2ddO1xyXG4gICAgICAgICAgICAgIGlmKG8gJiYgc2cqKG8ubC1ub3NbaV0ubCk8PXRoaXMucC5tYXJnaW4pIHtcclxuICAgICAgICAgICAgICAgIG8ubD1ub3NbaV0ubCtzZyoyKnRoaXMucC5tYXJnaW47XHJcbiAgICAgICAgICAgICAgICBpZihvLmw+dGhpcy5wLmwgfHwgby5sPDApIHtcclxuICAgICAgICAgICAgICAgICAgby5sID0gby5sPnRoaXMucC5sPyB0aGlzLnAubDogMDtcclxuICAgICAgICAgICAgICAgICAgby5jaCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgIG8udj0wO1xyXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdCYWQgY29sbGlzaW9uJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub3MgPSBub3M7XHJcbiAgICAgICAgdGhpcy5maW5kQW5kU29sdmVDb3JuZXJDb2xsaXNpb25zKCk7XHJcbiAgICAgICAgdCs9ZHQ7XHJcbiAgICAgICAgZHQ9dGhpcy5wLnN0YXJ0RHQ7XHJcbiAgICAgICAgYXR0ZW1wdD0wO1xyXG4gICAgICB9XHJcbiAgICAgICsraXQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW1vdmVTdGF0aWNzKCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVTdGF0aWNzKCkge1xyXG4gICAgY29uc3Qgbm9zID0gW10sIG5vdGlmeSA9IFtbXSxbXV07XHJcbiAgICBmb3IobGV0IG8gb2YgdGhpcy5vcykge1xyXG4gICAgICBpZihvLnNpbXVsYXRlQ2xiKSB7XHJcbiAgICAgICAgby5zaW11bGF0ZUNsYihvLmwvdGhpcy5wLnIsIG8uY2gpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKChvLmw9PT10aGlzLnAubCB8fCBvLmw9PT0wKSAmJiBvLnY9PT0wKSB7XHJcbiAgICAgICAgaWYoby5yZW1vdmVDbGIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgbm90aWZ5WyhvLmwhPT10aGlzLnAubCkrMF0ucHVzaChvKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgbm9zLnB1c2gobyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMub3MgPSBub3M7XHJcbiAgICBmb3IobGV0IG8gb2Ygbm90aWZ5WzBdLnJldmVyc2UoKSkge1xyXG4gICAgICBvLnJlbW92ZUNsYihNYXRoLlBJLCBvLmNoKTtcclxuICAgIH1cclxuICAgIGZvcihsZXQgbyBvZiBub3RpZnlbMV0pIHtcclxuICAgICAgby5yZW1vdmVDbGIoMCwgby5jaCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmaW5kQW5kU29sdmVDb3JuZXJDb2xsaXNpb25zKCkge1xyXG4gICAgaWYodGhpcy5vcy5sZW5ndGgpIHtcclxuICAgICAgY29uc3Qgb3MgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgLi4udGhpcy5vc1swXSxcclxuICAgICAgICAgIGw6IDAsXHJcbiAgICAgICAgICBtOiB0aGlzLnAuaW5mTSxcclxuICAgICAgICAgIGNoOiAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICAuLi50aGlzLm9zLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIC4uLnRoaXMub3NbMF0sXHJcbiAgICAgICAgICBsOiAxLjA1KnRoaXMucC5sLFxyXG4gICAgICAgICAgbTogdGhpcy5wLmluZk0sXHJcbiAgICAgICAgICBjaDogMFxyXG4gICAgICAgIH1cclxuICAgICAgXTtcclxuXHJcbiAgICAgIGZvcihsZXQgaT0xOyBpPG9zLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgYT1vc1tpLTFdLCBiPW9zW2ldLFxyXG4gICAgICAgICAgICAgIGFsPWEubCt0aGlzLnAuY29ybmVyRGV2aWF0aW9uKmEuY2gqdGhpcy5wLnIsXHJcbiAgICAgICAgICAgICAgYmw9Yi5sK3RoaXMucC5jb3JuZXJEZXZpYXRpb24qYi5jaCp0aGlzLnAucjtcclxuICAgICAgICBpZigxLjA1KmFsPmJsICYmIGEuY2g+Yi5jaCkge1xyXG4gICAgICAgICAgY29uc3QgZENoID0gYS5jaC1iLmNoLCBkdj1hLm0vYS5mbGJ0K2IubS9iLmZsYnQsIGthPWEubS9hLmZsYnQvZHYsIGtiPWIubS9iLmZsYnQvZHY7XHJcbiAgICAgICAgICBhLmNoPWEuY2gta2IqZENoO1xyXG4gICAgICAgICAgYi5jaD1iLmNoK2thKmRDaDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNvbHZlQ29sbGlzaW9uKGEsIGIpIHtcclxuICAgIGNvbnN0IG1tPShiLm0rYS5tKSxcclxuICAgICAgYXYgPSAoLWEudipiLm0rYS5tKmEudisyKmIubSpiLnYpL21tLFxyXG4gICAgICBidiA9IChiLm0qYi52LWIudiphLm0rMiphLm0qYS52KS9tbTtcclxuICAgIHJldHVybiBbey4uLmEsIHY6IGF2fSwgey4uLmIsIHY6IGJ2fV07XHJcbiAgfVxyXG5cclxuICBmaW5kQ29sbGlzaW9ucyhvcykge1xyXG4gICAgY29uc3QgY2kgPSB7XHJcbiAgICAgIG51bTogMCxcclxuICAgICAgbGFzdDogMCxcclxuICAgICAgYWxsOiBbXVxyXG4gICAgfTtcclxuICAgIGZvcihsZXQgaSA9IDE7IGk8b3MubGVuZ3RoICYmIGNpLm51bTwyOyArK2kpIHtcclxuICAgICAgaWYob3NbaS0xXS5sPm9zW2ldLmwgfHwgdGhpcy5pc0NvbGxpc2lvbihvc1tpLTFdLCBvc1tpXSkpIHtcclxuICAgICAgICBpZihvc1tpLTFdLmw+b3NbaV0ubCkge1xyXG4gICAgICAgICAgKytjaS5udW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgICsrY2kubnVtO1xyXG4gICAgICAgIGNpLmxhc3QgPSBpO1xyXG4gICAgICAgIGlmKGNpLmFsbC5pbmRleE9mKGktMSk9PT0tMSkge1xyXG4gICAgICAgICAgY2kuYWxsLnB1c2goaS0xKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoY2kuYWxsLmluZGV4T2YoaSk9PT0tMSkge1xyXG4gICAgICAgICAgY2kuYWxsLnB1c2goaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY2k7XHJcbiAgfVxyXG5cclxuICBpc0NvbGxpc2lvbihhLCBiKSB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMoYS5sLWIubCk8dGhpcy5wLm1hcmdpbiAmJiBhLnY+Yi52O1xyXG4gIH1cclxuXHJcbiAgaW50ZWdyYXRlKG9zLCBkdCkge1xyXG4gICAgY29uc3Qgbm9zID0gW107XHJcbiAgICBmb3IobGV0IG8gb2Ygb3MpIHtcclxuICAgICAgY29uc3QgdmwgPSBNYXRoVXRpbHMucms0KFxyXG4gICAgICAgIHRoaXMuZHkuYmluZCh7XHJcbiAgICAgICAgICBnOiB0aGlzLnAuZ3Jhdml0eSxcclxuICAgICAgICAgIHI6IHRoaXMucC5yLFxyXG4gICAgICAgICAgbTogby5tLFxyXG4gICAgICAgICAgZjogby5mLFxyXG4gICAgICAgICAgY2Y6IG8uY2YsXHJcbiAgICAgICAgICBjaDogby5jaCxcclxuICAgICAgICAgIGZsYnQ6IG8uZmxidFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIDAsXHJcbiAgICAgICAgZHQsXHJcbiAgICAgICAgW28udiwgby5sLCBvLmNoXVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBubyA9IHtcclxuICAgICAgICAuLi5vLFxyXG4gICAgICAgIHY6IHZsWzBdLFxyXG4gICAgICAgIGw6IHZsWzFdLFxyXG4gICAgICAgIGNoOiB2bFsyXVxyXG4gICAgICB9O1xyXG4gICAgICBpZihuby5sPD0wIHx8IG5vLmw+PXRoaXMucC5sKSB7XHJcbiAgICAgICAgbm8ubD1uby5sPD0wPyAwOiB0aGlzLnAubDtcclxuICAgICAgICBuby52PTA7XHJcbiAgICAgICAgbm8uY2g9MDtcclxuICAgICAgfVxyXG4gICAgICBub3MucHVzaChubyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9zO1xyXG4gIH1cclxuXHJcbiAgZHkodCx5KSB7XHJcbiAgICBjb25zdCB2PXlbMF0sIGw9eVsxXSwgY2g9eVsyXSwgYWxmID0gbC90aGlzLnIsIGY9dGhpcy5mKHRoaXMsYWxmLHYsY2gpLCBjZj10aGlzLmNmKHRoaXMsYWxmLHYsY2gpLCBjb3NBbGY9TWF0aC5jb3MoYWxmKSxcclxuICAgIGJyZj0wLjAwNipNYXRoLmFicygoTWF0aC5zaWduKGNvc0FsZiktTWF0aC5zaWduKHYpKSp2KSpNYXRoLnBvdyhjb3NBbGYsNSk7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAoLXRoaXMuZypjb3NBbGYqdGhpcy5tK2JyZitmKS90aGlzLm0sXHJcbiAgICAgIHYrMC4wMSooTWF0aC5yYW5kb20oKS0wLjUpLFxyXG4gICAgICB0aGlzLmZsYnQqKCgyLygxK01hdGguZXhwKC0wLjIqY2YpKS0xKSooMS0yLygxK01hdGguZXhwKC01KihNYXRoLmFicyhjaCktMikpKSktY2gpXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9TaGVldFBoeXNpY3MuanMiLCJcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdW5kc0Vudmlyb21lbnQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZT17fSkge1xyXG4gICAgdGVtcGxhdGUgPSB0eXBlb2YgdGVtcGxhdGU9PT0nZnVuY3Rpb24nPyB0ZW1wbGF0ZSgpOiB0ZW1wbGF0ZTtcclxuICAgIHRoaXMuc291bmRzID0gdGVtcGxhdGUuc291bmRzIHx8IHt9O1xyXG4gICAgdGhpcy5hdWRpbyA9IHt9O1xyXG4gICAgaWYodGhpcy5zb3VuZHMuc3RhcnRGbGlwKSB7XHJcbiAgICAgIHRoaXMuYXVkaW8uc3RhcnRGbGlwID0gbmV3IEF1ZGlvKHRoaXMuc291bmRzLnN0YXJ0RmxpcCk7XHJcbiAgICAgIHRoaXMuYXVkaW8uc3RhcnRGbGlwLnZvbHVtZSA9IDAuNTtcclxuICAgIH1cclxuICAgIGlmKHRoaXMuc291bmRzLmVuZEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5lbmRGbGlwID0gbmV3IEF1ZGlvKHRoaXMuc291bmRzLmVuZEZsaXApO1xyXG4gICAgICB0aGlzLmF1ZGlvLmVuZEZsaXAudm9sdW1lID0gMC41O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0RW5hYmxlZChlbmFibGVkKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSBlbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgdG9nbGUoKSB7XHJcbiAgICB0aGlzLmVuYWJsZWQgPSAhdGhpcy5lbmFibGVkO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLmF1ZGlvLnN0YXJ0RmxpcDtcclxuICAgIGRlbGV0ZSB0aGlzLmF1ZGlvLmVuZEZsaXA7XHJcbiAgfVxyXG5cclxuICBzdGFydEZsaXAoKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5zdGFydEZsaXApIHtcclxuICAgICAgdGhpcy5hdWRpby5zdGFydEZsaXAucGxheSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZW5kRmxpcCgpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCAmJiB0aGlzLmF1ZGlvLnN0YXJ0RmxpcCkge1xyXG4gICAgICB0aGlzLmF1ZGlvLnN0YXJ0RmxpcC5wYXVzZSgpO1xyXG4gICAgICB0aGlzLmF1ZGlvLnN0YXJ0RmxpcC5jdXJyZW50VGltZSA9IDA7XHJcbiAgICB9XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5hdWRpby5lbmRGbGlwKSB7XHJcbiAgICAgIHRoaXMuYXVkaW8uZW5kRmxpcC5wbGF5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmVGbGlwcyhlbWl0dGVyKSB7XHJcbiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3N0YXJ0RmxpcCcsIHRoaXMuc3RhcnRGbGlwLmJpbmQodGhpcykpO1xyXG4gICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKCdlbmRGbGlwJywgdGhpcy5lbmRGbGlwLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vanMvY2xhc3Nlcy9Tb3VuZHNFbnZpcm9tZW50LmpzIiwiaW1wb3J0IFdpZGdldENvbnRyb2xsZXIgZnJvbSAnV2lkZ2V0Q29udHJvbGxlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb2NDb250cm9sbGVyIGV4dGVuZHMgV2lkZ2V0Q29udHJvbGxlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGJvb2tDdHJsKSB7XHJcbiAgICBzdXBlcih2aWV3LCAnd2lkRmxvYXRXbmQnKTtcclxuICAgIHRoaXMuYm9va0N0cmwgPSBib29rQ3RybDtcclxuICAgIHRoaXMudGFiID0gJ25vbmUnO1xyXG4gIH1cclxuXHJcbiAgc2V0VGh1bWJuYWlscyh0aHVtYm5haWxzKSB7XHJcbiAgICB0aGlzLnRodW1ibmFpbHMgPSB0aHVtYm5haWxzO1xyXG4gICAgdGh1bWJuYWlscy5vbk5hdmlnYXRlID0gdGhpcy5uYXZpZ2F0ZVRodW1ibmFpbHMuYmluZCh0aGlzKTtcclxuICAgIGlmKHRoaXMudGFiID09PSAnbm9uZScpIHtcclxuICAgICAgdGhpcy50YWIgPSAndGh1bWJuYWlscyc7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIHNldFNlYXJjaChzZWFyY2gpIHtcclxuICAgIHRoaXMuc2VhcmNoID0gc2VhcmNoO1xyXG4gICAgc2VhcmNoLm9uTmF2aWdhdGUgPSB0aGlzLm5hdmlnYXRlU2VhcmNoLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIHNldEJvb2ttYXJrcyhib29rbWFya3MsIHBkZikge1xyXG4gICAgdGhpcy5ib29rbWFya3MgPSBib29rbWFya3M7XHJcbiAgICB0aGlzLnBkZiA9IHBkZjtcclxuICAgIGJvb2ttYXJrcy5vbk5hdmlnYXRlID0gdGhpcy5uYXZpZ2F0ZUJvb2ttYXJrcy5iaW5kKHRoaXMpO1xyXG4gICAgaWYoYm9va21hcmtzLmdldFNpemUoKSkge1xyXG4gICAgICB0aGlzLnRhYiA9ICdib29rbWFya3MnO1xyXG4gICAgICB0aGlzLmlzQm9va21hcmtzID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgY21kQm9va21hcmtzKCkge1xyXG4gICAgdGhpcy50YWIgPSAnYm9va21hcmtzJztcclxuICAgIHRoaXMuZmlyZUNoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgY21kVGh1bWJuYWlscygpIHtcclxuICAgIHRoaXMudGFiID0gJ3RodW1ibmFpbHMnO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBjbWRTZWFyY2goKSB7XHJcbiAgICB0aGlzLnRhYiA9ICdzZWFyY2gnO1xyXG4gICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgfVxyXG5cclxuICBjbWRDbG9zZVRvYygpIHtcclxuICAgIHRoaXMuaGlkZSgpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGVUaHVtYm5haWxzKG51bWJlcikge1xyXG4gICAgdGhpcy5ib29rQ3RybC5nb1RvUGFnZShudW1iZXIpO1xyXG4gIH1cclxuXHJcbiAgbmF2aWdhdGVTZWFyY2gobnVtYmVyKSB7XHJcbiAgICB0aGlzLmJvb2tDdHJsLmdvVG9QYWdlKG51bWJlcik7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZUJvb2ttYXJrcyhpdGVtKSB7XHJcbiAgICBpZihpdGVtLnVybCkge1xyXG4gICAgICB3aW5kb3cub3BlbihpdGVtLnVybCwgJ19ibGFuaycpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZihpdGVtLmRlc3QpIHtcclxuICAgICAgdGhpcy5wZGYuZ2V0RGVzdGluYXRpb24oaXRlbS5kZXN0KS5cclxuICAgICAgICB0aGVuKChudW1iZXIpPT4gdGhpcy5ib29rQ3RybC5nb1RvUGFnZShudW1iZXIpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZVZpZXcoKSB7XHJcbiAgICBpZih0aGlzLnZpZXcpIHtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRUb2NNZW51Jywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnd2lkVGh1bWJuYWlscycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdGhpcy50YWI9PT0ndGh1bWJuYWlscycsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRTZWFyY2gnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMudGFiPT09J3NlYXJjaCcsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRCb29rbWFya3MnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMudGFiPT09J2Jvb2ttYXJrcycsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCdjbWRCb29rbWFya3MnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgYWN0aXZlOiB0aGlzLnRhYj09PSdib29rbWFya3MnXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZENsb3NlVG9jJywge1xyXG4gICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnY21kVGh1bWJuYWlscycsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMudGFiPT09J3RodW1ibmFpbHMnXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2NtZFNlYXJjaCcsIHtcclxuICAgICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IHRoaXMudGFiPT09J3NlYXJjaCdcclxuICAgICAgfSk7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLnRodW1ibmFpbHMuc2V0RW5hYmxlKHRoaXMudmlzaWJsZSAmJiB0aGlzLnRhYj09PSd0aHVtYm5haWxzJykpO1xyXG4gICAgICBzdXBlci51cGRhdGVWaWV3KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9jbGFzc2VzL1RvY0NvbnRyb2xsZXIuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IFRocmVlVXRpbHMgZnJvbSAnVGhyZWVVdGlscyc7XHJcblxyXG5jb25zdCByZXNYID0gMTEsXHJcbiAgICAgIHJlc1kgPSAyLFxyXG4gICAgICByZXNaID0gMTUsXHJcbiAgICAgIHNjYWxlID0gMSxcclxuICAgICAgZmFjZXMgPSBbXTtcclxuXHJcbmNvbnN0IGZyb250R2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1gtMSwgcmVzWS0xKTtcclxuZnJvbnRHZW9tZXRyeS50cmFuc2xhdGUoMC41KnNjYWxlLDAuNSpzY2FsZSxzY2FsZSk7XHJcbmNvbnN0IGJhY2tHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNjYWxlLCBzY2FsZSwgcmVzWC0xLCByZXNZLTEpO1xyXG5iYWNrR2VvbWV0cnkucm90YXRlWShNYXRoLlBJKTtcclxuYmFja0dlb21ldHJ5LnRyYW5zbGF0ZSgwLjUqc2NhbGUsMC41KnNjYWxlLDApO1xyXG5jb25zdCBsZWZ0R2VvbWV0cnkgPSBuZXcgVEhSRUUuUGxhbmVHZW9tZXRyeShzY2FsZSwgc2NhbGUsIHJlc1otMSwgcmVzWS0xKTtcclxubGVmdEdlb21ldHJ5LnJvdGF0ZVkoLU1hdGguUEkvMik7XHJcbmxlZnRHZW9tZXRyeS50cmFuc2xhdGUoMCwwLjUqc2NhbGUsMC41KnNjYWxlKTtcclxuY29uc3QgcmlnaHRHZW9tZXRyeSA9IG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KHNjYWxlLCBzY2FsZSwgcmVzWi0xLCByZXNZLTEpO1xyXG5yaWdodEdlb21ldHJ5LnJvdGF0ZVkoTWF0aC5QSS8yKTtcclxucmlnaHRHZW9tZXRyeS50cmFuc2xhdGUoc2NhbGUsMC41KnNjYWxlLDAuNSpzY2FsZSk7XHJcbmNvbnN0IHRvcEdlb21ldHJ5ID0gbmV3IFRIUkVFLlBsYW5lR2VvbWV0cnkoc2NhbGUsIHNjYWxlLCByZXNYLTEsIHJlc1otMSk7XHJcbnRvcEdlb21ldHJ5LnJvdGF0ZVgoLU1hdGguUEkvMik7XHJcbnRvcEdlb21ldHJ5LnRyYW5zbGF0ZSgwLjUqc2NhbGUsc2NhbGUsMC41KnNjYWxlKTtcclxuY29uc3QgYm90dG9tR2VvbWV0cnkgPSB0b3BHZW9tZXRyeS5jbG9uZSgpO1xyXG5ib3R0b21HZW9tZXRyeS50cmFuc2xhdGUoMCwtc2NhbGUsMCk7XHJcbmZvcihsZXQgZiBvZiBib3R0b21HZW9tZXRyeS5mYWNlcykge1xyXG4gIFtmLmEsIGYuYl0gPSBbZi5iLCBmLmFdO1xyXG59XHJcblxyXG5jb25zdCBnZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xyXG5nZW9tZXRyeS52ZXJ0aWNlcyA9IFsuLi5ib3R0b21HZW9tZXRyeS52ZXJ0aWNlcywgLi4udG9wR2VvbWV0cnkudmVydGljZXNdO1xyXG5cclxuY29uc3QgYWRkRmFjZXMgPSAoZnMsIG1hcCk9PiB7XHJcbiAgZm9yKGxldCBmIG9mIGZzKSB7XHJcbiAgICBnZW9tZXRyeS5mYWNlcy5wdXNoKG5ldyBUSFJFRS5GYWNlMyhtYXAoZi5hKSwgbWFwKGYuYiksIG1hcChmLmMpKSk7XHJcbiAgfVxyXG4gIGZhY2VzLnB1c2goZ2VvbWV0cnkuZmFjZXMubGVuZ3RoKTtcclxufTtcclxuXHJcbmNvbnN0IG1hcFZlcnRpY2VzID0gKHNyYywgZHN0KT0+IHtcclxuICBjb25zdCBtYXAgPSBbXTtcclxuICBjb25zdCBlcSA9IChhLCBiKT0+IE1hdGguYWJzKGEueC1iLngpK01hdGguYWJzKGEueS1iLnkpK01hdGguYWJzKGEuei1iLnopPDFlLTQ7XHJcbiAgZm9yKGxldCBpPTA7IGk8c3JjLmxlbmd0aDsgKytpKSB7XHJcbiAgICBmb3IobGV0IGo9MDsgajxkc3QubGVuZ3RoOyArK2opIHtcclxuICAgICAgaWYoZXEoc3JjW2ldLCBkc3Rbal0pKSB7XHJcbiAgICAgICAgbWFwW2ldPWo7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1hcDtcclxufTtcclxuXHJcbmNvbnN0IGZyb250TWFwID0gbWFwVmVydGljZXMoZnJvbnRHZW9tZXRyeS52ZXJ0aWNlcywgZ2VvbWV0cnkudmVydGljZXMpO1xyXG5jb25zdCBiYWNrTWFwID0gbWFwVmVydGljZXMoYmFja0dlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS52ZXJ0aWNlcyk7XHJcbmNvbnN0IGxlZnRNYXAgPSBtYXBWZXJ0aWNlcyhsZWZ0R2VvbWV0cnkudmVydGljZXMsIGdlb21ldHJ5LnZlcnRpY2VzKTtcclxuY29uc3QgcmlnaHRNYXAgPSBtYXBWZXJ0aWNlcyhyaWdodEdlb21ldHJ5LnZlcnRpY2VzLCBnZW9tZXRyeS52ZXJ0aWNlcyk7XHJcblxyXG5hZGRGYWNlcyh0b3BHZW9tZXRyeS5mYWNlcywgKGkpPT4gaStib3R0b21HZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGgpO1xyXG5hZGRGYWNlcyhib3R0b21HZW9tZXRyeS5mYWNlcywgKGkpPT4gaSk7XHJcbmFkZEZhY2VzKGZyb250R2VvbWV0cnkuZmFjZXMsIChpKT0+IGZyb250TWFwW2ldKTtcclxuYWRkRmFjZXMoYmFja0dlb21ldHJ5LmZhY2VzLCAoaSk9PiBiYWNrTWFwW2ldKTtcclxuYWRkRmFjZXMobGVmdEdlb21ldHJ5LmZhY2VzLCAoaSk9PiBsZWZ0TWFwW2ldKTtcclxuYWRkRmFjZXMocmlnaHRHZW9tZXRyeS5mYWNlcywgKGkpPT4gcmlnaHRNYXBbaV0pO1xyXG5mYWNlcy5wb3AoKTtcclxuXHJcblRocmVlVXRpbHMuY29tcHV0ZUZhY2VWZXJ0ZXhVdnMoZ2VvbWV0cnksIGZhY2VzKTtcclxuXHJcbmdlb21ldHJ5LmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XHJcbi8vZ2VvbWV0cnkuY29tcHV0ZUZhY2VOb3JtYWxzKCk7XHJcbmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xyXG4vL2dlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveCgpO1xyXG5nZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSB0cnVlO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdHJlc1gsXHJcblx0cmVzWSxcclxuXHRyZXNaLFxyXG5cdGZhY2VzLFxyXG5cdGdlb21ldHJ5XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL21vZGVscy9zaGVldEJsb2NrLmpzIiwiY29uc3QgbW91c2VCdXR0b25zID0ge1xyXG4gIExlZnQ6IDAsXHJcbiAgTWlkZGxlOiAxLFxyXG4gIFJpZ2h0OiAyXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJvcHMoKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGVwczogMWUtNCxcclxuICAgIHNjYWxlOiB7XHJcbiAgICAgIGRlZmF1bHQ6IDAuOSxcclxuICAgICAgbWluOiAwLjksXHJcbiAgICAgIG1heDogMi41LFxyXG4gICAgICBsZXZlbHM6IDdcclxuICAgIH0sXHJcbiAgICBsaWdodGluZzoge1xyXG4gICAgICBkZWZhdWx0OiAwLjcsXHJcbiAgICAgIG1pbjogMCxcclxuICAgICAgbWF4OiAxLFxyXG4gICAgICBsZXZlbHM6IDdcclxuICAgIH0sXHJcbiAgICBwYW46IHtcclxuICAgICAgc3BlZWQ6IDUwXHJcbiAgICB9LFxyXG4gICAgbG9hZGluZ0FuaW1hdGlvbjoge1xyXG4gICAgICBza2luOiBmYWxzZSxcclxuICAgICAgYm9vazogdHJ1ZVxyXG4gICAgfSxcclxuICAgIGF1dG9SZXNvbHV0aW9uOiB7XHJcbiAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgIGNvZWZmaWNpZW50OiAxLjVcclxuICAgIH0sXHJcbiAgICBuYXJyb3dWaWV3OiB7XHJcbiAgICAgIHdpZHRoOiA1MDBcclxuICAgIH0sXHJcbiAgICBhY3Rpb25zOiB7XHJcbiAgICAgIGNtZFpvb21Jbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFpvb21PdXQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWREZWZhdWx0Wm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZSxcclxuICAgICAgICB0eXBlOiAnZGJsY2xpY2snLFxyXG4gICAgICAgIGNvZGU6IDBcclxuICAgICAgfSxcclxuICAgICAgY21kVG9jOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kRmFzdEJhY2t3YXJkOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRCYWNrd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRCaWdCYWNrd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZvcndhcmQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kQmlnRm9yd2FyZDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZEZhc3RGb3J3YXJkOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTYXZlOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kUHJpbnQ6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kRnVsbFNjcmVlbjoge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlZEluTmFycm93OiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIHdpZFNldHRpbmdzOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kU21hcnRQYW46IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFNpbmdsZVBhZ2U6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZUZvck1vYmlsZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRTb3VuZHM6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kU3RhdHM6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IGZhbHNlLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kU2hhcmU6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIGVuYWJsZWRJbk5hcnJvdzogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRMaWdodGluZ1VwOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kTGlnaHRpbmdEb3duOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICBlbmFibGVkSW5OYXJyb3c6IHRydWVcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuTGVmdDoge1xyXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXHJcbiAgICAgIH0sXHJcbiAgICAgIGNtZFBhblJpZ2h0OiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgY21kUGFuVXA6IHtcclxuICAgICAgICBlbmFibGVkOiBmYWxzZVxyXG4gICAgICB9LFxyXG4gICAgICBjbWRQYW5Eb3duOiB7XHJcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgbW91c2VDbWRSb3RhdGU6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICdtb3VzZWRyYWcnLFxyXG4gICAgICAgIGNvZGU6IG1vdXNlQnV0dG9ucy5SaWdodFxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZERyYWdab29tOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAnbW91c2VkcmFnJyxcclxuICAgICAgICBjb2RlOiBtb3VzZUJ1dHRvbnMuTWlkZGxlXHJcbiAgICAgIH0sXHJcbiAgICAgIG1vdXNlQ21kUGFuOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAnbW91c2VkcmFnJyxcclxuICAgICAgICBjb2RlOiBtb3VzZUJ1dHRvbnMuTGVmdFxyXG4gICAgICB9LFxyXG4gICAgICBtb3VzZUNtZFdoZWVsWm9vbToge1xyXG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgdHlwZTogJ21vdXNld2hlZWwnLFxyXG4gICAgICAgIGNvZGU6IDBcclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRSb3RhdGU6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICd0b3VjaGRyYWcnLFxyXG4gICAgICAgIGNvZGU6IDNcclxuICAgICAgfSxcclxuICAgICAgdG91Y2hDbWRab29tOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAndG91Y2hkcmFnJyxcclxuICAgICAgICBjb2RlOiAyXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kUGFuOiB7XHJcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICB0eXBlOiAndG91Y2hkcmFnJyxcclxuICAgICAgICBjb2RlOiAxXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvdWNoQ21kU3dpcGU6IHtcclxuICAgICAgICBlbmFibGVkOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6ICd0b3VjaGRyYWcnLFxyXG4gICAgICAgIGNvZGU6IDFcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL3Byb3BzL2Jvb2tDb250cm9sbGVyLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuaW1wb3J0IEltYWdlQmFzZSBmcm9tICcuL0ltYWdlQmFzZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbGFua0ltYWdlIGV4dGVuZHMgSW1hZ2VCYXNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IpIHtcclxuICAgIHN1cGVyKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKTtcclxuXHJcbiAgICBQcm9taXNlLnJlc29sdmUoKS5cclxuICAgICAgdGhlbigoKT0+IHtcclxuICAgICAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlckJsYW5rUGFnZSgpO1xyXG4gICAgICAgICAgdGhpcy5maW5pc2hSZW5kZXIoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgICB9KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvQmxhbmtJbWFnZS5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb29rbWFya3Mge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGl0ZW1zLCBnZXRUaXRsZT0oaSk9PiBpLnRpdGxlLCBnZXRJdGVtcz0oaSk9PmkuaXRlbXMpIHtcclxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgdGhpcy5tYXAgPSBbXTtcclxuICAgIHRoaXMuZ2V0VGl0bGUgPSBnZXRUaXRsZTtcclxuICAgIHRoaXMuZ2V0SXRlbXMgPSBnZXRJdGVtcztcclxuICAgIHRoaXMubm9kZXMgPSB0aGlzLm1hcE5vZGVzKGl0ZW1zLCB0aGlzLm1hcCk7XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgdG9nbGU6IChlKT0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgbGV0IGxpID0gJChlLnRhcmdldCk7XHJcbiAgICAgICAgd2hpbGUobGlbMF0gJiYgbGlbMF0hPT1jb250YWluZXJbMF0gJiYgIWxpLmhhc0NsYXNzKCdpdGVtJykpIHtcclxuICAgICAgICAgIGxpID0gJChsaVswXS5wYXJlbnROb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYobGkuaGFzQ2xhc3MoJ2l0ZW0nKSkge1xyXG4gICAgICAgICAgbGV0IGNtZCA9ICQoZS50YXJnZXQpO1xyXG4gICAgICAgICAgd2hpbGUoY21kWzBdICYmIGNtZFswXSE9PWxpWzBdICYmICFjbWQuaGFzQ2xhc3MoJ2NtZCcpKSB7XHJcbiAgICAgICAgICAgIGNtZCA9ICQoY21kWzBdLnBhcmVudE5vZGUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYoY21kLmhhc0NsYXNzKCdjbWQnKSkge1xyXG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5tYXBbbGkuYXR0cignZGF0YS1pZCcpXTtcclxuICAgICAgICAgICAgaWYoY21kLmhhc0NsYXNzKCd0b2dsZScpKSB7XHJcbiAgICAgICAgICAgICAgbm9kZS5taW5pbWl6ZWQgPSAhbm9kZS5taW5pbWl6ZWQ7XHJcbiAgICAgICAgICAgICAgaWYobm9kZS5taW5pbWl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGxpLmZpbmQoJ3VsJykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICBsaS5maW5kKCcudG9nbGUnKS5hZGRDbGFzcygnbWluaW1pemVkJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGkuZmluZCgnLnRvZ2xlJykucmVtb3ZlQ2xhc3MoJ21pbmltaXplZCcpO1xyXG4gICAgICAgICAgICAgICAgbGkuYXBwZW5kKCh0aGlzLnJlbmRlck5vZGUobm9kZSkubWF0Y2goLzx1bCgufFxcbikqPFxcL3VsPi9nKSB8fCBbJyddKVswXSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIGlmKHRoaXMub25OYXZpZ2F0ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbk5hdmlnYXRlKG5vZGUuaXRlbSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29udGFpbmVyLm9uKCdjbGljaycsIHRoaXMuYmluZHMudG9nbGUpO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIGdldFNpemUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tYXAubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuY29udGFpbmVyLm9mZignY2xpY2snLCB0aGlzLmJpbmRzLnRvZ2xlKTtcclxuICAgIHRoaXMuY29udGFpbmVyLmh0bWwoJycpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgdGhpcy5jb250YWluZXIuaHRtbCh0aGlzLnJlbmRlck5vZGVzKHRoaXMubm9kZXMpKTtcclxuICB9XHJcblxyXG4gIGZvckVhY2goZiwgbm9kZXM9dGhpcy5ub2Rlcykge1xyXG4gICAgZm9yKGxldCBub2RlIG9mIChub2RlcyB8fCBbXSkpIHtcclxuICAgICAgZihub2RlKTtcclxuICAgICAgdGhpcy5mb3JFYWNoKGYsIG5vZGUuY2hpbGRyZW4pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZXhwYW5kKCkge1xyXG4gICAgdGhpcy5mb3JFYWNoKChuKT0+IG4ubWluaW1pemVkID0gZmFsc2UpO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIG1pbmltaXplKCkge1xyXG4gICAgdGhpcy5mb3JFYWNoKChuKT0+IG4ubWluaW1pemVkID0gdHJ1ZSk7XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTm9kZShub2RlKSB7XHJcbiAgICByZXR1cm4gWyc8ZGl2IGNsYXNzPVwiYXJlYVwiPicsXHJcbiAgICAgIG5vZGUuY2hpbGRyZW4/ICc8YSBocmVmPVwiI1wiIGNsYXNzPVwiY21kIHRvZ2xlJyArIChub2RlLm1pbmltaXplZD8gJyBtaW5pbWl6ZWQnOiAnJykgKyAnXCI+PGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvaT48L2E+ICc6ICc8aSBjbGFzcz1cIndoaXRlLXNwYWNlXCI+PC9pPiAnLFxyXG4gICAgICAnPGEgY2xhc3M9XCJjbWRcIiB0aXRsZT1cIicsIG5vZGUudGl0bGUsJ1wiIGhyZWY9XCIjXCI+Jywgbm9kZS50aXRsZSwgJzwvYT48L2Rpdj4nLFxyXG4gICAgICBub2RlLm1pbmltaXplZD8gJyc6IHRoaXMucmVuZGVyTm9kZXMobm9kZS5jaGlsZHJlbilcclxuICAgIF0uam9pbignJyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJOb2Rlcyhub2Rlcykge1xyXG4gICAgbGV0IHJlcyA9IFsnPGRpdiBjbGFzcz1cImJvb2ttYXJrc1wiPiddO1xyXG4gICAgaWYobm9kZXMgJiYgbm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgIHJlcy5wdXNoKCc8dWwgY2xhc3M9XCJsZXZlbC0nLCBub2Rlc1swXS5sZXZlbCwgJ1wiPicpO1xyXG4gICAgICBmb3IobGV0IG5vZGUgb2Ygbm9kZXMpIHtcclxuICAgICAgICByZXMucHVzaChbXHJcbiAgICAgICAgICAnPGxpIGNsYXNzPVwiaXRlbVwiIGRhdGEtaWQ9XCInLCBub2RlLmlkLCdcIj4nLFxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlck5vZGUobm9kZSksXHJcbiAgICAgICAgICAnPC9saT4nXS5qb2luKCcnKSk7XHJcbiAgICAgIH1cclxuICAgICAgcmVzLnB1c2goJzwvdWw+Jyk7XHJcbiAgICB9XHJcbiAgICByZXMucHVzaCgnPC9kaXY+Jyk7XHJcbiAgICByZXR1cm4gcmVzLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgbWFwTm9kZXMoaXRlbXMsIG1hcD1bXSwgbGV2ZWw9MCkge1xyXG4gICAgbGV0IG5vZGVzID0gbnVsbDtcclxuICAgIGlmKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICBub2Rlcz1bXTtcclxuICAgICAgZm9yKGxldCBpdGVtIG9mIGl0ZW1zKSB7XHJcbiAgICAgICAgY29uc3QgaWQgPSBtYXAubGVuZ3RoO1xyXG4gICAgICAgIG1hcC5wdXNoKHVuZGVmaW5lZCk7XHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IHtcclxuICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgdGl0bGU6IHRoaXMuZ2V0VGl0bGUoaXRlbSksXHJcbiAgICAgICAgICBsZXZlbCxcclxuICAgICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICBtaW5pbWl6ZWQ6IHRydWUsXHJcbiAgICAgICAgICBjaGlsZHJlbjogdGhpcy5tYXBOb2Rlcyh0aGlzLmdldEl0ZW1zKGl0ZW0pLCBtYXAsIGxldmVsKzEpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICAgIG1hcFtpZF0gPSBub2RlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbm9kZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Cb29rbWFya3MuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV0ZWN0b3Ige1xyXG5cclxuXHRzdGF0aWMgY2FudmFzID0gISEgd2luZG93LkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcblx0c3RhdGljIHdlYmdsID0gKGZ1bmN0aW9uKCkge1xyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcblx0XHRcdHJldHVybiAhISAod2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCAmJiAoY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykgfHwgY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpKSk7XHJcblx0XHR9XHJcblx0XHRjYXRjaCAoZSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fSkoKTtcclxuXHJcblx0c3RhdGljIHdvcmtlcnMgPSAhISB3aW5kb3cuV29ya2VyO1xyXG5cclxuXHRzdGF0aWMgZmlsZWFwaSA9IHdpbmRvdy5GaWxlICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5GaWxlTGlzdCAmJiB3aW5kb3cuQmxvYjtcclxuXHJcblx0c3RhdGljIGdldFdlYkdMRXJyb3JNZXNzYWdlKCkge1xyXG5cdFx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdFx0ZWxlbWVudC5pZCA9ICd3ZWJnbC1lcnJvci1tZXNzYWdlJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9ICdtb25vc3BhY2UnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS5mb250U2l6ZSA9ICcxM3B4JztcclxuXHRcdGVsZW1lbnQuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9ICcjZmZmJztcclxuXHRcdGVsZW1lbnQuc3R5bGUuY29sb3IgPSAnIzAwMCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLnBhZGRpbmcgPSAnMS41ZW0nO1xyXG5cdFx0ZWxlbWVudC5zdHlsZS53aWR0aCA9ICc0MDBweCc7XHJcblx0XHRlbGVtZW50LnN0eWxlLm1hcmdpbiA9ICc1ZW0gYXV0byAwJztcclxuXHJcblx0XHRpZiAoIURldGVjdG9yLndlYmdsKSB7XHJcblx0XHRcdGVsZW1lbnQuaW5uZXJIVE1MID0gd2luZG93LldlYkdMUmVuZGVyaW5nQ29udGV4dCA/IFtcclxuXHRcdFx0XHQnWW91ciBncmFwaGljcyBjYXJkIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+V2ViR0w8L2E+LjxiciAvPicsXHJcblx0XHRcdFx0J0ZpbmQgb3V0IGhvdyB0byBnZXQgaXQgPGEgaHJlZj1cImh0dHA6Ly9nZXQud2ViZ2wub3JnL1wiIHN0eWxlPVwiY29sb3I6IzAwMFwiPmhlcmU8L2E+LidcclxuXHRcdFx0XS5qb2luKCdcXG4nKSA6IFtcclxuXHRcdFx0XHQnWW91ciBicm93c2VyIGRvZXMgbm90IHNlZW0gdG8gc3VwcG9ydCA8YSBocmVmPVwiaHR0cDovL2tocm9ub3Mub3JnL3dlYmdsL3dpa2kvR2V0dGluZ19hX1dlYkdMX0ltcGxlbWVudGF0aW9uXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+V2ViR0w8L2E+Ljxici8+JyxcclxuXHRcdFx0XHQnRmluZCBvdXQgaG93IHRvIGdldCBpdCA8YSBocmVmPVwiaHR0cDovL2dldC53ZWJnbC5vcmcvXCIgc3R5bGU9XCJjb2xvcjojMDAwXCI+aGVyZTwvYT4uJ1xyXG5cdFx0XHRdLmpvaW4oJ1xcbicpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGVsZW1lbnQ7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkR2V0V2ViR0xNZXNzYWdlKHBhcmFtZXRlcnMpIHtcclxuXHRcdGxldCBwYXJlbnQsIGlkLCBlbGVtZW50O1xyXG5cdFx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XHJcblxyXG5cdFx0cGFyZW50ID0gcGFyYW1ldGVycy5wYXJlbnQgfHwgJChkb2N1bWVudC5ib2R5KTtcclxuXHRcdGlkID0gcGFyYW1ldGVycy5pZCB8fCAnb2xkaWUnO1xyXG5cclxuXHRcdGVsZW1lbnQgPSBEZXRlY3Rvci5nZXRXZWJHTEVycm9yTWVzc2FnZSgpO1xyXG5cdFx0Ly9lbGVtZW50LmlkID0gaWQ7XHJcblxyXG5cdFx0cGFyZW50LmFwcGVuZChlbGVtZW50KTtcclxuXHR9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RldGVjdG9yLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9jTW91c2VTaW11bGF0b3Ige1xyXG5cclxuICBzdGF0aWMgSE9WRVIgPSAnU0lNVUxBVEVELUhPVkVSJztcclxuICBzdGF0aWMgQUNUSVZFID0gJ1NJTVVMQVRFRC1BQ1RJVkUnO1xyXG5cclxuICBjb25zdHJ1Y3RvcihqRnJhbWUsIGVsZW1lbnQsIGJFbGVtZW50PWRvY3VtZW50LmJvZHkpIHtcclxuICAgIHRoaXMuakZyYW1lID0gakZyYW1lO1xyXG4gICAgdGhpcy53bmQgPSBqRnJhbWVbMF0uY29udGVudFdpbmRvdztcclxuICAgIHRoaXMuZG9jID0gakZyYW1lWzBdLmNvbnRlbnREb2N1bWVudDtcclxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jLmJvZHk7XHJcbiAgICB0aGlzLmJFbGVtZW50ID0gYkVsZW1lbnQ7XHJcbiAgICB0aGlzLnJlc2VuZFByb3BlcnRpZXMgPSB0aGlzLmdldERlZmF1bHRSZXNlbmRQcm9wZXJ0aWVzKCk7XHJcbiAgICB0aGlzLnVuZGVmaW5lZFByb3BlcnRpZXMgPSB0aGlzLmdldERlZmF1bHRVbmRlZmluZWRQcm9wZXJ0aWVzKCk7XHJcbiAgICB0aGlzLmN1cnNvcnMgPSBbXTtcclxuICAgIHRoaXMub25Eb2NDaGFuZ2VDbGJzID0gW107XHJcbiAgICBjb25zdCB0ZXJtcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBmaW5kOiAnOmhvdmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2U6ICcuJytEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZmluZDogJzphY3RpdmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogJy4nK0RvY01vdXNlU2ltdWxhdG9yLkFDVElWRVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgXTtcclxuICAgIGxldCBzdHlsZSA9IFsnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiddO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRvYy5zdHlsZVNoZWV0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBsZXQgc3MgPSB0aGlzLmRvYy5zdHlsZVNoZWV0c1tpXTtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzcy5jc3NSdWxlcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgIGxldCByID0gc3MuY3NzUnVsZXNbal0sIGNzc1RleHQ7XHJcbiAgICAgICAgZm9yKGxldCB0ZXJtIG9mIHRlcm1zKSB7XHJcbiAgICAgICAgICBpZiAofnIuc2VsZWN0b3JUZXh0LmluZGV4T2YodGVybS5maW5kKSkge1xyXG4gICAgICAgICAgICBjc3NUZXh0ID0gKGNzc1RleHQgfHwgci5jc3NUZXh0KS5yZXBsYWNlKG5ldyBSZWdFeHAodGVybS5maW5kLCAnZycpLCB0ZXJtLnJlcGxhY2UpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZihjc3NUZXh0KSB7XHJcbiAgICAgICAgICBzdHlsZS5wdXNoKGNzc1RleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgc3R5bGUucHVzaCgnPC9zdHlsZT4nKTtcclxuICAgICQodGhpcy5kb2MuaGVhZCkuYXBwZW5kKCQoc3R5bGUuam9pbignJykpKTtcclxuICB9XHJcblxyXG4gIGNvbnZlcnRDb29yZHMoeCwgeSkge1xyXG4gICAgY29uc3QgakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHg6IG9mZnNldC5sZWZ0K2pFbGVtZW50LndpZHRoKCkqeCxcclxuICAgICAgeTogb2Zmc2V0LnRvcCtqRWxlbWVudC5oZWlnaHQoKSooMS15KVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHRyaWdnZXJFdmVudChlbGVtZW50LCBlLCBwLCB0eXBlLCBhZHZhbmNlZFByb3BzKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IHt9O1xyXG4gICAgZm9yKGxldCBuIG9mIHRoaXMucmVzZW5kUHJvcGVydGllcykge1xyXG4gICAgICBwcm9wc1tuXSA9IGVbbl07XHJcbiAgICB9XHJcbiAgICBmb3IobGV0IG4gb2YgdGhpcy51bmRlZmluZWRQcm9wZXJ0aWVzKSB7XHJcbiAgICAgIHByb3BzW25dID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgZm9yKGxldCBuIGluIGFkdmFuY2VkUHJvcHMpIHtcclxuICAgICAgaWYoYWR2YW5jZWRQcm9wcy5oYXNPd25Qcm9wZXJ0eShuKSkge1xyXG4gICAgICAgIHByb3BzW25dID0gYWR2YW5jZWRQcm9wc1tuXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJvcHMudmlldyA9IHRoaXMud25kO1xyXG4gICAgcHJvcHMucGFnZVggPSBwLng7XHJcbiAgICBwcm9wcy5wYWdlWSA9IHAueTtcclxuICAgIGNvbnN0IGpFID0gJC5FdmVudCh0eXBlLCBwcm9wcyk7XHJcbiAgICBqRS50aW1lU3RhbXAgPSBlLnRpbWVTdGFtcDtcclxuICAgICQoZWxlbWVudCkudHJpZ2dlcihqRSk7XHJcbiAgfVxyXG5cclxuICBhZGRDbGFzcyhlbGVtZW50LCBuYW1lKSB7XHJcbiAgICAkKGVsZW1lbnQpLmFkZENsYXNzKG5hbWUpO1xyXG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLnduZC5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xyXG4gICAgdGhpcy5jdXJzb3JzLnB1c2goJCh0aGlzLmJFbGVtZW50KS5jc3MoJ2N1cnNvcicpKTtcclxuICAgICQodGhpcy5iRWxlbWVudCkuY3NzKCdjdXJzb3InLCBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjdXJzb3InKSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVDbGFzcyhlbGVtZW50LCBuYW1lKSB7XHJcbiAgICAkKGVsZW1lbnQpLnJlbW92ZUNsYXNzKG5hbWUpO1xyXG4gICAgJCh0aGlzLmJFbGVtZW50KS5jc3MoJ2N1cnNvcicsIHRoaXMuY3Vyc29ycy5wb3AoKSk7XHJcbiAgfVxyXG5cclxuICBlbnRlckVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5hZGRDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUik7XHJcbiAgfVxyXG5cclxuICBsZWF2ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5yZW1vdmVDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5IT1ZFUik7XHJcbiAgfVxyXG5cclxuICBhY3RpdmF0ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5hZGRDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5BQ1RJVkUpO1xyXG4gIH1cclxuXHJcbiAgZGVhY3RpdmF0ZUVsZW1lbnQoZWxlbWVudCkge1xyXG4gICAgdGhpcy5yZW1vdmVDbGFzcyhlbGVtZW50LCBEb2NNb3VzZVNpbXVsYXRvci5BQ1RJVkUpO1xyXG4gIH1cclxuXHJcbiAgYWRkRG9jQ2hhbmdlQ2xiKGNsYikge1xyXG4gICAgdGhpcy5vbkRvY0NoYW5nZUNsYnMucHVzaChjbGIpO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5KCkge1xyXG4gICAgZm9yKGxldCBjbGIgb2YgdGhpcy5vbkRvY0NoYW5nZUNsYnMpIHtcclxuICAgICAgY2xiKHRoaXMud25kLCB0aGlzLmRvYyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBlbGVtZW50RnJvbVBvaW50KHApIHtcclxuICAgIGxldCBub2RlID0gdGhpcy5kb2MuYm9keSwgbmV4dCA9IHRydWU7XHJcbiAgICB3aGlsZShuZXh0KSB7XHJcbiAgICAgIG5leHQgPSBmYWxzZTtcclxuICAgICAgZm9yKGxldCBpPTA7IGk8bm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlLmNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgaWYoY2hpbGQgaW5zdGFuY2VvZiB0aGlzLnduZC5FbGVtZW50KSB7XHJcbiAgICAgICAgICBjb25zdCBqQyA9ICQoY2hpbGQpLCBvZmZzZXQgPSBqQy5vZmZzZXQoKSwgaGVpZ2h0ID0gakMuaGVpZ2h0KCksIHdpZHRoID0gakMud2lkdGgoKTtcclxuICAgICAgICAgIGlmKHAueD5vZmZzZXQubGVmdCAmJiBwLng8b2Zmc2V0LmxlZnQrd2lkdGggJiYgcC55Pm9mZnNldC50b3AgJiYgcC55PG9mZnNldC50b3AraGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIG5vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgbmV4dCA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICBnZXRFbGVtZW50KHApIHtcclxuICAgIGNvbnN0IG9mZjAgPSB0aGlzLmpGcmFtZS5vZmZzZXQoKTtcclxuICAgIHRoaXMuakZyYW1lLm9mZnNldCh7bGVmdDogMC41KndpbmRvdy5pbm5lcldpZHRoLXAueCwgdG9wOiAwLjUqd2luZG93LmlubmVySGVpZ2h0LXAueX0pO1xyXG4gICAgbGV0IGVsZW1lbnQgPSB0aGlzLmRvYy5lbGVtZW50RnJvbVBvaW50KHAueCwgcC55KTtcclxuICAgIGlmKCFlbGVtZW50KSB7IC8vIGl0IGlzbid0IGEgam9rZSBpdCdzIElFXHJcbiAgICAgIGVsZW1lbnQgPSB0aGlzLmRvYy5lbGVtZW50RnJvbVBvaW50KHAueCwgcC55KTtcclxuICAgIH1cclxuICAgIHRoaXMuakZyYW1lLm9mZnNldChvZmYwKTtcclxuICAgIHJldHVybiBlbGVtZW50PyBlbGVtZW50OiB0aGlzLmVsZW1lbnRGcm9tUG9pbnQocCk7XHJcbiAgfVxyXG5cclxuICBzaW11bGF0ZShlLCBkb2MsIHgsIHkpIHtcclxuICAgIGNvbnN0IHAgPSB0aGlzLmNvbnZlcnRDb29yZHMoeCwgeSksXHJcbiAgICAgICAgICBlbGVtZW50ID0gZG9jPT09dGhpcy5kb2M/IHRoaXMuZ2V0RWxlbWVudChwKTogdW5kZWZpbmVkO1xyXG4gICAgbGV0IHRyaWdnZXIgPSBlbGVtZW50ICE9PSB1bmRlZmluZWQsIG5vdGlmeSA9IGZhbHNlO1xyXG5cclxuICAgIHN3aXRjaChlLnR5cGUpIHtcclxuICAgICAgY2FzZSAnbW91c2Vkb3duJzoge1xyXG4gICAgICAgIGlmKHRoaXMuY2FwRWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5kZWFjdGl2YXRlRWxlbWVudCh0aGlzLmNhcEVsZW1lbnQpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYXBFbGVtZW50ID0gZWxlbWVudDtcclxuICAgICAgICBpZih0aGlzLmNhcEVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMuYWN0aXZhdGVFbGVtZW50KHRoaXMuY2FwRWxlbWVudCk7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZXVwJzoge1xyXG4gICAgICAgIGlmKHRoaXMuY2FwRWxlbWVudCkge1xyXG4gICAgICAgICAgdGhpcy5kZWFjdGl2YXRlRWxlbWVudCh0aGlzLmNhcEVsZW1lbnQpO1xyXG4gICAgICAgICAgbm90aWZ5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50aW1lU3RhbXAgPSBlLnRpbWVTdGFtcDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdjbGljayc6IHtcclxuICAgICAgICB0cmlnZ2VyID0gZWxlbWVudCAmJiB0aGlzLmNhcEVsZW1lbnQgPT09IGVsZW1lbnQ7Ly8gJiYgZS50aW1lU3RhbXAgPT09IHRoaXMudGltZVN0YW1wO1xyXG4gICAgICAgIHRoaXMuY2FwRWxlbWVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtb3VzZWVudGVyJzpcclxuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcclxuICAgICAgY2FzZSAnbW91c2Vtb3ZlJzoge1xyXG4gICAgICAgIGxldCBsZWF2ZWQgPSBudWxsO1xyXG4gICAgICAgIGlmKHRoaXMuaG92RWxlbWVudCAhPT0gZWxlbWVudCAmJiB0aGlzLmhvdkVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KHRoaXMuaG92RWxlbWVudCwgZSwgcCwgJ21vdXNlb3V0Jywge3JlbGF0ZWRUYXJnZXQ6IGVsZW1lbnQ/IGVsZW1lbnQ6IG51bGx9KTtcclxuICAgICAgICAgIHRoaXMubGVhdmVFbGVtZW50KHRoaXMuaG92RWxlbWVudCk7XHJcbiAgICAgICAgICBsZWF2ZWQgPSB0aGlzLmhvdkVsZW1lbnQ7XHJcbiAgICAgICAgICB0aGlzLmhvdkVsZW1lbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZighdGhpcy5ob3ZFbGVtZW50ICYmIGVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KGVsZW1lbnQsIGUsIHAsICdtb3VzZW92ZXInLCB7cmVsYXRlZFRhcmdldDogbGVhdmVkfSk7XHJcbiAgICAgICAgICB0aGlzLmVudGVyRWxlbWVudChlbGVtZW50KTtcclxuICAgICAgICAgIHRoaXMuaG92RWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICBub3RpZnkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0cmlnZ2VyID0gZWxlbWVudCAmJiBlLnR5cGUgPT09ICdtb3VzZW1vdmUnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vdXNlbGVhdmUnOlxyXG4gICAgICBjYXNlICdtb3VzZW91dCc6IHtcclxuICAgICAgICBpZih0aGlzLmhvdkVsZW1lbnQpIHtcclxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KHRoaXMuaG92RWxlbWVudCwgZSwgcCwgJ21vdXNlb3V0Jywge3JlbGF0ZWRUYXJnZXQ6IGUucmVsYXRlZFRhcmdldH0pO1xyXG4gICAgICAgICAgdGhpcy5sZWF2ZUVsZW1lbnQodGhpcy5ob3ZFbGVtZW50KTtcclxuICAgICAgICAgIHRoaXMuaG92RWxlbWVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgIG5vdGlmeSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRyaWdnZXIgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYodHJpZ2dlcikge1xyXG4gICAgICB0aGlzLnRyaWdnZXJFdmVudChlbGVtZW50LCBlLCBwLCBlLnR5cGUpO1xyXG4gICAgfVxyXG4gICAgaWYobm90aWZ5KSB7XHJcbiAgICAgIHRoaXMubm90aWZ5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXREZWZhdWx0VW5kZWZpbmVkUHJvcGVydGllcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdjbGllbnRYJyxcclxuICAgICAgJ2NsaWVudFknLFxyXG4gICAgICAnb2Zmc2V0WCcsXHJcbiAgICAgICdvZmZzZXRZJyxcclxuICAgICAgJ3NjcmVlblgnLFxyXG4gICAgICAnc2NyZWVuWSdcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBnZXREZWZhdWx0UmVzZW5kUHJvcGVydGllcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgICdhbHRLZXknLFxyXG4gICAgICAnYnViYmxlcycsXHJcbiAgICAgICdidXR0b24nLFxyXG4gICAgICAnYnV0dG9ucycsXHJcbiAgICAgICdjYW5jZWxhYmxlJyxcclxuICAgICAgJ2NoYW5nZWRUb3VjaGVzJyxcclxuICAgICAgJ2NoYXInLFxyXG4gICAgICAnY2hhckNvZGUnLFxyXG4gICAgICAnY3RybEtleScsXHJcbiAgICAgICdkYXRhJyxcclxuICAgICAgJ2RldGFpbCcsXHJcbiAgICAgICdldmVudFBoYXNlJyxcclxuICAgICAgJ2lzRGVmYXVsdFByZXZlbnRlZCcsXHJcbiAgICAgICdrZXknLFxyXG4gICAgICAna2V5Q29kZScsXHJcbiAgICAgICdtZXRhS2V5JyxcclxuICAgICAgJ3BvaW50ZXJJZCcsXHJcbiAgICAgICdwb2ludGVyVHlwZScsXHJcbiAgICAgICdzaGlmdEtleScsXHJcbiAgICAgICd0YXJnZXRUb3VjaGVzJyxcclxuICAgICAgJ3RvdWNoZXMnLFxyXG4gICAgICAnd2hpY2gnXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8qXHJcbmFsdEtleSxcclxuYnViYmxlcyxcclxuYnV0dG9uLFxyXG5idXR0b25zLFxyXG5jYW5jZWxhYmxlLFxyXG5jaGFuZ2VkVG91Y2hlcyxcclxuY2hhcixcclxuY2hhckNvZGUsXHJcbmNsaWVudFgsXHJcbmNsaWVudFksXHJcbmN0cmxLZXksXHJcbmN1cnJlbnRUYXJnZXQsXHJcbmRhdGEsXHJcbmRlbGVnYXRlVGFyZ2V0LFxyXG5kZXRhaWwsXHJcbmV2ZW50UGhhc2UsXHJcbmhhbmRsZU9iaixcclxuaXNEZWZhdWx0UHJldmVudGVkLFxyXG5rZXksXHJcbmtleUNvZGUsXHJcbm1ldGFLZXksXHJcbm9mZnNldFgsXHJcbm9mZnNldFksXHJcbm9yaWdpbmFsRXZlbnQsXHJcbnBhZ2VYLFxyXG5wYWdlWSxcclxucG9pbnRlcklkLFxyXG5wb2ludGVyVHlwZSxcclxucmVsYXRlZFRhcmdldCxcclxuc2NyZWVuWCxcclxuc2NyZWVuWSxcclxuc2hpZnRLZXksXHJcbnRhcmdldCxcclxudGFyZ2V0VG91Y2hlcyxcclxudGltZVN0YW1wLFxyXG50b0VsZW1lbnQsXHJcbnRvdWNoZXMsXHJcbnR5cGUsXHJcbnZpZXcsXHJcbndoaWNoXHJcbiovXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RvY01vdXNlU2ltdWxhdG9yLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9tMkltYWdlIHtcblxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgY2FjaGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB0aGlzLndpbmRvdyA9IHduZDtcbiAgICB0aGlzLmRvY3VtZW50ID0gZG9jO1xuICAgIHRoaXMuY2FjaGUgPSBjYWNoZTtcblxuICAgIGNvbnN0IHV0aWwgPSBuZXdVdGlsKCk7XG4gICAgY29uc3QgaW5saW5lciA9IG5ld0lubGluZXIoKTtcbiAgICBjb25zdCBmb250RmFjZXMgPSBuZXdGb250RmFjZXMoKTtcbiAgICBjb25zdCBpbWFnZXMgPSBuZXdJbWFnZXMoKTtcblxuICAgIHRoaXMudG9TdmcgPSB0b1N2ZztcbiAgICB0aGlzLnRvUG5nID0gdG9Qbmc7XG4gICAgdGhpcy50b0pwZWcgPSB0b0pwZWc7XG4gICAgdGhpcy50b0Jsb2IgPSB0b0Jsb2I7XG4gICAgdGhpcy50b1BpeGVsRGF0YSA9IHRvUGl4ZWxEYXRhO1xuICAgIHRoaXMuaW1wbCA9IHtcbiAgICAgICAgICAgICAgICAgIGZvbnRGYWNlczogZm9udEZhY2VzLFxuICAgICAgICAgICAgICAgICAgaW1hZ2VzOiBpbWFnZXMsXG4gICAgICAgICAgICAgICAgICB1dGlsOiB1dGlsLFxuICAgICAgICAgICAgICAgICAgaW5saW5lcjogaW5saW5lclxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmZpbHRlciAtIFNob3VsZCByZXR1cm4gdHJ1ZSBpZiBwYXNzZWQgbm9kZSBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIG91dHB1dFxuICAgICAqICAgICAgICAgIChleGNsdWRpbmcgbm9kZSBtZWFucyBleGNsdWRpbmcgaXQncyBjaGlsZHJlbiBhcyB3ZWxsKS4gTm90IGNhbGxlZCBvbiB0aGUgcm9vdCBub2RlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmJnY29sb3IgLSBjb2xvciBmb3IgdGhlIGJhY2tncm91bmQsIGFueSB2YWxpZCBDU1MgY29sb3IgdmFsdWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMud2lkdGggLSB3aWR0aCB0byBiZSBhcHBsaWVkIHRvIG5vZGUgYmVmb3JlIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5oZWlnaHQgLSBoZWlnaHQgdG8gYmUgYXBwbGllZCB0byBub2RlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuc3R5bGUgLSBhbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyB0byBiZSBjb3BpZWQgdG8gbm9kZSdzIHN0eWxlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucXVhbGl0eSAtIGEgTnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmRpY2F0aW5nIGltYWdlIHF1YWxpdHkgKGFwcGxpY2FibGUgdG8gSlBFRyBvbmx5KSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0cyB0byAxLjAuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFNWRyBpbWFnZSBkYXRhIFVSTFxuICAgICAqICovXG5cbiAgICBmdW5jdGlvbiB0b1N2Zyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZU5vZGUobm9kZSwgb3B0aW9ucy5maWx0ZXIsIHRydWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGVtYmVkRm9udHMpXG4gICAgICAgICAgICAudGhlbihpbmxpbmVJbWFnZXMpXG4gICAgICAgICAgICAudGhlbihhcHBseU9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZVN2Z0RhdGFVcmkoY2xvbmUsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMud2lkdGggfHwgdXRpbC53aWR0aChub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5oZWlnaHQgfHwgdXRpbC5oZWlnaHQobm9kZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlPcHRpb25zKGNsb25lKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5iZ2NvbG9yKSBjbG9uZS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBvcHRpb25zLmJnY29sb3I7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLndpZHRoKSBjbG9uZS5zdHlsZS53aWR0aCA9IG9wdGlvbnMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVpZ2h0KSBjbG9uZS5zdHlsZS5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCArICdweCc7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN0eWxlKVxuICAgICAgICAgICAgICAgIHNlbGYud2luZG93Lk9iamVjdC5rZXlzKG9wdGlvbnMuc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnN0eWxlW3Byb3BlcnR5XSA9IG9wdGlvbnMuc3R5bGVbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBVaW50OEFycmF5IGNvbnRhaW5pbmcgUkdCQSBwaXhlbCBkYXRhLlxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9QaXhlbERhdGEobm9kZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zIHx8IHt9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5nZXRJbWFnZURhdGEoXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIHV0aWwud2lkdGgobm9kZSksXG4gICAgICAgICAgICAgICAgICAgIHV0aWwuaGVpZ2h0KG5vZGUpXG4gICAgICAgICAgICAgICAgKS5kYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIERPTSBOb2RlIG9iamVjdCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLCBAc2VlIHtAbGluayB0b1N2Z31cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGEgUE5HIGltYWdlIGRhdGEgVVJMXG4gICAgICogKi9cbiAgICBmdW5jdGlvbiB0b1BuZyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBkcmF3KG5vZGUsIG9wdGlvbnMgfHwge30pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucywgQHNlZSB7QGxpbmsgdG9Tdmd9XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIEpQRUcgaW1hZ2UgZGF0YSBVUkxcbiAgICAgKiAqL1xuICAgIGZ1bmN0aW9uIHRvSnBlZyhub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNhbnZhcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9qcGVnJywgb3B0aW9ucy5xdWFsaXR5IHx8IDEuMCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBQTkcgaW1hZ2UgYmxvYlxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9CbG9iKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRyYXcobm9kZSwgb3B0aW9ucyB8fCB7fSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuY2FudmFzVG9CbG9iKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3KGRvbU5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRvU3ZnKGRvbU5vZGUsIG9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbih1dGlsLm1ha2VJbWFnZSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuZGVsYXkoMTAwKSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IG5ld0NhbnZhcyhkb21Ob2RlKTtcbiAgICAgICAgICAgICAgICBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBuZXdDYW52YXMoZG9tTm9kZSkge1xuICAgICAgICAgICAgY29uc3QgY2FudmFzID0gc2VsZi5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgdXRpbC53aWR0aChkb21Ob2RlKTtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCB1dGlsLmhlaWdodChkb21Ob2RlKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYmdjb2xvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJnY29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjYW52YXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZU5vZGUobm9kZSwgZmlsdGVyLCByb290KSB7XG4gICAgICAgIGlmICghcm9vdCAmJiBmaWx0ZXIgJiYgIWZpbHRlcihub2RlKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSlcbiAgICAgICAgICAgIC50aGVuKG1ha2VOb2RlQ29weSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZUNoaWxkcmVuKG5vZGUsIGNsb25lLCBmaWx0ZXIpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzQ2xvbmUobm9kZSwgY2xvbmUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZU5vZGVDb3B5KG5vZGUpIHtcbiAgICAgICAgICAgIGlmICh1dGlsLmlzQ2FudmFzKG5vZGUpKSByZXR1cm4gdXRpbC5tYWtlSW1hZ2Uobm9kZS50b0RhdGFVUkwoKSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xvbmVDaGlsZHJlbihvcmlnaW5hbCwgY2xvbmUsIGZpbHRlcikge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBvcmlnaW5hbC5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjbG9uZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbG9uZUNoaWxkcmVuSW5PcmRlcihjbG9uZSwgdXRpbC5hc0FycmF5KGNoaWxkcmVuKSwgZmlsdGVyKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9uZUNoaWxkcmVuSW5PcmRlcihwYXJlbnQsIGNoaWxkcmVuLCBmaWx0ZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvbmUgPSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lTm9kZShjaGlsZCwgZmlsdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2hpbGRDbG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZENsb25lKSBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGRDbG9uZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NDbG9uZShvcmlnaW5hbCwgY2xvbmUpIHtcbiAgICAgICAgICAgIGlmICghdXRpbC5pc0VsZW1lbnQoY2xvbmUpKSByZXR1cm4gY2xvbmU7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGNsb25lU3R5bGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2xvbmVQc2V1ZG9FbGVtZW50cylcbiAgICAgICAgICAgICAgICAudGhlbihjb3B5VXNlcklucHV0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZpeFN2ZylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVTdHlsZSgpIHtcbiAgICAgICAgICAgICAgICBjb3B5U3R5bGUoc2VsZi53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvcmlnaW5hbCksIGNsb25lLnN0eWxlKTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlTdHlsZShzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmNzc1RleHQpIHRhcmdldC5jc3NUZXh0ID0gc291cmNlLmNzc1RleHQ7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgY29weVByb3BlcnRpZXMoc291cmNlLCB0YXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlQcm9wZXJ0aWVzKHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmFzQXJyYXkoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnNldFByb3BlcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmdldFByb3BlcnR5UHJpb3JpdHkobmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lUHNldWRvRWxlbWVudHMoKSB7XG4gICAgICAgICAgICAgICAgWyc6YmVmb3JlJywgJzphZnRlciddLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmVQc2V1ZG9FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVQc2V1ZG9FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBzZWxmLndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG9yaWdpbmFsLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2NvbnRlbnQnKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudCA9PT0gJycgfHwgY29udGVudCA9PT0gJ25vbmUnKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gdXRpbC51aWQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuY2xhc3NOYW1lID0gY2xvbmUuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZUVsZW1lbnQgPSBzZWxmLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChmb3JtYXRQc2V1ZG9FbGVtZW50U3R5bGUoY2xhc3NOYW1lLCBlbGVtZW50LCBzdHlsZSkpO1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdFBzZXVkb0VsZW1lbnRTdHlsZShjbGFzc05hbWUsIGVsZW1lbnQsIHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9ICcuJyArIGNsYXNzTmFtZSArICc6JyArIGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCA/IGZvcm1hdENzc1RleHQoc3R5bGUpIDogZm9ybWF0Q3NzUHJvcGVydGllcyhzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzZWxlY3RvciArICd7JyArIGNzc1RleHQgKyAnfScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRDc3NUZXh0KHN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2NvbnRlbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGUuY3NzVGV4dCArICcgY29udGVudDogJyArIGNvbnRlbnQgKyAnOyc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdENzc1Byb3BlcnRpZXMoc3R5bGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLmFzQXJyYXkoc3R5bGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZm9ybWF0UHJvcGVydHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCc7ICcpICsgJzsnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmFtZSArICc6ICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShuYW1lKSA/ICcgIWltcG9ydGFudCcgOiAnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb3B5VXNlcklucHV0KCkge1xuICAgICAgICAgICAgICAgIGlmICh1dGlsLmlzVGV4dEFyZWEob3JpZ2luYWwpKSBjbG9uZS5pbm5lckhUTUwgPSBvcmlnaW5hbC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0lucHV0KG9yaWdpbmFsKSkgY2xvbmUuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgb3JpZ2luYWwudmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBmaXhTdmcoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF1dGlsLmlzU1ZHKGNsb25lKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1NWR1JlY3QoY2xvbmUpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgWyd3aWR0aCcsICdoZWlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjbG9uZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGNsb25lLnN0eWxlLnNldFByb3BlcnR5KGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1iZWRGb250cyhub2RlKSB7XG4gICAgICAgIHJldHVybiBmb250RmFjZXMucmVzb2x2ZUFsbCgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY3NzVGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlTm9kZSA9IHNlbGYuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKHN0eWxlTm9kZSk7XG4gICAgICAgICAgICAgICAgc3R5bGVOb2RlLmFwcGVuZENoaWxkKHNlbGYuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzVGV4dCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5saW5lSW1hZ2VzKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGltYWdlcy5pbmxpbmVBbGwobm9kZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VTdmdEYXRhVXJpKG5vZGUsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc2VsZi53aW5kb3cuWE1MU2VyaWFsaXplcigpLnNlcmlhbGl6ZVRvU3RyaW5nKG5vZGUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuZXNjYXBlWGh0bWwpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoeGh0bWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWydkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCwnLFxuICAgICAgICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIicsIHdpZHRoLCAnXCIgaGVpZ2h0PVwiJywgaGVpZ2h0LCAnXCI+JyxcbiAgICAgICAgICAgICAgICAgICc8Zm9yZWlnbk9iamVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiPicsIHhodG1sLCAnPC9mb3JlaWduT2JqZWN0PicsXG4gICAgICAgICAgICAgICAgJzwvc3ZnPiddLmpvaW4oJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3VXRpbCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVzY2FwZTogZXNjYXBlLFxuICAgICAgICAgICAgcGFyc2VFeHRlbnNpb246IHBhcnNlRXh0ZW5zaW9uLFxuICAgICAgICAgICAgbWltZVR5cGU6IG1pbWVUeXBlLFxuICAgICAgICAgICAgZGF0YUFzVXJsOiBkYXRhQXNVcmwsXG4gICAgICAgICAgICBpc0RhdGFVcmw6IGlzRGF0YVVybCxcbiAgICAgICAgICAgIGNhbnZhc1RvQmxvYjogY2FudmFzVG9CbG9iLFxuICAgICAgICAgICAgcmVzb2x2ZVVybDogcmVzb2x2ZVVybCxcbiAgICAgICAgICAgIGdldEFuZEVuY29kZTogZ2V0QW5kRW5jb2RlLFxuICAgICAgICAgICAgdWlkOiB1aWQoKSxcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgICAgIGFzQXJyYXk6IGFzQXJyYXksXG4gICAgICAgICAgICBlc2NhcGVYaHRtbDogZXNjYXBlWGh0bWwsXG4gICAgICAgICAgICBtYWtlSW1hZ2U6IG1ha2VJbWFnZSxcbiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuXG4gICAgICAgICAgICBpc0VsZW1lbnQsXG4gICAgICAgICAgICBpc0NhbnZhcyxcbiAgICAgICAgICAgIGlzVGV4dEFyZWEsXG4gICAgICAgICAgICBpc0lucHV0LFxuICAgICAgICAgICAgaXNTVkcsXG4gICAgICAgICAgICBpc1NWR1JlY3QsXG4gICAgICAgICAgICBpc0ltYWdlXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gbWltZXMoKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogT25seSBXT0ZGIGFuZCBFT1QgbWltZSB0eXBlcyBmb3IgZm9udHMgYXJlICdyZWFsJ1xuICAgICAgICAgICAgICogc2VlIGh0dHA6Ly93d3cuaWFuYS5vcmcvYXNzaWdubWVudHMvbWVkaWEtdHlwZXMvbWVkaWEtdHlwZXMueGh0bWxcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgV09GRiA9ICdhcHBsaWNhdGlvbi9mb250LXdvZmYnO1xuICAgICAgICAgICAgY29uc3QgSlBFRyA9ICdpbWFnZS9qcGVnJztcblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAnd29mZic6IFdPRkYsXG4gICAgICAgICAgICAgICAgJ3dvZmYyJzogV09GRixcbiAgICAgICAgICAgICAgICAndHRmJzogJ2FwcGxpY2F0aW9uL2ZvbnQtdHJ1ZXR5cGUnLFxuICAgICAgICAgICAgICAgICdlb3QnOiAnYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3QnLFxuICAgICAgICAgICAgICAgICdwbmcnOiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgICAgICAgICAnanBnJzogSlBFRyxcbiAgICAgICAgICAgICAgICAnanBlZyc6IEpQRUcsXG4gICAgICAgICAgICAgICAgJ2dpZic6ICdpbWFnZS9naWYnLFxuICAgICAgICAgICAgICAgICd0aWZmJzogJ2ltYWdlL3RpZmYnLFxuICAgICAgICAgICAgICAgICdzdmcnOiAnaW1hZ2Uvc3ZnK3htbCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYXJzZUV4dGVuc2lvbih1cmwpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gL1xcLihbXlxcLlxcL10qPykkL2cuZXhlYyh1cmwpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSByZXR1cm4gbWF0Y2hbMV07XG4gICAgICAgICAgICBlbHNlIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1pbWVUeXBlKHVybCkge1xuICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9uID0gcGFyc2VFeHRlbnNpb24odXJsKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1pbWVzKClbZXh0ZW5zaW9uXSB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzRGF0YVVybCh1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmwuc2VhcmNoKC9eKGRhdGE6KS8pICE9PSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvQmxvYihjYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpbmFyeVN0cmluZyA9IHNlbGYud2luZG93LmF0b2IoY2FudmFzLnRvRGF0YVVSTCgpLnNwbGl0KCcsJylbMV0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGJpbmFyeVN0cmluZy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgY29uc3QgYmluYXJ5QXJyYXkgPSBuZXcgc2VsZi53aW5kb3cuVWludDhBcnJheShsZW5ndGgpO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgYmluYXJ5QXJyYXlbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IHNlbGYud2luZG93LkJsb2IoW2JpbmFyeUFycmF5XSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaW1hZ2UvcG5nJ1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2FudmFzVG9CbG9iKGNhbnZhcykge1xuICAgICAgICAgICAgaWYgKGNhbnZhcy50b0Jsb2IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbnZhcy50b0Jsb2IocmVzb2x2ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0b0Jsb2IoY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVVcmwodXJsLCBiYXNlVXJsKSB7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBzZWxmLmRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgpO1xuICAgICAgICAgICAgY29uc3QgYmFzZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdiYXNlJyk7XG4gICAgICAgICAgICBkb2MuaGVhZC5hcHBlbmRDaGlsZChiYXNlKTtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBkb2MuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgICBiYXNlLmhyZWYgPSBiYXNlVXJsO1xuICAgICAgICAgICAgYS5ocmVmID0gdXJsO1xuICAgICAgICAgICAgcmV0dXJuIGEuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVpZCgpIHtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1JyArIGZvdXJSYW5kb21DaGFycygpICsgaW5kZXgrKztcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvdXJSYW5kb21DaGFycygpIHtcbiAgICAgICAgICAgICAgICAgICAgLyogc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzYyNDg3MjIvMjUxOTM3MyAqL1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCcwMDAwJyArIChzZWxmLndpbmRvdy5NYXRoLnJhbmRvbSgpICogc2VsZi53aW5kb3cuTWF0aC5wb3coMzYsIDQpIDw8IDApLnRvU3RyaW5nKDM2KSkuc2xpY2UoLTQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYWtlSW1hZ2UodXJpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IHNlbGYud2luZG93LkltYWdlKCk7XG4gICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdXJpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRBbmRFbmNvZGUodXJsKSB7XG4gICAgICAgICAgbGV0IGRhdGEgPSBzZWxmLmNhY2hlLmdldCh1cmwpO1xuICAgICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICAgIGlmKGRhdGEuY29udGVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSk9PiB7XG4gICAgICAgICAgICAgICAgaWYoZGF0YS5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGF0YS5wZW5kaW5ncy5wdXNoKHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGF0YSA9IHNlbGYuY2FjaGUucHV0KHVybCwge3BlbmRpbmdzOiBbXX0pO1xuXG4gICAgICAgICAgICBjb25zdCBUSU1FT1VUID0gMzAwMDA7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgc2VsZi53aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZG9uZTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9udGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC50aW1lb3V0ID0gVElNRU9VVDtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhaWwoJ2Nhbm5vdCBmZXRjaCByZXNvdXJjZTogJyArIHVybCArICcsIHN0YXR1czogJyArIHJlcXVlc3Quc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZXIgPSBuZXcgc2VsZi53aW5kb3cuRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29udGVudCA9IGVuY29kZXIucmVzdWx0LnNwbGl0KC8sLylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IobGV0IHJlc29sdmUgb2YgZGF0YS5wZW5kaW5ncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBlbmRpbmdzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGEuY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZXIucmVhZEFzRGF0YVVSTChyZXF1ZXN0LnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0aW1lb3V0KCkge1xuICAgICAgICAgICAgICAgICAgICBmYWlsKCd0aW1lb3V0IG9mICcgKyBUSU1FT1VUICsgJ21zIG9jY3VyZWQgd2hpbGUgZmV0Y2hpbmcgcmVzb3VyY2U6ICcgKyB1cmwpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZhaWwobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkYXRhQXNVcmwoY29udGVudCwgdHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIFsnZGF0YTonLHR5cGUsJztiYXNlNjQsJyxjb250ZW50XS5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFsuKis/XiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkZWxheShtcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIG1zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc0FycmF5KGFycmF5TGlrZSkge1xuICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5TGlrZS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBhcnJheS5wdXNoKGFycmF5TGlrZVtpXSk7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBlc2NhcGVYaHRtbChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKCN8XFxuKS9nLCAoYyk9PiBjPT09JyMnPyAnJTIzJzogJyUwQScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gd2lkdGgobm9kZSkge1xuICAgICAgICAgICAgY29uc3QgbGVmdEJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItbGVmdC13aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgcmlnaHRCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXJpZ2h0LXdpZHRoJyk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zY3JvbGxXaWR0aCArIGxlZnRCb3JkZXIgKyByaWdodEJvcmRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhlaWdodChub2RlKSB7XG4gICAgICAgICAgICBjb25zdCB0b3BCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXRvcC13aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgYm90dG9tQm9yZGVyID0gcHgobm9kZSwgJ2JvcmRlci1ib3R0b20td2lkdGgnKTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnNjcm9sbEhlaWdodCArIHRvcEJvcmRlciArIGJvdHRvbUJvcmRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHB4KG5vZGUsIHN0eWxlUHJvcGVydHkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gc2VsZi53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcGVydHkpO1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0NhbnZhcyhub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBzZWxmLndpbmRvdy5IVE1MQ2FudmFzRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzVGV4dEFyZWEobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzSW5wdXQobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzU1ZHKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LlNWR0VsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1NWR1JlY3Qobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlIGluc3RhbmNlb2Ygc2VsZi53aW5kb3cuU1ZHUmVjdEVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc0ltYWdlKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIHNlbGYud2luZG93LkhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdJbmxpbmVyKCkge1xuICAgICAgICBjb25zdCBVUkxfUkVHRVggPSAvdXJsXFwoWydcIl0/KFteJ1wiXSs/KVsnXCJdP1xcKS9nO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmxpbmVBbGw6IGlubGluZUFsbCxcbiAgICAgICAgICAgIHNob3VsZFByb2Nlc3M6IHNob3VsZFByb2Nlc3MsXG4gICAgICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICAgICAgcmVhZFVybHM6IHJlYWRVcmxzLFxuICAgICAgICAgICAgICAgIGlubGluZTogaW5saW5lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gc2hvdWxkUHJvY2VzcyhzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcuc2VhcmNoKFVSTF9SRUdFWCkgIT09IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZFVybHMoc3RyaW5nKSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGxldCBtYXRjaDtcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBVUkxfUkVHRVguZXhlYyhzdHJpbmcpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1hdGNoWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXV0aWwuaXNEYXRhVXJsKHVybCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlubGluZShzdHJpbmcsIHVybCwgYmFzZVVybCwgZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVybClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlVXJsID8gdXRpbC5yZXNvbHZlVXJsKHVybCwgYmFzZVVybCkgOiB1cmw7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihnZXQgfHwgdXRpbC5nZXRBbmRFbmNvZGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuZGF0YUFzVXJsKGRhdGEsIHV0aWwubWltZVR5cGUodXJsKSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UodXJsQXNSZWdleCh1cmwpLCBbJyQxJywgZGF0YVVybCwgJyQzJ10uam9pbignJykpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cmxBc1JlZ2V4KHVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgc2VsZi53aW5kb3cuUmVnRXhwKFsnKHVybFxcXFwoW1xcJ1wiXT8pKCcsIHV0aWwuZXNjYXBlKHVybCksICcpKFtcXCdcIl0/XFxcXCkpJ10uam9pbignJyksICdnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmxpbmVBbGwoc3RyaW5nLCBiYXNlVXJsLCBnZXQpIHtcbiAgICAgICAgICAgIGlmIChub3RoaW5nVG9JbmxpbmUoKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdHJpbmcpO1xuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0cmluZylcbiAgICAgICAgICAgICAgICAudGhlbihyZWFkVXJscylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXJscykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZG9uZSA9IFByb21pc2UucmVzb2x2ZShzdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICB1cmxzLmZvckVhY2goZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IGRvbmUudGhlbihmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZShzdHJpbmcsIHVybCwgYmFzZVVybCwgZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vdGhpbmdUb0lubGluZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXNob3VsZFByb2Nlc3Moc3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld0ZvbnRGYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc29sdmVBbGw6IHJlc29sdmVBbGwsXG4gICAgICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICAgICAgcmVhZEFsbDogcmVhZEFsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZEFsbChzZWxmLmRvY3VtZW50KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh3ZWJGb250cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWJGb250cy5tYXAoZnVuY3Rpb24gKHdlYkZvbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2ViRm9udC5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNzc1N0cmluZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNzc1N0cmluZ3Muam9pbignXFxuJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkQWxsKCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1dGlsLmFzQXJyYXkoc2VsZi5kb2N1bWVudC5zdHlsZVNoZWV0cykpXG4gICAgICAgICAgICAgICAgLnRoZW4oZ2V0Q3NzUnVsZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oc2VsZWN0V2ViRm9udFJ1bGVzKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWxlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZXMubWFwKG5ld1dlYkZvbnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBzZWxlY3RXZWJGb250UnVsZXMoY3NzUnVsZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3NzUnVsZXNcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bGUudHlwZSA9PT0gQ1NTUnVsZS5GT05UX0ZBQ0VfUlVMRTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZXIuc2hvdWxkUHJvY2VzcyhydWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3NyYycpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldENzc1J1bGVzKHN0eWxlU2hlZXRzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3NzUnVsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBzdHlsZVNoZWV0cy5mb3JFYWNoKGZ1bmN0aW9uIChzaGVldCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hc0FycmF5KHNoZWV0LmNzc1J1bGVzIHx8IFtdKS5mb3JFYWNoKGNzc1J1bGVzLnB1c2guYmluZChjc3NSdWxlcykpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igd2hpbGUgcmVhZGluZyBDU1MgcnVsZXMgZnJvbSAnICsgc2hlZXQuaHJlZiwgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3NSdWxlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gbmV3V2ViRm9udCh3ZWJGb250UnVsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlVXJsID0gKHdlYkZvbnRSdWxlLnBhcmVudFN0eWxlU2hlZXQgfHwge30pLmhyZWY7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lci5pbmxpbmVBbGwod2ViRm9udFJ1bGUuY3NzVGV4dCwgYmFzZVVybCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNyYzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdlYkZvbnRSdWxlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3NyYycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld0ltYWdlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlubGluZUFsbDogaW5saW5lQWxsLFxuICAgICAgICAgICAgaW1wbDoge1xuICAgICAgICAgICAgICAgIG5ld0ltYWdlOiBuZXdJbWFnZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIG5ld0ltYWdlKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaW5saW5lOiBpbmxpbmVcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlubGluZShnZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAodXRpbC5pc0RhdGFVcmwoZWxlbWVudC5zcmMpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGVsZW1lbnQuc3JjKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihnZXQgfHwgdXRpbC5nZXRBbmRFbmNvZGUpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5kYXRhQXNVcmwoZGF0YSwgdXRpbC5taW1lVHlwZShlbGVtZW50LnNyYykpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm9ubG9hZCA9IHJlc29sdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbmVycm9yID0gcmVqZWN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3JjID0gZGF0YVVybDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlubGluZUFsbChub2RlKSB7XG4gICAgICAgICAgICBpZiAoIXV0aWwuaXNFbGVtZW50KG5vZGUpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5saW5lQmFja2dyb3VuZChub2RlKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNJbWFnZShub2RlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdJbWFnZShub2RlKS5pbmxpbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuYXNBcnJheShub2RlLmNoaWxkTm9kZXMpLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZUFsbChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGlubGluZUJhY2tncm91bmQobm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJhY2tncm91bmQgPSBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQnKTtcblxuICAgICAgICAgICAgICAgIGlmICghYmFja2dyb3VuZCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmVyLmlubGluZUFsbChiYWNrZ3JvdW5kKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaW5saW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2JhY2tncm91bmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Eb20ySW1hZ2UuanMiLCJpbXBvcnQgeyQsIFRIUkVFfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERyYWcge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgdmlzdWFsV29ybGQpIHtcclxuICAgIHRoaXMud25kID0gd25kO1xyXG4gICAgdGhpcy5kb2MgPSBkb2M7XHJcbiAgICB0aGlzLnZpc3VhbCA9IHZpc3VhbFdvcmxkO1xyXG4gICAgdGhpcy5jb29yZHMgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xyXG4gICAgdGhpcy5pbnRlcnNlY3Rpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgdGhpcy5yYXljYXN0ZXIgPSB0aGlzLnZpc3VhbC5yYXljYXN0ZXI7XHJcbiAgICB0aGlzLmNhbWVyYSA9IHRoaXMudmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMucGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKTtcclxuICAgIHRoaXMudGhyZWVzID0gW107XHJcbiAgICB0aGlzLnNlbGVjdGVkID0gbnVsbDtcclxuICAgIHRoaXMuZW5hYmxlZCA9IHRydWU7XHJcbiAgICB0aGlzLmNvbnRyb2xzU3RhdGUgPSB0aGlzLnZpc3VhbC5nZXRDb250cm9sc1N0YXRlKCk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gdGhpcy52aXN1YWwuZWxlbWVudDtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG9uTW91c2VNb3ZlOiB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyksXHJcbiAgICAgIG9uTW91c2VEb3duOiB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyksXHJcbiAgICAgIG9uTW91c2VVcDogdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuICAgICQodGhpcy5lbGVtZW50KS5vbignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5vbk1vdXNlTW92ZSk7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub24oJ21vdXNlZG93bicsIHRoaXMuYmluZHMub25Nb3VzZURvd24pO1xyXG4gICAgJCh0aGlzLmRvYykub24oJ21vdXNldXAnLCB0aGlzLmJpbmRzLm9uTW91c2VVcCk7XHJcbiAgfVxyXG5cclxuICBhZGRUaHJlZSh0aHJlZSkge1xyXG4gICAgdGhpcy50aHJlZXMucHVzaCh0aHJlZSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVUaHJlZSh0aHJlZSkge1xyXG4gICAgY29uc3QgaSA9IHRoaXMudGhyZWVzLmluZGV4T2YodGhyZWUpO1xyXG4gICAgaWYofmkpIHtcclxuICAgICAgdGhpcy50aHJlZXMuc3BsaWNlKGksIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25QaWNrQ2FsbGJhY2soKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIG9uRHJhZ0NhbGxiYWNrKCkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBvblJlbGVhc2VDYWxsYmFjaygpIHtcclxuXHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5vbk1vdXNlTW92ZSk7XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub2ZmKCdtb3VzZWRvd24nLCB0aGlzLmJpbmRzLm9uTW91c2VEb3duKTtcclxuICAgICQodGhpcy5kb2MpLm9mZignbW91c2V1cCcsIHRoaXMuYmluZHMub25Nb3VzZVVwKTtcclxuICB9XHJcblxyXG4gIHNldENvb3Jkc0Zyb21FdmVudChlKSB7XHJcbiAgICBjb25zdCBqRWxlbWVudCA9ICQodGhpcy5lbGVtZW50KTtcclxuICAgIGNvbnN0IG9mZnNldCA9IGpFbGVtZW50Lm9mZnNldCgpO1xyXG4gICAgdGhpcy5jb29yZHMueCA9ICgoZS5wYWdlWC1vZmZzZXQubGVmdCkvakVsZW1lbnQud2lkdGgoKSkqMi0xO1xyXG4gICAgdGhpcy5jb29yZHMueSA9IC0oKGUucGFnZVktb2Zmc2V0LnRvcCkvakVsZW1lbnQuaGVpZ2h0KCkpKjIrMTtcclxuICAgIHJldHVybiB0aGlzLmNvb3JkcztcclxuICB9XHJcblxyXG4gIG9uTW91c2VEb3duKGUpIHtcclxuICAgIGlmKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcclxuXHJcbiAgICBpZih0aGlzLnNlbGVjdGVkKSB0aGlzLm9uTW91c2VVcChlKTtcclxuXHJcbiAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICBcdHRoaXMucmF5Y2FzdGVyLnNldEZyb21DYW1lcmEodGhpcy5jb29yZHMsIHRoaXMuY2FtZXJhKTtcclxuXHJcbiAgXHRjb25zdCBpbnRlcnNlY3RzID0gdGhpcy5yYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyh0aGlzLnRocmVlcyk7XHJcbiAgXHRpZihpbnRlcnNlY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBpbnRlcnNlY3RzWzBdLm9iamVjdDtcclxuICAgICAgaWYoIXRoaXMub25QaWNrQ2FsbGJhY2soaW50ZXJzZWN0c1swXSkpIHJldHVybjtcclxuICAgICAgY29uc3QgdiA9IGludGVyc2VjdHNbMF0ucG9pbnQuY2xvbmUoKTtcclxuICAgICAgdGhpcy5kaXN0YW5jZSA9IHYuc3ViKHRoaXMucmF5Y2FzdGVyLnJheS5vcmlnaW4pLmxlbmd0aCgpOztcclxuICAgICAgdGhpcy5jb250cm9sc1N0YXRlID0gdGhpcy52aXN1YWwuZ2V0Q29udHJvbHNTdGF0ZSgpO1xyXG4gICAgICB0aGlzLnZpc3VhbC5zZXRDb250cm9sc1N0YXRlKGZhbHNlKTtcclxuICAgICAgdGhpcy5wbGFuZS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCh0aGlzLnZpc3VhbC5jYW1lcmEuZ2V0V29ybGREaXJlY3Rpb24odGhpcy5wbGFuZS5ub3JtYWwpLCBpbnRlcnNlY3RzWzBdLnBvaW50KTtcclxuICAgICAgLy90aGlzLnBsYW5lLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KHRoaXMucGxhbmUubm9ybWFsLnNldCgwLDAsMSksIG5ldyBUSFJFRS5WZWN0b3IzKDAsMCwwKSk7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzZWxlY3RlZDtcclxuICBcdH1cclxuXHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTW92ZShlKSB7XHJcbiAgICBpZighdGhpcy5lbmFibGVkKSByZXR1cm47XHJcbiAgXHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIFx0aWYodGhpcy5zZWxlY3RlZCkge1xyXG4gICAgICB0aGlzLnNldENvb3Jkc0Zyb21FdmVudChlKTtcclxuICAgIFx0dGhpcy5yYXljYXN0ZXIuc2V0RnJvbUNhbWVyYSh0aGlzLmNvb3JkcywgdGhpcy5jYW1lcmEpO1xyXG5cdCAgICBpZih0aGlzLnJheWNhc3Rlci5yYXkuaW50ZXJzZWN0UGxhbmUodGhpcy5wbGFuZSwgdGhpcy5pbnRlcnNlY3Rpb24pKSB7XHJcbiAgICAgICAgaWYoIXRoaXMub25EcmFnQ2FsbGJhY2sodGhpcy5pbnRlcnNlY3Rpb24pKSB0aGlzLm9uTW91c2VVcChlKTtcclxuICAgICAgfS8qKi9cclxuICAgICAgLy90aGlzLmludGVyc2VjdGlvbi5jb3B5KHRoaXMucmF5Y2FzdGVyLnJheS5kaXJlY3Rpb24pLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKHRoaXMuZGlzdGFuY2UpLmFkZCh0aGlzLnJheWNhc3Rlci5yYXkub3JpZ2luKTsvKiovXHJcbiAgICAgIC8vaWYoIXRoaXMub25EcmFnQ2FsbGJhY2sodGhpcy5zZWxlY3RlZCwgdGhpcy5pbnRlcnNlY3Rpb24pKSB0aGlzLm9uTW91c2VVcChlKTtcclxuICBcdH1cclxuICB9XHJcblxyXG4gIG9uTW91c2VVcChlKSB7XHJcbiAgICBpZih0aGlzLnNlbGVjdGVkKSB7XHJcbiAgICAgIHRoaXMub25SZWxlYXNlQ2FsbGJhY2soKTtcclxuICBcdFx0dGhpcy5zZWxlY3RlZCA9IG51bGw7XHJcbiAgICAgIHRoaXMudmlzdWFsLnNldENvbnRyb2xzU3RhdGUodGhpcy5jb250cm9sc1N0YXRlKTtcclxuICBcdH1cclxuICAgIGlmKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcclxuICBcdGUucHJldmVudERlZmF1bHQoKTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL0RyYWcuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5yZXF1aXJlKCdpbXBvcnRzLWxvYWRlcj9kZWZpbmU9PmZhbHNlIWpxdWVyeS1tb3VzZXdoZWVsJykoJCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudHNUb0FjdGlvbnMge1xyXG5cclxuICBzdGF0aWMgbW9kS2V5cyA9IHtcclxuICAgIEN0cmw6IDEsXHJcbiAgICBTaGlmdDogMixcclxuICAgIEFsdDogNFxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyBtb3VzZUJ1dHRvbnMgPSB7XHJcbiAgICBMZWZ0OiAwLFxyXG4gICAgTWlkZGxlOiAxLFxyXG4gICAgUmlnaHQ6IDJcclxuICB9O1xyXG5cclxuICBzdGF0aWMgZ2V0RXZlbnRGbGFncyhlKSB7XHJcbiAgICByZXR1cm4gZS5jdHJsS2V5PDwwIHwgZS5zaGlmdEtleTw8MSB8IGUuYWx0S2V5PDwyO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFBvc2l0aW9uKHRvdWNoZXMpIHtcclxuICAgIGxldCB4LCB5O1xyXG4gICAgaWYodG91Y2hlcy5sZW5ndGg9PT0yKSB7XHJcbiAgICAgIHggPSB0b3VjaGVzWzFdLnBhZ2VYLXRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgIHkgPSB0b3VjaGVzWzFdLnBhZ2VZLXRvdWNoZXNbMF0ucGFnZVk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgeCA9IHRvdWNoZXNbMF0ucGFnZVg7XHJcbiAgICAgIHkgPSB0b3VjaGVzWzBdLnBhZ2VZO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeCxcclxuICAgICAgeVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGFjdGlvbnMpIHtcclxuICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnMgfHwge307XHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5kb2MgPSBlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQ7XHJcbiAgICB0aGlzLnduZCA9IHRoaXMuZG9jLmRlZmF1bHRWaWV3O1xyXG4gICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBjb250ZXh0TWVudTogdGhpcy5jb250ZXh0TWVudS5iaW5kKHRoaXMpLFxyXG5cclxuICAgICAgbW91c2VEb3duOiB0aGlzLm1vdXNlRG93bi5iaW5kKHRoaXMpLFxyXG4gICAgICBtb3VzZU1vdmU6IHRoaXMubW91c2VNb3ZlLmJpbmQodGhpcyksXHJcbiAgICAgIG1vdXNlVXA6IHRoaXMubW91c2VVcC5iaW5kKHRoaXMpLFxyXG4gICAgICBtb3VzZVdoZWVsOiB0aGlzLm1vdXNlV2hlZWwuYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIG1vdXNlTW92ZURvYzogdGhpcy5tb3VzZU1vdmVEb2MuYmluZCh0aGlzKSxcclxuICAgICAgbW91c2VVcERvYzogdGhpcy5tb3VzZVVwRG9jLmJpbmQodGhpcyksXHJcblxyXG4gICAgICBjbGljazogdGhpcy5jbGljay5iaW5kKHRoaXMpLFxyXG4gICAgICBkYmxjbGljazogdGhpcy5kYmxjbGljay5iaW5kKHRoaXMpLFxyXG5cclxuICAgICAgdG91Y2hTdGFydDogdGhpcy50b3VjaFN0YXJ0LmJpbmQodGhpcyksXHJcbiAgICAgIHRvdWNoTW92ZTogdGhpcy50b3VjaE1vdmUuYmluZCh0aGlzKSxcclxuICAgICAgdG91Y2hFbmQ6IHRoaXMudG91Y2hFbmQuYmluZCh0aGlzKSxcclxuXHJcbiAgICAgIGtleURvd246IHRoaXMua2V5RG93bi5iaW5kKHRoaXMpLFxyXG4gICAgICBrZXlQcmVzczogdGhpcy5rZXlQcmVzcy5iaW5kKHRoaXMpLFxyXG4gICAgICBrZXlVcDogdGhpcy5rZXlVcC5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vbignY29udGV4dG1lbnUnLCB0aGlzLmJpbmRzLmNvbnRleHRNZW51KTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ21vdXNlZG93bicsIHRoaXMuYmluZHMubW91c2VEb3duKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbignbW91c2Vtb3ZlJywgdGhpcy5iaW5kcy5tb3VzZU1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5tb3VzZVVwKTtcclxuICAgIHRoaXMuZWxlbWVudC5vbignbW91c2V3aGVlbCcsIHRoaXMuYmluZHMubW91c2VXaGVlbCk7XHJcblxyXG4gICAgJCh0aGlzLmRvYykub24oJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlRG9jKTtcclxuICAgICQodGhpcy5kb2MpLm9uKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5tb3VzZVVwRG9jKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2NsaWNrJywgdGhpcy5iaW5kcy5jbGljayk7XHJcbiAgICB0aGlzLmVsZW1lbnQub24oJ2RibGNsaWNrJywgdGhpcy5iaW5kcy5kYmxjbGljayk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCd0b3VjaHN0YXJ0JywgdGhpcy5iaW5kcy50b3VjaFN0YXJ0KTtcclxuICAgIHRoaXMuZWxlbWVudC5vbigndG91Y2htb3ZlJywgdGhpcy5iaW5kcy50b3VjaE1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9uKCd0b3VjaGVuZCcsIHRoaXMuYmluZHMudG91Y2hFbmQpO1xyXG5cclxuICAgICQodGhpcy53bmQpLm9uKCdrZXlkb3duJywgdGhpcy5iaW5kcy5rZXlEb3duKTtcclxuICAgICQodGhpcy53bmQpLm9uKCdrZXlwcmVzcycsIHRoaXMuYmluZHMua2V5UHJlc3MpO1xyXG4gICAgJCh0aGlzLnduZCkub24oJ2tleXVwJywgdGhpcy5iaW5kcy5rZXlVcCk7XHJcbiAgfVxyXG5cclxuICBhZGRBY3Rpb24oYWN0aW9uLCB0eXBlLCBjb2RlLCBmbGFncykge1xyXG4gICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmKCF0aGlzLmFjdGlvbnNbdHlwZV0pIHtcclxuICAgICAgdGhpcy5hY3Rpb25zW3R5cGVdID0ge307XHJcbiAgICB9XHJcbiAgICBpZighdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uc1t0eXBlXVtjb2RlXSA9IHt9XHJcbiAgICB9XHJcbiAgICBpZighdGhpcy5hY3Rpb25zW3R5cGVdW2NvZGVdW2ZsYWdzXSkge1xyXG4gICAgICB0aGlzLmFjdGlvbnNbdHlwZV1bY29kZV1bZmxhZ3NdID0gW107XHJcbiAgICB9XHJcbiAgICB0aGlzLmFjdGlvbnNbdHlwZV1bY29kZV1bZmxhZ3NdLnB1c2goYWN0aW9uKTtcclxuICB9XHJcblxyXG4gIGdldEFjdGlvbnModHlwZSwgY29kZSwgZmxhZ3MpIHtcclxuICAgIHJldHVybiAoKHRoaXMuYWN0aW9uc1t0eXBlXSB8fCB7fSlbY29kZV0gfHwge30pW2ZsYWdzXSB8fCBbXTtcclxuICB9XHJcblxyXG4gIGZpcmVBY3Rpb25zKGFjdGlvbnMsIGUsIGRhdGEpIHtcclxuICAgIGZvcihsZXQgYWN0aW9uIG9mIGFjdGlvbnMpIHtcclxuICAgICAgYWN0aW9uKGUsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29udGV4dE1lbnUoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdjb250ZXh0bWVudScsIGUuYnV0dG9uLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VEb3duKGUpIHtcclxuICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgIHRoaXMubW91c2VVcERvYygpO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZWRvd24nLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgICAgdGhpcy5waWNrZWQgPSB7XHJcbiAgICAgICAgeDogZS5wYWdlWCxcclxuICAgICAgICB5OiBlLnBhZ2VZLFxyXG4gICAgICAgIGFjdGlvbnM6IHRoaXMuZ2V0QWN0aW9ucygnbW91c2VkcmFnJywgZS5idXR0b24sIGZsYWdzKVxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMucGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICBzdGF0ZTogJ3N0YXJ0J1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlTW92ZShlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ21vdXNlbW92ZScsIGUuYnV0dG9uLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VNb3ZlRG9jKGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCAmJiB0aGlzLnBpY2tlZCkge1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMucGlja2VkLmFjdGlvbnMsIGUsIHtcclxuICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgIGR4OiBlLnBhZ2VYLXRoaXMucGlja2VkLngsXHJcbiAgICAgICAgZHk6IGUucGFnZVktdGhpcy5waWNrZWQueVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5waWNrZWQgPSB7XHJcbiAgICAgICAgeDogZS5wYWdlWCxcclxuICAgICAgICB5OiBlLnBhZ2VZLFxyXG4gICAgICAgIGFjdGlvbnM6IHRoaXMucGlja2VkLmFjdGlvbnNcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdXNlVXAoZSkge1xyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSk7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCdtb3VzZXVwJywgZS5idXR0b24sIGZsYWdzKSwgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtb3VzZVVwRG9jKGUpIHtcclxuICAgIGlmKHRoaXMucGlja2VkKSB7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5waWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgIHN0YXRlOiAnZW5kJ1xyXG4gICAgICB9KTtcclxuICAgICAgZGVsZXRlIHRoaXMucGlja2VkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbW91c2VXaGVlbChlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ21vdXNld2hlZWwnLCAwLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xpY2tzKGUsIHR5cGUpIHtcclxuICAgIGlmKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICBjb25zdCBmbGFncyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRFdmVudEZsYWdzKGUpO1xyXG4gICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMuZ2V0QWN0aW9ucyh0eXBlLCBlLmJ1dHRvbiwgZmxhZ3MpLCBlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNsaWNrKGUpIHtcclxuICAgIHRoaXMuY2xpY2tzKGUsICdjbGljaycpO1xyXG4gIH1cclxuXHJcbiAgZGJsY2xpY2soZSkge1xyXG4gICAgdGhpcy5jbGlja3MoZSwgJ2RibGNsaWNrJyk7XHJcbiAgfVxyXG5cclxuICB0b3VjaFBpY2soZSwgZmxhZ3MsIHRvdWNoZXMpIHtcclxuICAgIGNvbnN0IHBvcyA9IEV2ZW50c1RvQWN0aW9ucy5nZXRQb3NpdGlvbih0b3VjaGVzKTtcclxuICAgIHRoaXMudG91Y2hQaWNrZWQgPSB7XHJcbiAgICAgIC4uLnBvcyxcclxuICAgICAgYWN0aW9uczogdGhpcy5nZXRBY3Rpb25zKCd0b3VjaGRyYWcnLCB0b3VjaGVzLmxlbmd0aCwgZmxhZ3MpLFxyXG4gICAgICBjb2RlOiB0b3VjaGVzLmxlbmd0aCxcclxuICAgICAgZmxhZ3NcclxuICAgIH07XHJcbiAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMudG91Y2hQaWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICBzdGF0ZTogJ3N0YXJ0JyxcclxuICAgICAgLi4ucG9zXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHRvdWNoU3RhcnQoZSkge1xyXG4gICAgaWYodGhpcy50b3VjaFBpY2tlZCkge1xyXG4gICAgICB0aGlzLnRvdWNoRW5kKGUpO1xyXG4gICAgfVxyXG4gICAgaWYodGhpcy5lbmFibGVkKSB7XHJcbiAgICAgIGNvbnN0IGZsYWdzID0gRXZlbnRzVG9BY3Rpb25zLmdldEV2ZW50RmxhZ3MoZSksIHRvdWNoZXMgPSBlLnRvdWNoZXMgfHwgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy5nZXRBY3Rpb25zKCd0b3VjaHN0YXJ0JywgdG91Y2hlcy5sZW5ndGgsIGZsYWdzKSwgZSk7XHJcbiAgICAgIHRoaXMudG91Y2hQaWNrKGUsIGZsYWdzLCB0b3VjaGVzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvdWNoTW92ZShlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKSwgdG91Y2hlcyA9IGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcztcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnMoJ3RvdWNobW92ZScsIHRvdWNoZXMubGVuZ3RoLCBmbGFncyksIGUpO1xyXG4gICAgICBpZih0aGlzLnRvdWNoUGlja2VkKSB7XHJcbiAgICAgICAgaWYodGhpcy50b3VjaFBpY2tlZC5jb2RlPT09dG91Y2hlcy5sZW5ndGggJiYgdGhpcy50b3VjaFBpY2tlZC5mbGFncz09PWZsYWdzKSB7XHJcbiAgICAgICAgICBjb25zdCBwb3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0UG9zaXRpb24odG91Y2hlcyk7XHJcbiAgICAgICAgICB0aGlzLmZpcmVBY3Rpb25zKHRoaXMudG91Y2hQaWNrZWQuYWN0aW9ucywgZSwge1xyXG4gICAgICAgICAgICBzdGF0ZTogJ21vdmUnLFxyXG4gICAgICAgICAgICBkeDogcG9zLngtdGhpcy50b3VjaFBpY2tlZC54LFxyXG4gICAgICAgICAgICBkeTogcG9zLnktdGhpcy50b3VjaFBpY2tlZC55LFxyXG4gICAgICAgICAgICAuLi5wb3NcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgdGhpcy50b3VjaFBpY2tlZCA9IHtcclxuICAgICAgICAgICAgLi4udGhpcy50b3VjaFBpY2tlZCxcclxuICAgICAgICAgICAgLi4ucG9zXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHRoaXMudG91Y2hFbmQoZSk7XHJcbiAgICAgICAgICB0aGlzLnRvdWNoUGljayhlLCBmbGFncywgdG91Y2hlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0b3VjaEVuZChlKSB7XHJcbiAgICBpZih0aGlzLnRvdWNoUGlja2VkKSB7XHJcbiAgICAgIHRoaXMuZmlyZUFjdGlvbnModGhpcy50b3VjaFBpY2tlZC5hY3Rpb25zLCBlLCB7XHJcbiAgICAgICAgc3RhdGU6ICdlbmQnXHJcbiAgICAgIH0pO1xyXG4gICAgICBkZWxldGUgdGhpcy50b3VjaFBpY2tlZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGtleShlLCB0eXBlKSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQpIHtcclxuICAgICAgY29uc3QgZmxhZ3MgPSBFdmVudHNUb0FjdGlvbnMuZ2V0RXZlbnRGbGFncyhlKTtcclxuICAgICAgdGhpcy5maXJlQWN0aW9ucyh0aGlzLmdldEFjdGlvbnModHlwZSwgZS5rZXlDb2RlLCBmbGFncyksIGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAga2V5RG93bihlKSB7XHJcbiAgICB0aGlzLmtleShlLCAna2V5ZG93bicpO1xyXG4gIH1cclxuXHJcbiAga2V5UHJlc3MoZSkge1xyXG4gICAgdGhpcy5rZXkoZSwgJ2tleXByZXNzJyk7XHJcbiAgfVxyXG5cclxuICBrZXlVcChlKSB7XHJcbiAgICB0aGlzLmtleShlLCAna2V5dXAnKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdjb250ZXh0bWVudScsIHRoaXMuYmluZHMuY29udGV4dE1lbnUpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNlZG93bicsIHRoaXMuYmluZHMubW91c2VEb3duKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNlbW92ZScsIHRoaXMuYmluZHMubW91c2VNb3ZlKTtcclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ21vdXNldXAnLCB0aGlzLmJpbmRzLm1vdXNlVXApO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZignbW91c2V3aGVlbCcsIHRoaXMuYmluZHMubW91c2VXaGVlbCk7XHJcblxyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZW1vdmUnLCB0aGlzLmJpbmRzLm1vdXNlTW92ZURvYyk7XHJcbiAgICAkKHRoaXMuZG9jKS5vZmYoJ21vdXNldXAnLCB0aGlzLmJpbmRzLm1vdXNlVXBEb2MpO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kcy5jbGljayk7XHJcbiAgICB0aGlzLmVsZW1lbnQub2ZmKCdkYmxjbGljaycsIHRoaXMuYmluZHMuZGJsY2xpY2spO1xyXG5cclxuICAgIHRoaXMuZWxlbWVudC5vZmYoJ3RvdWNoc3RhcnQnLCB0aGlzLmJpbmRzLnRvdWNoU3RhcnQpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZigndG91Y2htb3ZlJywgdGhpcy5iaW5kcy50b3VjaE1vdmUpO1xyXG4gICAgdGhpcy5lbGVtZW50Lm9mZigndG91Y2hlbmQnLCB0aGlzLmJpbmRzLnRvdWNoRW5kKTtcclxuXHJcbiAgICAkKHRoaXMud25kKS5vZmYoJ2tleWRvd24nLCB0aGlzLmJpbmRzLmtleURvd24pO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdrZXlwcmVzcycsIHRoaXMuYmluZHMua2V5UHJlc3MpO1xyXG4gICAgJCh0aGlzLnduZCkub2ZmKCdrZXl1cCcsIHRoaXMuYmluZHMua2V5VXApO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvRXZlbnRzVG9BY3Rpb25zLmpzIiwiXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZ1bGxTY3JlZW4ge1xyXG5cclxuXHRzdGF0aWMgX2hhc1dlYmtpdEZ1bGxTY3JlZW5cdD0gISFkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuO1xyXG5cdHN0YXRpYyBfaGFzTW96RnVsbFNjcmVlblx0PSAhIWRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW47XHJcblx0c3RhdGljIF9oYXNNc0Z1bGxzY3JlZW4gPSAhIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5tc1JlcXVlc3RGdWxsc2NyZWVuO1xyXG5cclxuXHRzdGF0aWMgYXZhaWxhYmxlKCkge1xyXG5cdFx0cmV0dXJuIEZ1bGxTY3JlZW4uX2hhc1dlYmtpdEZ1bGxTY3JlZW4gfHwgRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlbiB8fCBGdWxsU2NyZWVuLl9oYXNNc0Z1bGxzY3JlZW47XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWN0aXZhdGVkKCkge1xyXG5cdFx0aWYoRnVsbFNjcmVlbi5faGFzV2Via2l0RnVsbFNjcmVlbikge1xyXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQud2Via2l0SXNGdWxsU2NyZWVuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNb3pGdWxsU2NyZWVuKSB7XHJcblx0XHRcdHJldHVybiBkb2N1bWVudC5tb3pGdWxsU2NyZWVuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNc0Z1bGxzY3JlZW4pIHtcclxuXHRcdFx0cmV0dXJuICEhZG9jdW1lbnQubXNGdWxsc2NyZWVuRWxlbWVudDtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgYWRkRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0XHRpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcblx0XHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0ICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHRcdCAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHQgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdNU0Z1bGxzY3JlZW5DaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcihlbGVtZW50LCBoYW5kbGVyKSB7XHJcblx0XHRpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcblx0XHQgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJywgaGFuZGxlciwgZmFsc2UpO1xyXG5cdFx0ICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW96ZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZXIsIGZhbHNlKTtcclxuXHRcdCAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHQgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdNU0Z1bGxzY3JlZW5DaGFuZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgcmVxdWVzdChlbGVtZW50KSB7XHJcblx0XHRlbGVtZW50XHQ9IGVsZW1lbnRcdHx8IGRvY3VtZW50LmJvZHk7XHJcblx0XHRpZihGdWxsU2NyZWVuLl9oYXNXZWJraXRGdWxsU2NyZWVuKSB7XHJcblx0XHRcdGVsZW1lbnQud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTW96RnVsbFNjcmVlbikge1xyXG5cdFx0XHRlbGVtZW50Lm1velJlcXVlc3RGdWxsU2NyZWVuKCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKEZ1bGxTY3JlZW4uX2hhc01zRnVsbHNjcmVlbikge1xyXG5cdFx0XHRlbGVtZW50Lm1zUmVxdWVzdEZ1bGxzY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY2FuY2VsKCkge1xyXG5cdFx0aWYoRnVsbFNjcmVlbi5faGFzV2Via2l0RnVsbFNjcmVlbikge1xyXG5cdFx0XHRkb2N1bWVudC53ZWJraXRDYW5jZWxGdWxsU2NyZWVuKCk7XHJcblx0XHR9ZWxzZSBpZihGdWxsU2NyZWVuLl9oYXNNb3pGdWxsU2NyZWVuKSB7XHJcblx0XHRcdGRvY3VtZW50Lm1vekNhbmNlbEZ1bGxTY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoRnVsbFNjcmVlbi5faGFzTXNGdWxsc2NyZWVuKSB7XHJcblx0XHRcdGRvY3VtZW50Lm1zRXhpdEZ1bGxzY3JlZW4oKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRjb25zb2xlLmFzc2VydChmYWxzZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9GdWxsU2NyZWVuLmpzIiwiaW1wb3J0IHskLCBodG1sMmNhbnZhc30gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUJhc2UgZnJvbSAnLi9JbWFnZUJhc2UnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuL0Jhc2VNYXRoVXRpbHMnO1xyXG5pbXBvcnQgRG9tMkltYWdlIGZyb20gJy4vRG9tMkltYWdlJztcclxuaW1wb3J0IERvY01vdXNlU2ltdWxhdG9yIGZyb20gJy4vRG9jTW91c2VTaW11bGF0b3InO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW50ZXJhY3RpdmVJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yLCBzcmMsIGNhY2hlLCBpbmplY3Rvcikge1xyXG4gICAgc3VwZXIoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgY29sb3IpO1xyXG5cclxuICAgIHRoaXMuaUlkID0gJ2knK0Jhc2VNYXRoVXRpbHMuZ2V0VW5pcXVlKCk7XHJcbiAgICBjb25zdCBqRnJhbWUgPSAkKCc8aWZyYW1lIGlkPVwiJyt0aGlzLmlJZCsnXCIgc3JjPVwiJyArIHNyYyArICdcIiBzdHlsZT1cInBvc2l0aW9uOiBmaXhlZDsgbGVmdDogLTEwMDBweDtcIj48L2lmcmFtZT4nKTtcclxuICAgICQodGhpcy5kb2MuYm9keSkuYXBwZW5kKGpGcmFtZSk7XHJcbiAgICB0aGlzLmZyYW1lID0gakZyYW1lWzBdO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7fTtcclxuXHJcbiAgICBpZihpbmplY3Rvcikge1xyXG4gICAgICBpbmplY3Rvcih0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKHRoaXMuZG9jLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ3d3dy5odHRwOi8vdzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjRXh0ZW5zaWJpbGl0eScsICcxLjEnKSkgeyAvLyBzdmcgZm9yZWlnbk9iamVjdCByZW5kZXJlclxyXG4gICAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgIHRoaXMuYmluZHMuaW1hZ2VMb2FkID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJJbWFnZSh0aGlzLmltYWdlKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9O1xyXG4gICAgICAkKHRoaXMuaW1hZ2UpLm9uKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpO1xyXG4gICAgICB0aGlzLnN2Z1JlbmRlciA9IG5ldyBEb20ySW1hZ2UodGhpcy5mcmFtZS5jb250ZW50V2luZG93LCB0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudCwgY2FjaGUpO1xyXG4gICAgfSAvLyBvdGhlcndpc2UgLSBodG1sMmNhbnZhc1xyXG5cclxuICAgIHRoaXMuYmluZHMuZnJhbWVMb2FkID0gKCk9PiB7XHJcbiAgICAgIGlmKH50aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC50aXRsZS5pbmRleE9mKCc0MDQnKSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgICAgIHRoaXMucmVuZGVyTm90Rm91bmRQYWdlKCk7XHJcbiAgICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICAgIGlmKHRoaXMuZnJhbWUpIHtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9ICQodGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSkud2lkdGgoKTtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSAkKHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LmJvZHkpLmhlaWdodCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJlc0ggPSB0aGlzLmhlaWdodC90aGlzLndpZHRoKnRoaXMucmVzVztcclxuICAgICAgICAgICAgakZyYW1lLmNzcygnd2lkdGgnLCB0aGlzLndpZHRoKydweCcpLmNzcygnaGVpZ2h0JywgdGhpcy5oZWlnaHQrJ3B4Jyk7XHJcbiAgICAgICAgICAgIGpGcmFtZS5vZmZzZXQoe2xlZnQ6IC10aGlzLndpZHRoLTEwMCwgdG9wOiAwfSk7XHJcbiAgICAgICAgICAgIGlmKHRoaXMuc3ZnUmVuZGVyKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zaW11bGF0b3IgPSBuZXcgRG9jTW91c2VTaW11bGF0b3IoakZyYW1lLCB0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LCB0aGlzLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2ltdWxhdG9yLmFkZERvY0NoYW5nZUNsYih0aGlzLmZpbmlzaExvYWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAkKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdykub24oJ2xvYWQnLCB0aGlzLmJpbmRzLmZyYW1lTG9hZCk7XHJcbiAgfVxyXG5cclxuICBnZXRTaW11bGF0ZWREb2MoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQ7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZih0aGlzLnN2Z1JlbmRlcikge1xyXG4gICAgICB0aGlzLnN2Z1JlbmRlci50b1N2Zyh0aGlzLnNpbXVsYXRvci5lbGVtZW50LCB7aGVpZ2h0OiB0aGlzLmhlaWdodCsncHgnLCB3aWR0aDogdGhpcy53aWR0aCsncHgnfSlcclxuICAgICAgICAudGhlbigoZGF0YVVybCk9PiB7XHJcbiAgICAgICAgICB0aGlzLmltYWdlLnNyYyA9IGRhdGFVcmw7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goKGVycm9yKT0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RvbTJJbWFnZTogJywgZXJyb3IpO1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJCbGFua1BhZ2UoKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaHRtbDJjYW52YXModGhpcy5mcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keSwge3RpbWVvdXQ6IDMwMDAwfSkuXHJcbiAgICAgICAgdGhlbigoY2FudmFzKT0+IHtcclxuICAgICAgICAgIHRoaXMucmVuZGVySW1hZ2UoY2FudmFzKTtcclxuICAgICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmltYWdlKS5vZmYoJ2xvYWQnLCB0aGlzLmJpbmRzLmltYWdlTG9hZCk7XHJcbiAgICAkKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdykub2ZmKCdsb2FkJywgdGhpcy5iaW5kcy5mcmFtZUxvYWQpO1xyXG4gICAgJCh0aGlzLmRvYy5ib2R5KS5maW5kKCcjJyt0aGlzLmlJZCkucmVtb3ZlKCk7XHJcbiAgICBpZih0aGlzLmltYWdlKSB7XHJcbiAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gJyc7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLmltYWdlO1xyXG4gICAgfVxyXG4gICAgdGhpcy5mcmFtZS5zcmMgPSAnJztcclxuICAgIGRlbGV0ZSB0aGlzLmZyYW1lO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgc2ltdWxhdGUoZSwgZG9jLCB4LCB5KSB7XHJcbiAgICBpZih0aGlzLnNpbXVsYXRvcikge1xyXG4gICAgICB0aGlzLnNpbXVsYXRvci5zaW11bGF0ZShlLCBkb2MsIHgsIHkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvSW50ZXJhY3RpdmVJbWFnZS5qcyIsImltcG9ydCB7JCwgdHJ9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdBbmltYXRpb24ge1xyXG5cclxuICBkeSh0LHkpIHtcclxuICAgIGNvbnN0IHc9eVswXSwgYT15WzFdO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgLXRoaXMuZypNYXRoLmNvcyhhKSxcclxuICAgICAgd1xyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIGludGVncmF0ZShUKSB7XHJcbiAgICBsZXQgdD0wLCBkdD10aGlzLnAuZHQsIG9zID0gdGhpcy5vcztcclxuICAgIHdoaWxlKHQ8VCkge1xyXG4gICAgICBpZih0K2R0PlQpIHtcclxuICAgICAgICBkdD1ULXQ7XHJcbiAgICAgIH1cclxuICAgICAgb3M9TWF0aFV0aWxzLnJrNCh0aGlzLmR5LmJpbmQoe2c6IHRoaXMucC5nfSksIDAsIGR0LCBvcyk7XHJcbiAgICAgIHQrPWR0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9zO1xyXG4gIH1cclxuXHJcbiAgY2FsY1RpbWVUbyh0YXJnZXQpIHtcclxuICAgIGxldCB0PTAsIGR0PXRoaXMucC5kdCwgb3MgPSB0aGlzLm9zO1xyXG4gICAgd2hpbGUoTWF0aC5hYnMob3NbMV0tdGFyZ2V0KT4xZS00KSB7XHJcbiAgICAgIGNvbnN0IG5vcz1NYXRoVXRpbHMucms0KHRoaXMuZHkuYmluZCh7ZzogdGhpcy5wLmd9KSwgMCwgZHQsIG9zKTtcclxuICAgICAgaWYobm9zWzBdPDAgJiYgbm9zWzFdPHRhcmdldCB8fCBub3NbMF0+MCAmJiBub3NbMV0+dGFyZ2V0KSB7XHJcbiAgICAgICAgZHQvPTI7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgb3MgPSBub3M7XHJcbiAgICAgICAgdCs9ZHQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKFQpIHtcclxuICAgIHRoaXMub3MgPSB0aGlzLmludGVncmF0ZShUKTtcclxuXHJcbiAgICB0aGlzLnQrPVRcclxuICAgIGlmKHRoaXMudD49dGhpcy5wLnVwZGF0ZUludGVydmFsKSB7XHJcbiAgICAgIHRoaXMudCA9IDA7XHJcbiAgICAgIGNvbnN0IHIgPSAwLjA0Kk1hdGgubWluKHRoaXMuYy53aWR0aCwgdGhpcy5jLmhlaWdodCksXHJcbiAgICAgICAgICAgIGEgPSB0aGlzLm9zWzFdLFxyXG4gICAgICAgICAgICB4MCA9IDAuNSp0aGlzLmMud2lkdGgsXHJcbiAgICAgICAgICAgIHkwID0gMC41KnRoaXMuYy5oZWlnaHQsXHJcbiAgICAgICAgICAgIGN0eCA9IHRoaXMuY3R4O1xyXG5cclxuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmMud2lkdGgsIHRoaXMuYy5oZWlnaHQpO1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEodGhpcy5wLmNvbG9yLDEpO1xyXG4gICAgICBjdHgucmVjdCgwLCAwLCB0aGlzLmMud2lkdGgsIHRoaXMuYy5oZWlnaHQpO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHguc2hhZG93Qmx1ciA9IDUwO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwwLjkpLE1hdGguYWJzKHRoaXMub3NbMF0vNi4zNikpO1xyXG4gICAgICBjdHguc2hhZG93Q29sb3IgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IodGhpcy5wLmNvbG9yLDEpLDAuOSk7XHJcbiAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gMDtcclxuICAgICAgY3R4LnNoYWRvd09mZnNldFkgPSAwO1xyXG4gICAgICBjdHguZm9udD0nYm9sZCAnK01hdGgucm91bmQoMC4yNSpyKSsncHggQXJpYWwnO1xyXG4gICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcclxuICAgICAgY3R4LmZpbGxUZXh0KHRyKCdMb2FkaW5nLi4uJykseDAseTApO1xyXG5cclxuICAgICAgY29uc3QgcHMgPSAxMCwgZGE9MipNYXRoLlBJL3BzOy8vMi41Kl9yL3JcclxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gR3JhcGhVdGlscy5jb2xvcjJSZ2JhKEdyYXBoVXRpbHMuaW52ZXJzZUNvbG9yKHRoaXMucC5jb2xvciwxKSwwLjcpO1xyXG4gICAgICBmb3IobGV0IGk9MCwgX2E9YSwgX3I9MC4yKnI7IGk8cHM7ICsraSwgX3IqPTAuOSwgX2ErPWRhKSB7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBHcmFwaFV0aWxzLmNvbG9yMlJnYmEoR3JhcGhVdGlscy5pbnZlcnNlQ29sb3IodGhpcy5wLmNvbG9yLChwcy1pKS9wcyksMC43Kihwcy1pKS9wcyk7XHJcbiAgICAgICAgY29uc3QgY3g9eDArcipNYXRoLmNvcyhfYSksIGN5PXkwLXIqTWF0aC5zaW4oX2EpLCBueD14MCtyKk1hdGguY29zKF9hK2RhKSwgbnk9eTAtcipNYXRoLnNpbihfYStkYSk7XHJcbiAgICAgICAgY3R4LnNoYWRvd09mZnNldFggPSAwLjIqKG54LWN4KTtcclxuICAgICAgICBjdHguc2hhZG93T2Zmc2V0WSA9IDAuMioobnktY3kpO1xyXG4gICAgICAgIGN0eC5hcmMoY3gsIGN5LCBfciwgMCwgTWF0aC5QSSoyLCAxKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmKHRoaXMub25DaGFuZ2UpIHtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuYywgdGhpcy5wLmNvbG9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0SW1hZ2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuYy53aWR0aCA9IDA7XHJcbiAgICB0aGlzLmMuaGVpZ2h0ID0gMDtcclxuICAgIGRlbGV0ZSB0aGlzLmN0eDtcclxuICAgIGRlbGV0ZSB0aGlzLmM7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVTcHJpdGUobikge1xyXG4gICAgY29uc3QgYyA9IEdyYXBoVXRpbHMuY3JlYXRlQ2FudmFzKHRoaXMuYy53aWR0aCpuLCB0aGlzLmMuaGVpZ2h0KSwgY3R4ID0gYy5nZXRDb250ZXh0KCcyZCcpLFxyXG4gICAgdCA9IHRoaXMuY2FsY1RpbWVUbyh0aGlzLm9zWzFdK01hdGguc2lnbih0aGlzLm9zWzBdKSoyKk1hdGguUEkpLCBkdD10LyhuKzEpO1xyXG4gICAgY29uc3Qge3VwZGF0ZUludGVydmFsfSA9IHRoaXMucDtcclxuICAgIHRoaXMucC51cGRhdGVJbnRlcnZhbCA9IDA7XHJcbiAgICBmb3IobGV0IGk9MDsgaTxuOyArK2kpIHtcclxuICAgICAgdGhpcy51cGRhdGUoZHQpO1xyXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuYywgaSp0aGlzLmMud2lkdGgsIDApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wLnVwZGF0ZUludGVydmFsID0gdXBkYXRlSW50ZXJ2YWw7XHJcbiAgICByZXR1cm4gYztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIGNvbG9yKSB7XHJcbiAgICB0aGlzLmMgPSBHcmFwaFV0aWxzLmNyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcclxuICAgIHRoaXMucCA9IHtcclxuICAgICAgZzogOS44LFxyXG4gICAgICBkdDogMS82MCxcclxuICAgICAgY29sb3IsXHJcbiAgICAgIHVwZGF0ZUludGVydmFsOiAwLjI1XHJcbiAgICB9O1xyXG4gICAgdGhpcy5jdHggPSB0aGlzLmMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIHRoaXMub3MgPSBbLTIsIE1hdGguUEkvMl07XHJcbiAgICB0aGlzLnQgPSB0aGlzLnAudXBkYXRlSW50ZXJ2YWw7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQW5pbWF0aW9uLmpzIiwiaW1wb3J0IHskfSBmcm9tICcuLi9saWJzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRpbmdDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlldywgc2hvd1Byb2dyZXNzPXRydWUsIGxvYWRpbmdNc2c9dW5kZWZpbmVkKSB7XHJcbiAgICB0aGlzLnZpZXcgPSB2aWV3O1xyXG4gICAgdGhpcy5wcm9ncmVzcyA9IDA7XHJcbiAgICB0aGlzLnNob3dQcm9ncmVzcyA9IHNob3dQcm9ncmVzcztcclxuICAgIHRoaXMuZ2V0TG9hZGluZ01zZyA9IGxvYWRpbmdNc2cgfHwgTG9hZGluZ0NvbnRyb2xsZXIuZGVmYXVsdExvYWRpbmdNc2c7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBkZWZhdWx0TG9hZGluZ01zZyhwcm9ncmVzcykge1xyXG4gICAgcmV0dXJuIFsnUGxlYXNlIHdhaXQuLi4gdGhlIEFwcGxpY2F0aW9uIGlzIExvYWRpbmc6ICcsIHByb2dyZXNzLCAnJSddLmpvaW4oJycpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuc2hvd1Byb2dyZXNzID0gZmFsc2U7XHJcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcclxuICAgIGRlbGV0ZSB0aGlzLnZpZXc7XHJcbiAgfVxyXG5cclxuICBzZXRQcm9ncmVzcyh2KSB7XHJcbiAgICB0aGlzLnByb2dyZXNzID0gdjtcclxuICAgIHRoaXMudXBkYXRlVmlldygpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlVmlldygpIHtcclxuICAgIGlmKHRoaXMudmlldykge1xyXG5cclxuICAgICAgdGhpcy52aWV3LnNldFN0YXRlKCd3aWRMb2FkaW5nUHJvZ3Jlc3MnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuc2hvd1Byb2dyZXNzLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ3R4dExvYWRpbmdQcm9ncmVzcycsIHtcclxuICAgICAgICB2YWx1ZTogdGhpcy5nZXRMb2FkaW5nTXNnKHRoaXMucHJvZ3Jlc3MpLFxyXG4gICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmb3IobGV0IG5hbWUgb2YgdGhpcy52aWV3LmdldExpbmtzKCkpIHtcclxuICAgICAgICB0aGlzLnZpZXcuc2V0U3RhdGUobmFtZSwge1xyXG4gICAgICAgICAgZW5hYmxlOiBmYWxzZSxcclxuICAgICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgICBhY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnaW5wUGFnZXMnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICB2YWx1ZTogJydcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0aGlzLnZpZXcuc2V0U3RhdGUoJ2lucFBhZ2UnLCB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBlbmFibGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9Mb2FkaW5nQ29udHJvbGxlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBFdmVudENvbnZlcnRlciBmcm9tICcuL0V2ZW50Q29udmVydGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vdXNlRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCBlbGVtZW50KSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYyk7XHJcblxyXG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIGNvbnZlcnQ6IHRoaXMuY29udmVydC5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9uKCdtb3VzZW1vdmUgbW91c2Vkb3duIG1vdXNlb3ZlciBtb3VzZW91dCBjbGljaycsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgICAkKHRoaXMuZG9jKS5vbignbW91c2V1cCcsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZignbW91c2Vtb3ZlIG1vdXNlZG93biBtb3VzZW92ZXIgbW91c2VvdXQgY2xpY2snLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCdtb3VzZXVwJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7VEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgTWF0aFV0aWxzIGZyb20gJy4vTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9iamVjdDNEV2F0Y2hlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZpc3VhbCwgYm91bmRCb3hDbGIsIHRlc3RTY2FsZT10aGlzLnRlc3RTY2FsZSkge1xyXG4gICAgdGhpcy52aXN1YWwgPSB2aXN1YWw7XHJcbiAgICB0aGlzLmJvdW5kQm94Q2xiID0gYm91bmRCb3hDbGI7XHJcbiAgICB0aGlzLnRlc3RTY2FsZSA9IHRlc3RTY2FsZTtcclxuICAgIHRoaXMuY2FtZXJhID0gdmlzdWFsLmNhbWVyYTtcclxuICAgIHRoaXMuZWxlbWVudCA9IHRoaXMudmlzdWFsLmVsZW1lbnQ7XHJcbiAgICB0aGlzLmVsZW1lbnRTaXplID0ge3c6IDEsIGg6IDF9O1xyXG4gICAgdGhpcy5kZXZpY2VQaXhlbFJhdGlvID0gdGhpcy52aXN1YWwud25kLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcclxuICAgIHRoaXMub3JiaXQgPSB2aXN1YWwuZ2V0T3JiaXQoKTtcclxuICAgIHRoaXMuc2NhbGUgPSAxO1xyXG4gICAgdGhpcy5wYWRkaW5nID0gMDtcclxuXHJcbiAgICB0aGlzLmVwcyA9IDFlLTQ7XHJcbiAgICB0aGlzLnYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgdGhpcy5kdiA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XHJcblxyXG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XHJcblxyXG4gICAgdmlzdWFsLmFkZFJlbmRlckNhbGxiYWNrKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xyXG5cclxuICAgIHRoaXMub3MgPSB7XHJcbiAgICAgIHZ4OiAwLFxyXG4gICAgICB2eTogMCxcclxuICAgICAgeDogMCxcclxuICAgICAgeTogMFxyXG4gICAgfTtcclxuICAgIHRoaXMub3JiaXQudXBkYXRlKCk7XHJcbiAgICB0aGlzLmNhbWVyYS51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG4gICAgbGV0IGJveCA9IHRoaXMuY29tcHV0ZUNsaWVudEJvdW5kQm94KCksIGs9MS4xMTtcclxuICAgIHRoaXMubW92ZVBhbih7eDogLWsqYm94Lm1pZC54LCB5OiAtaypib3gubWlkLnl9KTtcclxuICB9XHJcblxyXG4gIHNldFBhZGRpbmcocGFkZGluZykge1xyXG4gICAgdGhpcy5wYWRkaW5nID0gcGFkZGluZztcclxuICB9XHJcblxyXG4gIG1vdmVQYW4oZHYpIHtcclxuICAgIHRoaXMub3JiaXQucGFuKGR2LngqdGhpcy52aXN1YWwud2lkdGgoKSwgLWR2LnkqdGhpcy52aXN1YWwuaGVpZ2h0KCkpO1xyXG4gIH1cclxuXHJcbiAgdlRvQ2FtZXJhKHYpIHtcclxuICAgIHYucHJvamVjdCh0aGlzLmNhbWVyYSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiAwLjUqdi54LFxyXG4gICAgICB5OiAwLjUqdi55XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29tcHV0ZUNsaWVudEJvdW5kQm94KCkge1xyXG4gICAgY29uc3QgYm94ID0gdGhpcy5ib3VuZEJveENsYigpLFxyXG4gICAgICB4cyA9IFtib3gubWluLngsIGJveC5tYXgueF0sXHJcbiAgICAgIHlzID0gWzAsIDBdLFxyXG4gICAgICB6cyA9IFtib3gubWluLnosIGJveC5tYXguel07XHJcblxyXG4gICAgY29uc3QgcHMgPSBbXSwgcmVzID0ge21heDoge30sIG1pbjoge319O1xyXG4gICAgZm9yKGxldCB4IG9mIHhzKSB7XHJcbiAgICAgIGZvcihsZXQgeSBvZiB5cykge1xyXG4gICAgICAgIGZvcihsZXQgeiBvZiB6cykge1xyXG4gICAgICAgICAgcHMucHVzaCh0aGlzLnZUb0NhbWVyYSh0aGlzLnYuc2V0KHgseSx6KSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBzLnNvcnQoKHAxLCBwMik9PiBwMS54LXAyLngpO1xyXG4gICAgcmVzLm1pbi54ID0gcHNbMF0ueDtcclxuICAgIHJlcy5tYXgueCA9IHBzW3BzLmxlbmd0aC0xXS54O1xyXG4gICAgcHMuc29ydCgocDEsIHAyKT0+IHAxLnktcDIueSk7XHJcbiAgICByZXMubWluLnkgPSBwc1swXS55O1xyXG4gICAgcmVzLm1heC55ID0gcHNbcHMubGVuZ3RoLTFdLnk7XHJcblxyXG4gICAgcmVzLndpZHRoID0gcmVzLm1heC54LXJlcy5taW4ueDtcclxuICAgIHJlcy5oZWlnaHQgPSByZXMubWF4LnktcmVzLm1pbi55O1xyXG5cclxuICAgIHJlcy5taWQgPSB7XHJcbiAgICAgIHg6IDAuNSoocmVzLm1heC54K3Jlcy5taW4ueCksXHJcbiAgICAgIHk6IDAuNSoocmVzLm1heC55K3Jlcy5taW4ueSlcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHNldE9iamVjdChib3VuZEJveENsYikge1xyXG4gICAgdGhpcy5ib3VuZEJveENsYiA9IGJvdW5kQm94Q2xiO1xyXG4gIH1cclxuXHJcbiAgdGVzdFNjYWxlKCkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBjb21wdXRlQ29ycihLLCBtaW4sIG1heCkge1xyXG4gICAgbGV0IGNvcnIgPSAwO1xyXG4gICAgaWYoSzwxKSB7XHJcbiAgICAgIGlmKG1pbj4tMC41KSB7XHJcbiAgICAgICAgY29yciA9IC0wLjUtbWluO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYobWF4PDAuNSkge1xyXG4gICAgICAgIGNvcnIgPSAwLjUtbWF4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgaWYobWluPC0wLjUpIHtcclxuICAgICAgICBjb3JyID0gLTAuNS1taW47XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZihtYXg+MC41KSB7XHJcbiAgICAgICAgY29yciA9IDAuNS1tYXg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjb3JyO1xyXG4gIH1cclxuXHJcbiAgY2VudGVyVmlldyhUKSB7XHJcbiAgICBsZXQgYm94ID0gdGhpcy5jb21wdXRlQ2xpZW50Qm91bmRCb3goKSxcclxuICAgICAgS3ggPSB0aGlzLmVsZW1lbnRTaXplLncvYm94LndpZHRoLFxyXG4gICAgICBLeSA9IHRoaXMuZWxlbWVudFNpemUuaC9ib3guaGVpZ2h0LFxyXG4gICAgICBLID0gTWF0aC5taW4oS3gsIEt5KTtcclxuXHJcbiAgICBpZih0aGlzLnRlc3RTY2FsZSgpICYmIE1hdGguYWJzKDEvSy10aGlzLnNjYWxlKT50aGlzLmVwcykge1xyXG4gICAgICBjb25zdCBzY2FsZSA9IDEvSyswLjIqKHRoaXMuc2NhbGUtMS9LKTtcclxuICAgICAgdGhpcy5vcmJpdC5zZXRTY2FsZSh0aGlzLm9yYml0LmdldFNjYWxlKCkvKEsqc2NhbGUpKTtcclxuICAgICAgdGhpcy5vcmJpdC51cGRhdGUoKTtcclxuICAgICAgdGhpcy5jYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuICAgICAgYm94ID0gdGhpcy5jb21wdXRlQ2xpZW50Qm91bmRCb3goKTtcclxuICAgICAgICBLeCA9IHRoaXMuZWxlbWVudFNpemUudy9ib3gud2lkdGg7XHJcbiAgICAgICAgS3kgPSB0aGlzLmVsZW1lbnRTaXplLmgvYm94LmhlaWdodDtcclxuICAgICAgICBLID0gTWF0aC5taW4oS3gsIEt5KTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkdiA9IHRoaXMuZHY7XHJcbiAgICBpZihLPjEtdGhpcy5lcHMpIHtcclxuICAgICAgaWYodGhpcy5wYWRkaW5nKSB7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy52aXN1YWwuaGVpZ2h0KCksIG1hcmcgPSAwLjUqKEt5LTEpL0t5LCBwYWQgPSB0aGlzLnBhZGRpbmcvaGVpZ2h0LCBkcGFkID0gTWF0aC5tYXgoMCwgTWF0aC5hYnMocGFkKS1tYXJnKTtcclxuICAgICAgICBkdi5zZXQoLWJveC5taWQueCwgLU1hdGguc2lnbihwYWQpKk1hdGgubWluKE1hdGgubWF4KDAsIG1hcmctMjAvaGVpZ2h0KSwgZHBhZCktYm94Lm1pZC55KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBkdi5zZXQoLWJveC5taWQueCwgLWJveC5taWQueSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBkdi5zZXQodGhpcy5jb21wdXRlQ29ycihLeCwgYm94Lm1pbi54LCBib3gubWF4LngpLFxyXG4gICAgICAgICAgICAgdGhpcy5jb21wdXRlQ29ycihLeSwgYm94Lm1pbi55LCBib3gubWF4LnkpKTtcclxuICAgIH1cclxuXHJcbiAgICBpZihNYXRoLnNxcnQodGhpcy5vcy52eCp0aGlzLm9zLnZ4K3RoaXMub3MudnkqdGhpcy5vcy52eSk+MC4wMDMgfHwgZHYubGVuZ3RoKCk+MC4wMDMpIHtcclxuICAgICAgbGV0IGR0ID0gMS82MCwgdD0wLCBvcyA9IHtcclxuICAgICAgICAuLi50aGlzLm9zLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMFxyXG4gICAgICB9O1xyXG4gICAgICBvcy50ZiA9ICh2eCwgdnksIHgsIHkpPT4gKHtcclxuICAgICAgICB4OiA3NSooZHYueC14KSxcclxuICAgICAgICB5OiA3NSooZHYueS15KVxyXG4gICAgICB9KTtcclxuICAgICAgd2hpbGUodDxUKSB7XHJcbiAgICAgICAgaWYodCtkdD5UKSB7XHJcbiAgICAgICAgICBkdCA9IFQtdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3MgPSB0aGlzLmludGVncmF0ZShvcywgZHQpO1xyXG4gICAgICAgIHQgKz0gZHQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5tb3ZlUGFuKG9zKTtcclxuICAgICAgdGhpcy5vcyA9IG9zO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW50ZWdyYXRlKG9zLCBkdCkge1xyXG4gICAgY29uc3QgW3Z4LCB2eSwgeCwgeV0gPSBNYXRoVXRpbHMucms0KFxyXG4gICAgICB0aGlzLmR5LmJpbmQob3MpLFxyXG4gICAgICAwLFxyXG4gICAgICBkdCxcclxuICAgICAgW29zLnZ4LCBvcy52eSwgb3MueCwgb3MueV1cclxuICAgICk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAuLi5vcyxcclxuICAgICAgdngsIHZ5LCB4LCB5XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgZHkodCxZKSB7XHJcbiAgICBjb25zdCBbdngsIHZ5LCB4LCB5XSA9IFksIHZkID0gMTUsIHRmID0gdGhpcy50Zih2eCwgdnksIHgsIHkpO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgdGYueC12ZCp2eCxcclxuICAgICAgdGYueS12ZCp2eSxcclxuICAgICAgdngsXHJcbiAgICAgIHZ5XHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGR0KSB7XHJcbiAgICBpZih0aGlzLmVuYWJsZWQgJiYgdGhpcy5ib3VuZEJveENsYikge1xyXG4gICAgICB0aGlzLmNlbnRlclZpZXcoZHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvT2JqZWN0M0RXYXRjaGVyLmpzIiwiaW1wb3J0IHtUSFJFRX0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPcmJpdCBleHRlbmRzIFRIUkVFLkV2ZW50RGlzcGF0Y2hlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG9iamVjdCwgZG9tRWxlbWVudCkge1xyXG4gICAgc3VwZXIoKTtcclxuICBcdHRoaXMub2JqZWN0ID0gb2JqZWN0O1xyXG4gIFx0dGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudCB8fCBkb2N1bWVudC5ib2R5O1xyXG5cclxuICBcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxyXG4gIFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgXHQvLyBcInRhcmdldFwiIHNldHMgdGhlIGxvY2F0aW9uIG9mIGZvY3VzLCB3aGVyZSB0aGUgb2JqZWN0IG9yYml0cyBhcm91bmRcclxuICBcdHRoaXMudGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gZG9sbHkgaW4gYW5kIG91dChQZXJzcGVjdGl2ZUNhbWVyYSBvbmx5KVxyXG4gIFx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XHJcbiAgXHR0aGlzLm1heERpc3RhbmNlID0gSW5maW5pdHk7XHJcblxyXG4gIFx0Ly8gSG93IGZhciB5b3UgY2FuIHpvb20gaW4gYW5kIG91dChPcnRob2dyYXBoaWNDYW1lcmEgb25seSlcclxuICBcdHRoaXMubWluWm9vbSA9IDA7XHJcbiAgXHR0aGlzLm1heFpvb20gPSBJbmZpbml0eTtcclxuXHJcbiAgXHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgdmVydGljYWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cclxuICBcdC8vIFJhbmdlIGlzIDAgdG8gTWF0aC5QSSByYWRpYW5zLlxyXG4gIFx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDsgLy8gcmFkaWFuc1xyXG4gIFx0dGhpcy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSTsgLy8gcmFkaWFuc1xyXG5cclxuICBcdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCBob3Jpem9udGFsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXHJcbiAgXHQvLyBJZiBzZXQsIG11c3QgYmUgYSBzdWItaW50ZXJ2YWwgb2YgdGhlIGludGVydmFsIFstTWF0aC5QSSwgTWF0aC5QSSBdLlxyXG4gIFx0dGhpcy5taW5BemltdXRoQW5nbGUgPSAtSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuICBcdHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7IC8vIHJhZGlhbnNcclxuXHJcbiAgXHQvLyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSlcclxuICBcdC8vIElmIGRhbXBpbmcgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXHJcbiAgXHR0aGlzLmVuYWJsZURhbXBpbmcgPSBmYWxzZTtcclxuICBcdHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMjU7XHJcblxyXG4gIFx0Ly8gVGhpcyBvcHRpb24gYWN0dWFsbHkgZW5hYmxlcyBkb2xseWluZyBpbiBhbmQgb3V0OyBsZWZ0IGFzIFwiem9vbVwiIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cclxuICBcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHpvb21pbmdcclxuICBcdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XHJcbiAgXHR0aGlzLnpvb21TcGVlZCA9IDEuMDtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xyXG4gIFx0dGhpcy5lbmFibGVSb3RhdGUgPSB0cnVlO1xyXG4gIFx0dGhpcy5yb3RhdGVTcGVlZCA9IDEuMDtcclxuXHJcbiAgXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSBwYW5uaW5nXHJcbiAgXHR0aGlzLmVuYWJsZVBhbiA9IHRydWU7XHJcblxyXG4gIFx0Ly8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcclxuICBcdC8vIElmIGF1dG8tcm90YXRlIGlzIGVuYWJsZWQsIHlvdSBtdXN0IGNhbGwgY29udHJvbHMudXBkYXRlKCkgaW4geW91ciBhbmltYXRpb24gbG9vcFxyXG4gIFx0dGhpcy5hdXRvUm90YXRlID0gZmFsc2U7XHJcbiAgXHR0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcclxuXHJcbiAgXHQvLyBmb3IgcmVzZXRcclxuICBcdHRoaXMudGFyZ2V0MCA9IHRoaXMudGFyZ2V0LmNsb25lKCk7XHJcbiAgXHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgXHR0aGlzLnpvb20wID0gdGhpcy5vYmplY3Quem9vbTtcclxuXHJcbiAgXHQvL1xyXG4gIFx0Ly8gcHVibGljIG1ldGhvZHNcclxuICBcdC8vXHJcbiAgXHR0aGlzLmdldFBvbGFyQW5nbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgXHRcdHJldHVybiBzcGhlcmljYWwucGhpO1xyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLmdldEF6aW11dGhhbEFuZ2xlID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRyZXR1cm4gc3BoZXJpY2FsLnRoZXRhO1xyXG4gIFx0fTtcclxuXHJcbiAgXHR0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gIFx0XHRzY29wZS50YXJnZXQuY29weShzY29wZS50YXJnZXQwKTtcclxuICBcdFx0c2NvcGUub2JqZWN0LnBvc2l0aW9uLmNvcHkoc2NvcGUucG9zaXRpb24wKTtcclxuICBcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBzY29wZS56b29tMDtcclxuXHJcbiAgXHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoY2hhbmdlRXZlbnQpO1xyXG5cclxuICBcdFx0c2NvcGUudXBkYXRlKCk7XHJcbiAgXHR9O1xyXG5cclxuICAgIHRoaXMuem9vbU91dCA9IGZ1bmN0aW9uKHNwZWVkPXRoaXMuem9vbVNwZWVkKSB7XHJcbiAgICAgIGNvbnN0IF9zcGVlZCA9IHRoaXMuem9vbVNwZWVkO1xyXG4gICAgICB0aGlzLnpvb21TcGVlZCA9IHNwZWVkO1xyXG4gICAgICBkb2xseUluKGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBfc3BlZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuem9vbUluID0gZnVuY3Rpb24oc3BlZWQ9dGhpcy56b29tU3BlZWQpIHtcclxuICAgICAgY29uc3QgX3NwZWVkID0gdGhpcy56b29tU3BlZWQ7XHJcbiAgICAgIHRoaXMuem9vbVNwZWVkID0gc3BlZWQ7XHJcbiAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgdGhpcy56b29tU3BlZWQgPSBfc3BlZWQ7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuZ2V0U2NhbGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHNjYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0U2NhbGUgPSBmdW5jdGlvbihuZXdTY2FsZSkge1xyXG4gICAgICBzY2FsZSA9IG5ld1NjYWxlO1xyXG4gICAgfVxyXG5cclxuICBcdC8vIHRoaXMgbWV0aG9kIGlzIGV4cG9zZWQsIGJ1dCBwZXJoYXBzIGl0IHdvdWxkIGJlIGJldHRlciBpZiB3ZSBjYW4gbWFrZSBpdCBwcml2YXRlLi4uXHJcbiAgXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXHJcbiAgXHRcdHZhciBxdWF0ID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tVW5pdFZlY3RvcnMob2JqZWN0LnVwLCBuZXcgVEhSRUUuVmVjdG9yMygwLCAxLCAwKSk7XHJcbiAgXHRcdHZhciBxdWF0SW52ZXJzZSA9IHF1YXQuY2xvbmUoKS5pbnZlcnNlKCk7XHJcbiAgXHRcdHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHR2YXIgbGFzdFF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xyXG5cclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XHJcbiAgXHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xyXG4gIFx0XHRcdG9mZnNldC5jb3B5KHBvc2l0aW9uKS5zdWIoc2NvcGUudGFyZ2V0KTtcclxuICBcdFx0XHQvLyByb3RhdGUgb2Zmc2V0IHRvIFwieS1heGlzLWlzLXVwXCIgc3BhY2VcclxuICBcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXQpO1xyXG4gIFx0XHRcdC8vIGFuZ2xlIGZyb20gei1heGlzIGFyb3VuZCB5LWF4aXNcclxuICBcdFx0XHRzcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMob2Zmc2V0KTtcclxuICBcdFx0XHRpZihzY29wZS5hdXRvUm90YXRlKSB7XHJcbiAgXHRcdFx0XHRyb3RhdGVMZWZ0KGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkpO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0XHRzcGhlcmljYWwudGhldGEgKz0gc3BoZXJpY2FsRGVsdGEudGhldGE7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnBoaSArPSBzcGhlcmljYWxEZWx0YS5waGk7XHJcbiAgXHRcdFx0Ly8gcmVzdHJpY3QgdGhldGEgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC50aGV0YSA9IE1hdGgubWF4KHNjb3BlLm1pbkF6aW11dGhBbmdsZSwgTWF0aC5taW4oc2NvcGUubWF4QXppbXV0aEFuZ2xlLCBzcGhlcmljYWwudGhldGEpKTtcclxuICBcdFx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5waGkgPSBNYXRoLm1heChzY29wZS5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbihzY29wZS5tYXhQb2xhckFuZ2xlLCBzcGhlcmljYWwucGhpKSk7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLm1ha2VTYWZlKCk7XHJcbiAgXHRcdFx0c3BoZXJpY2FsLnJhZGl1cyAqPSBzY2FsZTtcclxuICBcdFx0XHQvLyByZXN0cmljdCByYWRpdXMgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xyXG4gIFx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgPSBNYXRoLm1heChzY29wZS5taW5EaXN0YW5jZSwgTWF0aC5taW4oc2NvcGUubWF4RGlzdGFuY2UsIHNwaGVyaWNhbC5yYWRpdXMpKTtcclxuICBcdFx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cclxuICBcdFx0XHRzY29wZS50YXJnZXQuYWRkKHBhbk9mZnNldCk7XHJcbiAgXHRcdFx0b2Zmc2V0LnNldEZyb21TcGhlcmljYWwoc3BoZXJpY2FsKTtcclxuICBcdFx0XHQvLyByb3RhdGUgb2Zmc2V0IGJhY2sgdG8gXCJjYW1lcmEtdXAtdmVjdG9yLWlzLXVwXCIgc3BhY2VcclxuICBcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKHF1YXRJbnZlcnNlKTtcclxuICBcdFx0XHRwb3NpdGlvbi5jb3B5KHNjb3BlLnRhcmdldCkuYWRkKG9mZnNldCk7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lmxvb2tBdChzY29wZS50YXJnZXQpO1xyXG5cclxuICBcdFx0XHRpZihzY29wZS5lbmFibGVEYW1waW5nPT09dHJ1ZSkge1xyXG4gIFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEudGhldGEgKj0oMS1zY29wZS5kYW1waW5nRmFjdG9yKTtcclxuICBcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAqPSgxLXNjb3BlLmRhbXBpbmdGYWN0b3IpO1xyXG4gIFx0XHRcdH0gZWxzZSB7XHJcbiAgXHRcdFx0XHRzcGhlcmljYWxEZWx0YS5zZXQoMCwgMCwgMCk7XHJcbiAgXHRcdFx0fVxyXG5cclxuICBcdFx0XHRzY2FsZSA9IDE7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LnNldCgwLCAwLCAwKTtcclxuXHJcbiAgXHRcdFx0Ly8gdXBkYXRlIGNvbmRpdGlvbiBpczpcclxuICBcdFx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcclxuICBcdFx0XHQvLyB1c2luZyBzbWFsbC1hbmdsZSBhcHByb3hpbWF0aW9uIGNvcyh4LzIpID0gMS14XjIgLyA4XHJcblxyXG4gIFx0XHRcdGlmKHpvb21DaGFuZ2VkIHx8XHJcbiAgXHRcdFx0XHRsYXN0UG9zaXRpb24uZGlzdGFuY2VUb1NxdWFyZWQoc2NvcGUub2JqZWN0LnBvc2l0aW9uKSA+IEVQUyB8fFxyXG4gIFx0XHRcdFx0OCAqKDEtbGFzdFF1YXRlcm5pb24uZG90KHNjb3BlLm9iamVjdC5xdWF0ZXJuaW9uKSkgPiBFUFMpIHtcclxuXHJcbiAgXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcclxuXHJcbiAgXHRcdFx0XHRsYXN0UG9zaXRpb24uY29weShzY29wZS5vYmplY3QucG9zaXRpb24pO1xyXG4gIFx0XHRcdFx0bGFzdFF1YXRlcm5pb24uY29weShzY29wZS5vYmplY3QucXVhdGVybmlvbik7XHJcbiAgXHRcdFx0XHR6b29tQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuICBcdFx0XHRcdHJldHVybiB0cnVlO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0XHRyZXR1cm4gZmFsc2U7XHJcbiAgXHRcdH07XHJcbiAgXHR9KCk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgXHQvL1xyXG4gIFx0Ly8gaW50ZXJuYWxzXHJcbiAgXHQvL1xyXG4gIFx0dmFyIHNjb3BlID0gdGhpcztcclxuICBcdHZhciBjaGFuZ2VFdmVudCA9IHsgdHlwZTogJ2NoYW5nZScgfTtcclxuICBcdHZhciBFUFMgPSAxZS02O1xyXG4gIFx0Ly8gY3VycmVudCBwb3NpdGlvbiBpbiBzcGhlcmljYWwgY29vcmRpbmF0ZXNcclxuICBcdHZhciBzcGhlcmljYWwgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XHJcbiAgXHR2YXIgc3BoZXJpY2FsRGVsdGEgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XHJcblxyXG4gIFx0dmFyIHNjYWxlID0gMTtcclxuICBcdHZhciBwYW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0dmFyIHpvb21DaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gIFx0ZnVuY3Rpb24gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSB7XHJcbiAgXHRcdHJldHVybiAyICogTWF0aC5QSSAvIDYwIC8gNjAgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XHJcbiAgXHR9XHJcblxyXG4gIFx0ZnVuY3Rpb24gZ2V0Wm9vbVNjYWxlKCkge1xyXG4gIFx0XHRyZXR1cm4gTWF0aC5wb3coMC45NSwgc2NvcGUuem9vbVNwZWVkKTtcclxuICBcdH1cclxuXHJcbiAgXHRmdW5jdGlvbiByb3RhdGVMZWZ0KGFuZ2xlKSB7XHJcbiAgXHRcdHNwaGVyaWNhbERlbHRhLnRoZXRhIC09IGFuZ2xlO1xyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIHJvdGF0ZVVwKGFuZ2xlKSB7XHJcbiAgXHRcdHNwaGVyaWNhbERlbHRhLnBoaSAtPSBhbmdsZTtcclxuICBcdH1cclxuXHJcbiAgXHR2YXIgcGFuTGVmdCA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgdiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcbiAgXHRcdHJldHVybiBmdW5jdGlvbiBwYW5MZWZ0KGRpc3RhbmNlLCBvYmplY3RNYXRyaXgpIHtcclxuICBcdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4ob2JqZWN0TWF0cml4LCAwKTsgLy8gZ2V0IFggY29sdW1uIG9mIG9iamVjdE1hdHJpeFxyXG4gIFx0XHRcdHYubXVsdGlwbHlTY2FsYXIoLSBkaXN0YW5jZSk7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LmFkZCh2KTtcclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHR2YXIgcGFuVXAgPSBmdW5jdGlvbigpIHtcclxuICBcdFx0dmFyIHYgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gIFx0XHRyZXR1cm4gZnVuY3Rpb24gcGFuVXAoZGlzdGFuY2UsIG9iamVjdE1hdHJpeCkge1xyXG4gIFx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbihvYmplY3RNYXRyaXgsIDEpOyAvLyBnZXQgWSBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XHJcbiAgXHRcdFx0di5tdWx0aXBseVNjYWxhcihkaXN0YW5jZSk7XHJcbiAgXHRcdFx0cGFuT2Zmc2V0LmFkZCh2KTtcclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcclxuICBcdHNjb3BlLnBhbiA9IGZ1bmN0aW9uKCkge1xyXG4gIFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuICBcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbihkZWx0YVgsIGRlbHRhWSkge1xyXG4gIFx0XHRcdHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudDtcclxuICBcdFx0XHRpZihzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSkge1xyXG4gIFx0XHRcdFx0Ly8gcGVyc3BlY3RpdmVcclxuICBcdFx0XHRcdHZhciBwb3NpdGlvbiA9IHNjb3BlLm9iamVjdC5wb3NpdGlvbjtcclxuICBcdFx0XHRcdG9mZnNldC5jb3B5KHBvc2l0aW9uKS5zdWIoc2NvcGUudGFyZ2V0KTtcclxuICBcdFx0XHRcdHZhciB0YXJnZXREaXN0YW5jZSA9IG9mZnNldC5sZW5ndGgoKTtcclxuICBcdFx0XHRcdC8vIGhhbGYgb2YgdGhlIGZvdiBpcyBjZW50ZXIgdG8gdG9wIG9mIHNjcmVlblxyXG4gIFx0XHRcdFx0dGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oKHNjb3BlLm9iamVjdC5mb3YgLyAyKSAqIE1hdGguUEkgLyAxODAuMCk7XHJcbiAgXHRcdFx0XHQvLyB3ZSBhY3R1YWxseSBkb24ndCB1c2Ugc2NyZWVuV2lkdGgsIHNpbmNlIHBlcnNwZWN0aXZlIGNhbWVyYSBpcyBmaXhlZCB0byBzY3JlZW4gaGVpZ2h0XHJcbiAgXHRcdFx0XHRwYW5MZWZ0KDIgKiBkZWx0YVggKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4KTtcclxuICBcdFx0XHRcdHBhblVwKDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4KTtcclxuICBcdFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0XHQvLyBvcnRob2dyYXBoaWNcclxuICBcdFx0XHRcdHBhbkxlZnQoZGVsdGFYICooc2NvcGUub2JqZWN0LnJpZ2h0LXNjb3BlLm9iamVjdC5sZWZ0KSAvIHNjb3BlLm9iamVjdC56b29tIC8gZWxlbWVudC5jbGllbnRXaWR0aCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0XHRwYW5VcChkZWx0YVkgKihzY29wZS5vYmplY3QudG9wLXNjb3BlLm9iamVjdC5ib3R0b20pIC8gc2NvcGUub2JqZWN0Lnpvb20gLyBlbGVtZW50LmNsaWVudEhlaWdodCwgc2NvcGUub2JqZWN0Lm1hdHJpeCk7XHJcbiAgXHRcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRcdC8vIGNhbWVyYSBuZWl0aGVyIG9ydGhvZ3JhcGhpYyBub3IgcGVyc3BlY3RpdmVcclxuICBcdFx0XHRcdGNvbnNvbGUud2FybignV0FSTklORzogT3JiaXRDb250cm9scy5qcyBlbmNvdW50ZXJlZCBhbiB1bmtub3duIGNhbWVyYSB0eXBlLXBhbiBkaXNhYmxlZC4nKTtcclxuICBcdFx0XHRcdHNjb3BlLmVuYWJsZVBhbiA9IGZhbHNlO1xyXG4gIFx0XHRcdH1cclxuICBcdFx0fTtcclxuICBcdH0oKTtcclxuXHJcbiAgXHRmdW5jdGlvbiBkb2xseUluKGRvbGx5U2NhbGUpIHtcclxuICAgICAgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRzY2FsZSAvPSBkb2xseVNjYWxlO1xyXG4gIFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChzY29wZS5taW5ab29tLCBNYXRoLm1pbihzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAqIGRvbGx5U2NhbGUpKTtcclxuICBcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICBcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1kb2xseS96b29tIGRpc2FibGVkLicpO1xyXG4gIFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcclxuICBcdFx0fVxyXG4gIFx0fVxyXG5cclxuICBcdGZ1bmN0aW9uIGRvbGx5T3V0KGRvbGx5U2NhbGUpIHtcclxuICAgICAgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICBcdFx0XHRzY2FsZSAqPSBkb2xseVNjYWxlO1xyXG4gIFx0XHR9IGVsc2UgaWYoc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKSB7XHJcbiAgXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heChzY29wZS5taW5ab29tLCBNYXRoLm1pbihzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAvIGRvbGx5U2NhbGUpKTtcclxuICBcdFx0XHRzY29wZS5vYmplY3QudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gIFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcclxuICBcdFx0fSBlbHNlIHtcclxuICBcdFx0XHRjb25zb2xlLndhcm4oJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZS1kb2xseS96b29tIGRpc2FibGVkLicpO1xyXG4gIFx0XHRcdHNjb3BlLmVuYWJsZVpvb20gPSBmYWxzZTtcclxuICBcdFx0fVxyXG4gIFx0fVxyXG5cclxuICAgIC8qIEFjdGlvbnMgKi9cclxuXHJcbiAgICBmdW5jdGlvbiByb3RhdGUoZXZlbnQsIGRhdGEpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVSb3RhdGUgJiYgZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudDtcclxuICAgICAgICAvLyByb3RhdGluZyBhY3Jvc3Mgd2hvbGUgc2NyZWVuIGdvZXMgMzYwIGRlZ3JlZXMgYXJvdW5kXHJcbiAgICAgICAgcm90YXRlTGVmdCgyICogTWF0aC5QSSAqIGRhdGEuZHggLyBlbGVtZW50LmNsaWVudFdpZHRoICogc2NvcGUucm90YXRlU3BlZWQpO1xyXG4gICAgICAgIC8vIHJvdGF0aW5nIHVwIGFuZCBkb3duIGFsb25nIHdob2xlIHNjcmVlbiBhdHRlbXB0cyB0byBnbyAzNjAsIGJ1dCBsaW1pdGVkIHRvIDE4MFxyXG4gICAgICAgIHJvdGF0ZVVwKDIgKiBNYXRoLlBJICogZGF0YS5keSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICogc2NvcGUucm90YXRlU3BlZWQpO1xyXG4gICAgICAgIHNjb3BlLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGFuKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgIGlmKHNjb3BlLmVuYWJsZWQgJiYgc2NvcGUuZW5hYmxlUGFuICYmIGRhdGEuc3RhdGU9PT0nbW92ZScpIHtcclxuICAgICAgICBzY29wZS5wYW4oZGF0YS5keCwgZGF0YS5keSk7XHJcbiAgICAgICAgc2NvcGUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBvZmZzZXREb2xseShldmVudCwgZGF0YSkge1xyXG4gICAgICBpZihzY29wZS5lbmFibGVkICYmIHNjb3BlLmVuYWJsZVpvb20gJiYgZGF0YS5zdGF0ZT09PSdtb3ZlJykge1xyXG4gICAgICAgIGlmKGRhdGEuZHk+MCkge1xyXG4gICAgICAgICAgZG9sbHlJbihnZXRab29tU2NhbGUoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmKGRhdGEuZHk8MCkge1xyXG4gICAgICAgICAgZG9sbHlPdXQoZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY29wZS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHdoZWVsRG9sbHkoZXZlbnQpIHtcclxuICAgICAgaWYoc2NvcGUuZW5hYmxlZCAmJiBzY29wZS5lbmFibGVab29tKSB7XHJcbiAgICAgICAgaWYoZXZlbnQuZGVsdGFZPjApIHtcclxuICAgICAgICAgIGRvbGx5T3V0KGdldFpvb21TY2FsZSgpKTtcclxuICAgICAgICB9IGVsc2UgaWYoZXZlbnQuZGVsdGFZPDApIHtcclxuICAgICAgICAgIGRvbGx5SW4oZ2V0Wm9vbVNjYWxlKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzY29wZS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYWN0aW9ucyA9IHtcclxuICAgICAgcm90YXRlLFxyXG4gICAgICBwYW4sXHJcbiAgICAgIG9mZnNldERvbGx5LFxyXG4gICAgICB3aGVlbERvbGx5XHJcbiAgICB9XHJcblxyXG4gIFx0Ly8gZm9yY2UgYW4gdXBkYXRlIGF0IHN0YXJ0XHJcbiAgXHR0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvT3JiaXQuanMiLCJpbXBvcnQgeyQsUERGSlN9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgSW1hZ2VCYXNlIGZyb20gJy4vSW1hZ2VCYXNlJztcclxuaW1wb3J0IFBkZiBmcm9tICcuL1BkZic7XHJcbmltcG9ydCBCYXNlTWF0aFV0aWxzIGZyb20gJy4vQmFzZU1hdGhVdGlscyc7XHJcbmltcG9ydCBDdXN0b21FdmVudENvbnZlcnRlciBmcm9tICcuL0N1c3RvbUV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IFBvbHlUYXJnZXQgZnJvbSAnLi90YXJnZXRzL1BvbHlUYXJnZXQnO1xyXG5cclxuaW1wb3J0IEZpbmRlciBmcm9tICcuL0ZpbmRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZGZJbWFnZSBleHRlbmRzIEltYWdlQmFzZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yLCBwZGYsIG4pIHtcclxuICAgIHN1cGVyKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGNvbG9yKTtcclxuXHJcbiAgICB0aGlzLnF1ZXJ5ID0gJyc7XHJcbiAgICB0aGlzLm4gPSBuO1xyXG4gICAgdGhpcy5wZGYgPSBwZGY7XHJcbiAgICB0aGlzLnYgPSB7eDogMCwgeTogMCwgejogMCwgc2V0OiBmdW5jdGlvbih4LHkseikge1xyXG4gICAgICB0aGlzLng9eDsgdGhpcy55PXk7IHRoaXMuej16O1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sIHRyYW5zZm9ybTogZnVuY3Rpb24obSkge1xyXG4gICAgICBjb25zdCB4PW0ubVswXVswXSp0aGlzLngrbS5tWzFdWzBdKnRoaXMueSttLm1bMl1bMF0qdGhpcy56LFxyXG4gICAgICAgICAgICB5PW0ubVswXVsxXSp0aGlzLngrbS5tWzFdWzFdKnRoaXMueSttLm1bMl1bMV0qdGhpcy56LFxyXG4gICAgICAgICAgICB6PW0ubVswXVsyXSp0aGlzLngrbS5tWzBdWzJdKnRoaXMueSttLm1bMl1bMF0qdGhpcy56O1xyXG4gICAgICB0aGlzLng9eDtcclxuICAgICAgdGhpcy55PXk7XHJcbiAgICAgIHRoaXMuej16O1xyXG4gICAgICByZXR1cm4gdGhpcztcclxuICAgIH19O1xyXG4gICAgdGhpcy5tID0ge206IFtbMSwwLDBdLFswLDEsMF0sWzAsMCwxXV0sIHNldDogZnVuY3Rpb24obTAwLG0wMSxtMDIsbTEwLG0xMSxtMTIsbTIwLG0yMSxtMjIpIHtcclxuICAgICAgdGhpcy5tPVtbbTAwLG0wMSxtMDJdLFttMTAsbTExLG0xMl0sW20yMCxtMjEsbTIyXV07XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfX07XHJcblxyXG4gICAgdGhpcy5zdGFydFJlbmRlciA9ICgpPT4ge1xyXG4gICAgICB0aGlzLnBkZi5nZXRIYW5kbGVyKHRoaXMucmVuZGVyLmJpbmQodGhpcykpO1xyXG4gICAgfTtcclxuICAgIFByb21pc2UucmVzb2x2ZSgpLlxyXG4gICAgICB0aGVuKCgpPT4gdGhpcy5wZGYuZ2V0SGFuZGxlcih0aGlzLmluaXQuYmluZCh0aGlzKSkpO1xyXG4gIH1cclxuXHJcbiAgc2V0UXVlcnkocXVlcnkpIHtcclxuICAgIHRoaXMucXVlcnkgPSBxdWVyeS50cmltKCk7XHJcbiAgICBpZih0aGlzLnRleHRDb250ZW50KSB7XHJcbiAgICAgIHRoaXMuc2V0SGl0cyh0aGlzLnRleHRDb250ZW50KTtcclxuICAgICAgLy8gdGhpcy5maW5pc2hMb2FkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZWN0U2l6ZShyKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB3aWR0aDogclsyXS1yWzBdLFxyXG4gICAgICBoZWlnaHQ6IHJbM10tclsxXVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZVBvbHkobSwgcCwgcykge1xyXG4gICAgY29uc3QgcG9seSA9IFtdLCB2ID0gdGhpcy52O1xyXG4gICAgdi5zZXQocC54LCBwLnksIDEpLnRyYW5zZm9ybShtKTtcclxuICAgIHBvbHkucHVzaCh7eDogdi54LCB5OiB2Lnl9KTtcclxuICAgIHYuc2V0KHAueCwgcC55K3MuaGVpZ2h0LCAxKS50cmFuc2Zvcm0obSk7XHJcbiAgICBwb2x5LnB1c2goe3g6IHYueCwgeTogdi55fSk7XHJcbiAgICB2LnNldChwLngrcy53aWR0aCwgcC55K3MuaGVpZ2h0LCAxKS50cmFuc2Zvcm0obSk7XHJcbiAgICBwb2x5LnB1c2goe3g6IHYueCwgeTogdi55fSk7XHJcbiAgICB2LnNldChwLngrcy53aWR0aCwgcC55LCAxKS50cmFuc2Zvcm0obSk7XHJcbiAgICBwb2x5LnB1c2goe3g6IHYueCwgeTogdi55fSk7XHJcbiAgICByZXR1cm4gcG9seTtcclxuICB9XHJcblxyXG4gIGdldFNpbXVsYXRlZERvYygpIHtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgc2ltdWxhdGUoZSwgZG9jLCB4LCB5KSB7XHJcbiAgICBpZih0aGlzLmV2ZW50Q29udmVydGVyKSB7XHJcbiAgICAgIHRoaXMuZXZlbnRDb252ZXJ0ZXIuY29udmVydChlLCB7ZG9jLCB4LCB5fSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRBbm5vdGF0aW9ucyhhbm5vcykge1xyXG4gICAgY29uc3QgdCA9IHRoaXMudmlld3BvcnQudHJhbnNmb3JtLFxyXG4gICAgICB0YXJnZXRzID0gW107XHJcbiAgICB0aGlzLm0uc2V0KFxyXG4gICAgICB0WzBdLHRbMV0sMCxcclxuICAgICAgdFsyXSx0WzNdLDAsXHJcbiAgICAgIHRbNF0sdFs1XSwxKTtcclxuXHJcbiAgICBmb3IobGV0IGFubm8gb2YgYW5ub3MpIHtcclxuICAgICAgaWYgKGFubm8uc3VidHlwZT09PSdMaW5rJyB8fCBhbm5vLnN1YnR5cGU9PT0nV2lkZ2V0Jykge1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSBhbm5vLnJlY3QsXHJcbiAgICAgICAgICBhUG9zID0ge1xyXG4gICAgICAgICAgICB4OiByZWN0WzBdLFxyXG4gICAgICAgICAgICB5OiByZWN0WzFdXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgYVN6ID0gdGhpcy5yZWN0U2l6ZShyZWN0KTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBuZXcgUG9seVRhcmdldCh0aGlzLmNyZWF0ZVBvbHkodGhpcy5tLCBhUG9zLCBhU3opLm1hcCgocCk9PiAoe3g6IHAueC90aGlzLnZpZXdwb3J0LndpZHRoLCB5OiAxLXAueS90aGlzLnZpZXdwb3J0LmhlaWdodH0pKSk7XHJcbiAgICAgICAgdGFyZ2V0LmFubm8gPSBhbm5vO1xyXG4gICAgICAgIHRhcmdldC5jYWxsYmFjayA9IHRoaXMuYW5ub0NsYi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRhcmdldHMucHVzaCh0YXJnZXQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZih0YXJnZXRzLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLmV2ZW50Q29udmVydGVyID0gbmV3IEN1c3RvbUV2ZW50Q29udmVydGVyKHRoaXMud25kLCB0aGlzLmRvYywgUG9seVRhcmdldC50ZXN0LCB0aGlzLmdldFNpbXVsYXRlZERvYygpKTtcclxuICAgICAgZm9yKGxldCB0YXJnZXQgb2YgdGFyZ2V0cykge1xyXG4gICAgICAgIHRoaXMuZXZlbnRDb252ZXJ0ZXIuYWRkQ3VzdG9tKHRhcmdldCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEhpdHModGV4dENvbnRlbnQpIHtcclxuICAgIHRoaXMudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcclxuICAgIGlmKHRoaXMucXVlcnkhPT0nJykge1xyXG4gICAgICB0aGlzLmZpbmRlciA9IG5ldyBGaW5kZXIodGV4dENvbnRlbnQuaXRlbXMubWFwKChpdGVtKT0+IGl0ZW0uc3RyKSwgdGhpcy5xdWVyeSwge2NvbnRleHRzOiBmYWxzZX0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVySGl0cygpIHtcclxuICAgIGlmKHRoaXMuZmluZGVyKSB7XHJcbiAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnBhZ2UudmlldyxcclxuICAgICAgICB0ZXN0U3ogPSAkKCc8ZGl2IHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyB2aXNpYmlsaXR5OiBoaWRkZW47XCI+PC9kaXY+JykuYXBwZW5kVG8oJ2JvZHknKSwgdGV4dERpdiA9IHRlc3RTelswXSxcclxuICAgICAgICBiYXNlT2Zmc2V0ID0gdGVzdFN6Lm9mZnNldCgpLmxlZnQ7XHJcbiAgICAgIGZvcihsZXQgaGl0IG9mIHRoaXMuZmluZGVyLmdldEhpdHMoKSkge1xyXG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMudGV4dENvbnRlbnQuaXRlbXNbaGl0LmluZGV4XSxcclxuICAgICAgICAgICAgICAgIHQgPSBQREZKUy5VdGlsLnRyYW5zZm9ybSh0aGlzLnZpZXdwb3J0LnRyYW5zZm9ybSwgaXRlbS50cmFuc2Zvcm0pLFxyXG4gICAgICAgICAgICAgICAgc3R5bGUgPSB0aGlzLnRleHRDb250ZW50LnN0eWxlc1tpdGVtLmZvbnROYW1lXSxcclxuICAgICAgICAgICAgICAgIGFuZ2xlID0gTWF0aC5hdGFuMih0WzFdLCB0WzBdKSsoc3R5bGUudmVydGljYWw/IE1hdGguUEkgLyAyOiAwKSxcclxuICAgICAgICAgICAgICAgIGZvbnRIZWlnaHQgPSBNYXRoLnNxcnQoKHRbMl0gKiB0WzJdKSArICh0WzNdICogdFszXSkpLFxyXG4gICAgICAgICAgICAgICAgZm9udEFzY2VudCA9IHN0eWxlLmFzY2VudD9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUuYXNjZW50ICogZm9udEhlaWdodDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0eWxlLmRlc2NlbnQ/ICgxICsgc3R5bGUuZGVzY2VudCkgKiBmb250SGVpZ2h0OiBmb250SGVpZ2h0KTtcclxuICAgICAgICAgIHRlc3RTei5odG1sKGl0ZW0uc3RyLnN1YnN0cigwLCBoaXQub2Zmc2V0KSsnPHNwYW4+JytpdGVtLnN0ci5zdWJzdHIoaGl0Lm9mZnNldCwgaGl0Lmxlbmd0aCkrJzwvc3Bhbj4nK2l0ZW0uc3RyLnN1YnN0cihoaXQub2Zmc2V0K2hpdC5sZW5ndGgpKTtcclxuXHJcbiAgICAgICAgICB0ZXh0RGl2LnN0eWxlLmZvbnRTaXplID0gZm9udEhlaWdodCsncHgnO1xyXG4gICAgICAgICAgdGV4dERpdi5zdHlsZS5mb250RmFtaWx5ID0gc3R5bGUuZm9udEZhbWlseTtcclxuXHJcbiAgICAgICAgICBjb25zdCB0ZXN0U3BhbiA9IHRlc3RTei5maW5kKCdzcGFuJyksXHJcbiAgICAgICAgICAgICAgaXdpZHRoID0gc3R5bGUudmVydGljYWw/IGl0ZW0uaGVpZ2h0KnRoaXMudmlld3BvcnQuc2NhbGU6IGl0ZW0ud2lkdGgqdGhpcy52aWV3cG9ydC5zY2FsZSxcclxuICAgICAgICAgICAgICB3aWR0aCA9IHRlc3RTei53aWR0aCgpLFxyXG4gICAgICAgICAgICAgIHJlbGF0aXZlT2Zmc2V0ID0gKHRlc3RTcGFuLm9mZnNldCgpLmxlZnQtYmFzZU9mZnNldCkvd2lkdGg7XHJcbiAgICAgICAgICB0aGlzLm0uc2V0KFxyXG4gICAgICAgICAgICAxLDAsMCxcclxuICAgICAgICAgICAgMCwxLDAsXHJcbiAgICAgICAgICAgIHRbNF0rZm9udEFzY2VudCpNYXRoLnNpbihhbmdsZSksdFs1XS1mb250QXNjZW50Kk1hdGguY29zKGFuZ2xlKSwxKTtcclxuICAgICAgICAgIGxldCBwb2x5ID0gdGhpcy5jcmVhdGVQb2x5KHRoaXMubSwge3g6IHJlbGF0aXZlT2Zmc2V0Kml3aWR0aCwgeTogMH0sIHt3aWR0aDogaXdpZHRoKnRlc3RTcGFuLndpZHRoKCkvd2lkdGgsIGhlaWdodDogdGVzdFNwYW4uaGVpZ2h0KCl9KTtcclxuICAgICAgICAgIHBvbHkgPSBwb2x5Lm1hcCgocCk9PiAoe3g6IHAueC90aGlzLnZpZXdwb3J0LndpZHRoLCB5OiAxLXAueS90aGlzLnZpZXdwb3J0LmhlaWdodH0pKTtcclxuICAgICAgICAgIHRoaXMucmVuZGVySGl0KHBvbHkpO1xyXG4gICAgICB9XHJcbiAgICAgIHRlc3RTei5yZW1vdmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFubm9DbGIoZSwgZGF0YSkge1xyXG4gICAgaWYodGhpcy5jb250ZXh0LmRpc3BhdGNoRXZlbnQpIHtcclxuICAgICAgdGhpcy5jb250ZXh0LmRpc3BhdGNoRXZlbnQoe1xyXG4gICAgICAgIHR5cGU6ICdwZGZBbm5vdGF0aW9uJyxcclxuICAgICAgICBldmVudDogZSxcclxuICAgICAgICBhbm5vdGF0aW9uOiBkYXRhLnRhcmdldC5hbm5vXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2FsY1ZpZXdwb3J0KCkge1xyXG4gICAgY29uc3Qgc2NhbGUgPSBCYXNlTWF0aFV0aWxzLmNhbGNTY2FsZSh0aGlzLnNpemUud2lkdGgsIHRoaXMuc2l6ZS5oZWlnaHQsIHRoaXMucmVzVywgdGhpcy5yZXNIKTtcclxuICAgIGlmKCF0aGlzLnZpZXdwb3J0IHx8IE1hdGguYWJzKHRoaXMudmlld3BvcnQuc2NhbGUtc2NhbGUpPjFlLTQpIHtcclxuICAgICAgdGhpcy52aWV3cG9ydCA9IHRoaXMucGFnZS5nZXRWaWV3cG9ydCh7c2NhbGV9KTtcclxuICAgICAgaWYodGhpcy50eXBlIT09J2Z1bGwnKSB7XHJcbiAgICAgICAgaWYodGhpcy50eXBlPT09J3JpZ2h0Jykge1xyXG4gICAgICAgICAgdGhpcy52aWV3cG9ydC5vZmZzZXRYICs9IDAuNSp0aGlzLnZpZXdwb3J0LndpZHRoO1xyXG4gICAgICAgICAgdGhpcy52aWV3cG9ydC50cmFuc2Zvcm1bNF0gLT0gMC41KnRoaXMudmlld3BvcnQud2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlld3BvcnQud2lkdGggLz0gMjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnJlc1cgPSB0aGlzLndpZHRoID0gdGhpcy52aWV3cG9ydC53aWR0aDtcclxuICAgICAgdGhpcy5yZXNIID0gdGhpcy5oZWlnaHQgPSB0aGlzLnZpZXdwb3J0LmhlaWdodDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLnR5cGUgPSB0aGlzLnBkZi5nZXRQYWdlVHlwZSh0aGlzLm4pO1xyXG4gICAgdGhpcy5wZGYuZ2V0UGFnZSh0aGlzLm4pLlxyXG4gICAgICB0aGVuKChwYWdlKT0+IHtcclxuICAgICAgICB0aGlzLnBhZ2UgPSBwYWdlO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IFBkZi5nZXRQYWdlU2l6ZShwYWdlKTtcclxuICAgICAgICBpZih0aGlzLnR5cGUhPT0nZnVsbCcpIHtcclxuICAgICAgICAgIHRoaXMuc2l6ZS53aWR0aCAvPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwYWdlLmdldEFubm90YXRpb25zKCkuXHJcbiAgICAgICAgICB0aGVuKHRoaXMuc2V0QW5ub3RhdGlvbnMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgcGFnZS5nZXRUZXh0Q29udGVudCgpLlxyXG4gICAgICAgICAgdGhlbih0aGlzLnNldEhpdHMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5jYWxjVmlld3BvcnQoKTtcclxuICAgICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgICAgfSkuXHJcbiAgICAgIGNhdGNoKChlKT0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdDYW5ub3QgbG9hZCBQREYgcGFnZTogJysodGhpcy5uKzEpKTtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldFJlc29sdXRpb24ocmVzKSB7XHJcbiAgICBzdXBlci5zZXRSZXNvbHV0aW9uKHJlcyk7XHJcbiAgICBpZih0aGlzLnBhZ2UpIHtcclxuICAgICAgdGhpcy5jYWxjVmlld3BvcnQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcihoYW5kbGVyKSB7XHJcbiAgICBpZih0aGlzLnBhZ2UpIHtcclxuICAgICAgdGhpcy5wYWdlLnJlbmRlcih7XHJcbiAgICAgICAgY2FudmFzQ29udGV4dDogdGhpcy5wdXNoQ3R4KCksXHJcbiAgICAgICAgdmlld3BvcnQ6IHRoaXMudmlld3BvcnRcclxuICAgICAgfSkucHJvbWlzZS5cclxuICAgICAgdGhlbigoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbmRlckhpdHMoKTtcclxuICAgICAgICB0aGlzLnBvcEN0eCgpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMucmVuZGVyQmxhbmtQYWdlKCk7XHJcbiAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9QZGZJbWFnZS5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2gge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIHBhZ2VzKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMucGFnZXMgPSBwYWdlcztcclxuICAgIHRoaXMucHJldlJlc3VsdHMgPSBbXTtcclxuICAgIGNvbnRhaW5lci5odG1sKGBcclxuICAgICAgPGRpdiBjbGFzcz1cInNlYXJjaFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJxdWVyeVwiPlxyXG4gICAgICAgICAgPGlucHV0IGNsYXNzPVwiaW5wUXVlcnlcIiB0eXBlPVwidGV4dFwiIG1heGxlbmd0aD1cIjMwXCIgdmFsdWU9XCJcIiAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJyZXN1bHRzXCI+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInN0YXR1c1wiPlxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgLmZiM2RRRmlsdGVyKCkpO1xyXG4gICAgdGhpcy5xdWVyeSA9IGNvbnRhaW5lci5maW5kKCcucXVlcnkgaW5wdXQnKTtcclxuICAgIHRoaXMucmVzdWx0cyA9IGNvbnRhaW5lci5maW5kKCcucmVzdWx0cycpO1xyXG4gICAgdGhpcy5zdGF0dXMgPSBjb250YWluZXIuZmluZCgnLnN0YXR1cycpO1xyXG5cclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG5hdmlnYXRlOiB0aGlzLm5hdmlnYXRlLmJpbmQodGhpcyksXHJcbiAgICAgIGRvUXVlcnk6IHRoaXMuZG9RdWVyeS5iaW5kKHRoaXMpXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucXVlcnkub24oJ2tleWRvd24nLCB0aGlzLmJpbmRzLmRvUXVlcnkpO1xyXG4gICAgdGhpcy5yZXN1bHRzLm9uKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMucmVzdWx0cy5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kcy5uYXZpZ2F0ZSk7XHJcbiAgICB0aGlzLnF1ZXJ5Lm9mZigna2V5ZG93bicsIHRoaXMuYmluZHMuZG9RdWVyeSk7XHJcbiAgfVxyXG5cclxuICBuYXZpZ2F0ZShlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZih0aGlzLm9uTmF2aWdhdGUhPT11bmRlZmluZWQpIHtcclxuICAgICAgbGV0IHRhcmdldCA9ICQoZS50YXJnZXQpO1xyXG4gICAgICBpZighdGFyZ2V0Lmhhc0NsYXNzKCdyZXN1bHQnKSkge1xyXG4gICAgICAgIGNvbnN0IHQgPSB0YXJnZXQuZmluZCgnLnJlc3VsdCcpO1xyXG4gICAgICAgIGlmKHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICB0YXJnZXQgPSB0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHdoaWxlKHRhcmdldC5sZW5ndGggJiYgIXRhcmdldC5oYXNDbGFzcygncmVzdWx0JykpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gJCh0YXJnZXRbMF0ucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHBhZ2UgPSB0YXJnZXQuYXR0cignZGF0YScpO1xyXG4gICAgICBpZihwYWdlIT09dW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5vbk5hdmlnYXRlKHBhcnNlSW50KHBhZ2UpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZG9RdWVyeSgpIHtcclxuICAgIGlmKHRoaXMub25RdWVyeSkge1xyXG4gICAgICBjb25zdCBxdWVyeVN0YW1wID0gdGhpcy5xdWVyeVN0YW1wID0gRGF0ZS5ub3coKTtcclxuICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICBpZihxdWVyeVN0YW1wID09PSB0aGlzLnF1ZXJ5U3RhbXApIHtcclxuICAgICAgICAgIHRoaXMub25RdWVyeSh0aGlzLnF1ZXJ5WzBdLnZhbHVlLnRyaW0oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFJlc3VsdHMocmVzdWx0cywgbGFzdFBhZ2UpIHtcclxuICAgIGlmKHRoaXMucHJldlJlc3VsdHMubGVuZ3RoICYmIHJlc3VsdHNbMF0hPT10aGlzLnByZXZSZXN1bHRzWzBdKSB7XHJcbiAgICAgIHRoaXMucHJldlJlc3VsdHMgPSBbXTtcclxuICAgICAgdGhpcy5yZXN1bHRzLmh0bWwoJycpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaHRtbHMgPSBbXTtcclxuICAgIGZvcihsZXQgaT10aGlzLnByZXZSZXN1bHRzLmxlbmd0aDsgaTxyZXN1bHRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNbaV07XHJcbiAgICAgIGh0bWxzLnB1c2goJzxkaXYgY2xhc3M9XCJyZXN1bHRcIiBkYXRhPVwiJytyZXN1bHQucGFnZSsnXCI+Jyk7XHJcbiAgICAgICAgaHRtbHMucHVzaCgnPGEgaHJlZj1cIiNcIj4nKTtcclxuICAgICAgICAgIGh0bWxzLnB1c2goJzxkaXY+JytyZXN1bHQuY29udGV4dHMuam9pbignPC9kaXY+PGRpdj4nKSsnPC9kaXY+Jyk7XHJcbiAgICAgICAgaHRtbHMucHVzaCgnPC9hPicpO1xyXG4gICAgICBodG1scy5wdXNoKCc8L2Rpdj4nKTtcclxuICAgIH1cclxuICAgICQoaHRtbHMuam9pbignJykpLmFwcGVuZFRvKHRoaXMucmVzdWx0cyk7XHJcbiAgICB0aGlzLnByZXZSZXN1bHRzID0gWy4uLnJlc3VsdHNdO1xyXG4gICAgaWYobGFzdFBhZ2U9PT11bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5zdGF0dXMuaHRtbCgnJyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5zdGF0dXMuaHRtbChsYXN0UGFnZSsnIG9mICcrdGhpcy5wYWdlcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy9TZWFyY2guanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgSW1hZ2VCYXNlIGZyb20gJy4vSW1hZ2VCYXNlJztcclxuaW1wb3J0IFV0aWxzIGZyb20gJy4vVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdGljSW1hZ2UgZXh0ZW5kcyBJbWFnZUJhc2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvciwgc3JjKSB7XHJcbiAgICBzdXBlcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBjb2xvcik7XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHt9XHJcbiAgICB0aGlzLmltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICB0aGlzLmltYWdlLmNyb3NzT3JpZ2luID0gJ0Fub255bW91cyc7XHJcbiAgICB0aGlzLmJpbmRzLmltYWdlTG9hZCA9ICgpPT4ge1xyXG4gICAgICB0aGlzLndpZHRoID0gdGhpcy5pbWFnZS53aWR0aDtcclxuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmltYWdlLmhlaWdodDtcclxuICAgICAgdGhpcy5yZXNIID0gdGhpcy5oZWlnaHQvdGhpcy53aWR0aCp0aGlzLnJlc1c7XHJcbiAgICAgIHRoaXMuc3RhcnRSZW5kZXIgPSAoKT0+IHtcclxuICAgICAgICB0aGlzLnJlbmRlckltYWdlKHRoaXMuaW1hZ2UpO1xyXG4gICAgICAgIHRoaXMuZmluaXNoUmVuZGVyKCk7XHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuZmluaXNoTG9hZCgpO1xyXG4gICAgfTtcclxuICAgIHRoaXMuYmluZHMuaW1hZ2VFcnJvciA9ICgpPT4ge1xyXG4gICAgICB0aGlzLnN0YXJ0UmVuZGVyID0gKCk9PiB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJOb3RGb3VuZFBhZ2UoKTtcclxuICAgICAgICB0aGlzLmZpbmlzaFJlbmRlcigpO1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLmZpbmlzaExvYWQoKTtcclxuICAgIH07XHJcbiAgICAkKHRoaXMuaW1hZ2UpLm9uKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpLm9uKCdlcnJvcicsIHRoaXMuYmluZHMuaW1hZ2VFcnJvcik7XHJcbiAgICB0aGlzLmltYWdlLnNyYyA9IFV0aWxzLm5vcm1hbGl6ZVVybChzcmMpO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgICQodGhpcy5pbWFnZSkub2ZmKCdsb2FkJywgdGhpcy5iaW5kcy5pbWFnZUxvYWQpLm9mZignZXJyb3InLCB0aGlzLmJpbmRzLmltYWdlRXJyb3IpO1xyXG4gICAgdGhpcy5pbWFnZS5zcmMgPSAnJztcclxuICAgIGRlbGV0ZSB0aGlzLmltYWdlO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvU3RhdGljSW1hZ2UuanMiLCJpbXBvcnQge1RIUkVFfSBmcm9tICcuLi9saWJzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dHVyZUFuaW1hdG9yIHtcclxuICBjb25zdHJ1Y3RvcihpbWcsIHRpbGVzSG9yaXosIHRpbGVzVmVydCwgbnVtVGlsZXMsIHRpbGVEaXNwRHVyYXRpb24pIHtcclxuXHJcbiAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUoKTtcclxuICAgIHRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xyXG4gICAgdGV4dHVyZS5pbWFnZSA9IGltZztcclxuICAgIHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuICBcdC8vIG5vdGU6IHRleHR1cmUgcGFzc2VkIGJ5IHJlZmVyZW5jZSwgd2lsbCBiZSB1cGRhdGVkIGJ5IHRoZSB1cGRhdGUgZnVuY3Rpb24uXHJcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xyXG4gIFx0dGhpcy50aWxlc0hvcml6b250YWwgPSB0aWxlc0hvcml6O1xyXG4gIFx0dGhpcy50aWxlc1ZlcnRpY2FsID0gdGlsZXNWZXJ0O1xyXG4gIFx0Ly8gaG93IG1hbnkgaW1hZ2VzIGRvZXMgdGhpcyBzcHJpdGVzaGVldCBjb250YWluP1xyXG4gIFx0Ly8gIHVzdWFsbHkgZXF1YWxzIHRpbGVzSG9yaXogKiB0aWxlc1ZlcnQsIGJ1dCBub3QgbmVjZXNzYXJpbHksXHJcbiAgXHQvLyAgaWYgdGhlcmUgYXQgYmxhbmsgdGlsZXMgYXQgdGhlIGJvdHRvbSBvZiB0aGUgc3ByaXRlc2hlZXQuXHJcbiAgXHR0aGlzLm51bWJlck9mVGlsZXMgPSBudW1UaWxlcztcclxuICBcdHRleHR1cmUucmVwZWF0LnNldCgxL3RoaXMudGlsZXNIb3Jpem9udGFsLCAxL3RoaXMudGlsZXNWZXJ0aWNhbCk7XHJcblxyXG4gIFx0Ly8gaG93IGxvbmcgc2hvdWxkIGVhY2ggaW1hZ2UgYmUgZGlzcGxheWVkP1xyXG4gIFx0dGhpcy50aWxlRGlzcGxheUR1cmF0aW9uID0gdGlsZURpc3BEdXJhdGlvbjtcclxuXHJcbiAgXHQvLyBob3cgbG9uZyBoYXMgdGhlIGN1cnJlbnQgaW1hZ2UgYmVlbiBkaXNwbGF5ZWQ/XHJcbiAgXHR0aGlzLmN1cnJlbnREaXNwbGF5VGltZSA9IDA7XHJcblxyXG4gIFx0Ly8gd2hpY2ggaW1hZ2UgaXMgY3VycmVudGx5IGJlaW5nIGRpc3BsYXllZD9cclxuICBcdHRoaXMuY3VycmVudFRpbGUgPSAwO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKG1pbGxpU2VjKSB7XHJcbiAgICB0aGlzLmN1cnJlbnREaXNwbGF5VGltZSArPSBtaWxsaVNlYztcclxuICAgIHdoaWxlKHRoaXMuY3VycmVudERpc3BsYXlUaW1lID4gdGhpcy50aWxlRGlzcGxheUR1cmF0aW9uKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudERpc3BsYXlUaW1lIC09IHRoaXMudGlsZURpc3BsYXlEdXJhdGlvbjtcclxuICAgICAgKyt0aGlzLmN1cnJlbnRUaWxlO1xyXG4gICAgICBpZih0aGlzLmN1cnJlbnRUaWxlID09IHRoaXMubnVtYmVyT2ZUaWxlcylcclxuICAgICAgICB0aGlzLmN1cnJlbnRUaWxlID0gMDtcclxuICAgICAgdmFyIGN1cnJlbnRDb2x1bW4gPSB0aGlzLmN1cnJlbnRUaWxlJXRoaXMudGlsZXNIb3Jpem9udGFsO1xyXG4gICAgICB0aGlzLnRleHR1cmUub2Zmc2V0LnggPSBjdXJyZW50Q29sdW1uL3RoaXMudGlsZXNIb3Jpem9udGFsO1xyXG4gICAgICB2YXIgY3VycmVudFJvdyA9IE1hdGguZmxvb3IodGhpcy5jdXJyZW50VGlsZS90aGlzLnRpbGVzSG9yaXpvbnRhbCk7XHJcbiAgICAgIHRoaXMudGV4dHVyZS5vZmZzZXQueSA9IGN1cnJlbnRSb3cvdGhpcy50aWxlc1ZlcnRpY2FsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGNvbnN0IGltZyA9IHRoaXMudGV4dHVyZS5pbWFnZTtcclxuICAgIGltZy5oZWlnaHQgPSBpbWcud2lkdGggPSAwO1xyXG4gICAgdGhpcy50ZXh0dXJlLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVGV4dHVyZUFuaW1hdG9yLmpzIiwiaW1wb3J0IHtUSFJFRSwgJH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzJztcclxuaW1wb3J0IE1vdXNlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9Nb3VzZUV2ZW50Q29udmVydGVyJztcclxuaW1wb3J0IFRocmVlRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9UaHJlZUV2ZW50Q29udmVydGVyJztcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIgZXh0ZW5kcyBNb3VzZUV2ZW50Q29udmVydGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIHZpc3VhbFdvcmxkLCB0ZXN0KSB7XHJcbiAgICBzdXBlcih3bmQsIGRvYywgdmlzdWFsV29ybGQuZWxlbWVudCk7XHJcbiAgICBVdGlscy5leHRlbmRzKHRoaXMsIG5ldyBUaHJlZUV2ZW50Q29udmVydGVyKHZpc3VhbFdvcmxkLCB0ZXN0KSk7XHJcbiAgfVxyXG5cclxuICBnZXRDYWxsYmFjayhvYmplY3QpIHtcclxuICAgIHJldHVybiBvYmplY3Qub2JqZWN0LnVzZXJEYXRhLm1vdXNlQ2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICBzZXRDb29yZHNGcm9tRXZlbnQoZSkge1xyXG4gICAgY29uc3QgakVsZW1lbnQgPSAkKHRoaXMuZWxlbWVudCk7XHJcbiAgICBjb25zdCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKTtcclxuICAgIHRoaXMuY29vcmRzLnggPSAoKGUucGFnZVgtb2Zmc2V0LmxlZnQpL2pFbGVtZW50LndpZHRoKCkpKjItMTtcclxuICAgIHRoaXMuY29vcmRzLnkgPSAtKChlLnBhZ2VZLW9mZnNldC50b3ApL2pFbGVtZW50LmhlaWdodCgpKSoyKzE7XHJcbiAgICByZXR1cm4gdGhpcy5jb29yZHM7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlTW91c2VFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7VEhSRUUsICR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscyc7XHJcbmltcG9ydCBUb3VjaEV2ZW50Q29udmVydGVyIGZyb20gJy4vVG91Y2hFdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBUaHJlZUV2ZW50Q29udmVydGVyIGZyb20gJy4vVGhyZWVFdmVudENvbnZlcnRlcic7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyIGV4dGVuZHMgVG91Y2hFdmVudENvbnZlcnRlciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHduZCwgZG9jLCB2aXN1YWxXb3JsZCwgdGVzdCkge1xyXG4gICAgc3VwZXIod25kLCBkb2MsIHZpc3VhbFdvcmxkLmVsZW1lbnQpO1xyXG4gICAgVXRpbHMuZXh0ZW5kcyh0aGlzLCBuZXcgVGhyZWVFdmVudENvbnZlcnRlcih2aXN1YWxXb3JsZCwgdGVzdCkpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FsbGJhY2sob2JqZWN0KSB7XHJcbiAgICByZXR1cm4gb2JqZWN0Lm9iamVjdC51c2VyRGF0YS50b3VjaENhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29vcmRzRnJvbUV2ZW50KGUpIHtcclxuICAgIGNvbnN0IGpFbGVtZW50ID0gJCh0aGlzLmVsZW1lbnQpLCBvZmZzZXQgPSBqRWxlbWVudC5vZmZzZXQoKSxcclxuICAgICAgdG91Y2hlcyA9IGUudG91Y2hlcyB8fCBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcywgdG91Y2ggPSB0b3VjaGVzLmxlbmd0aD8gdG91Y2hlc1swXTogKHRoaXMubGFzdFRvdWNoZXMgfHwgW3twYWdlWDogMCwgcGFnZVk6IDB9XSlbMF0sXHJcbiAgICAgIHBhZ2VYID0gdG91Y2gucGFnZVgsIHBhZ2VZID0gdG91Y2gucGFnZVk7XHJcbiAgICB0aGlzLmxhc3RUb3VjaGVzID0gdG91Y2hlcy5sZW5ndGg/IHRvdWNoZXM6IHRoaXMubGFzdFRvdWNoZXM7XHJcbiAgICB0aGlzLmNvb3Jkcy54ID0gKChwYWdlWC1vZmZzZXQubGVmdCkvakVsZW1lbnQud2lkdGgoKSkqMi0xO1xyXG4gICAgdGhpcy5jb29yZHMueSA9IC0oKHBhZ2VZLW9mZnNldC50b3ApL2pFbGVtZW50LmhlaWdodCgpKSoyKzE7XHJcbiAgICByZXR1cm4gdGhpcy5jb29yZHM7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RocmVlVG91Y2hFdmVudENvbnZlcnRlci5qcyIsImltcG9ydCB7JH0gZnJvbSAnLi4vbGlicyc7XHJcbmltcG9ydCBJbWFnZUZhY3RvcnkgZnJvbSAnLi9JbWFnZUZhY3RvcnknO1xyXG5pbXBvcnQgR3JhcGhVdGlscyBmcm9tICcuL0dyYXBoVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGh1bWJuYWlscyB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNvbnRhaW5lciwgdGh1bWJuYWlsc0NsYiwgc2l6ZSwgcHJvcHM9e2tXdG9IOiAyMTAvMjk3fSkge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB0aGlzLnAgPSBwcm9wcztcclxuICAgIHRoaXMudGh1bWJuYWlsc0NsYiA9IHRodW1ibmFpbHNDbGI7XHJcbiAgICB0aGlzLnNpemUgPSBzaXplO1xyXG4gICAgdGhpcy5xdWV1ZSA9IHtmaXJzdDogMCwgbGVuOiAwfTtcclxuICAgIHRoaXMuY2FudmFzID0gR3JhcGhVdGlscy5jcmVhdGVDYW52YXMoKTtcclxuICAgIHRoaXMuaW1hZ2VGYWN0b3J5ID0gbmV3IEltYWdlRmFjdG9yeSh7XHJcbiAgICAgIC4uLmNvbnRleHQsXHJcbiAgICAgIHJlbmRlckNhbnZhczogdGhpcy5jYW52YXMsXHJcbiAgICAgIHJlbmRlckNhbnZhc0N0eDogdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnRodW1ibmFpbHMgPSBbXTtcclxuICAgIGZvcihsZXQgaT0wOyBpPHNpemU7ICsraSkge1xyXG4gICAgICBjb25zdCBpbmZvID0gdGhpcy50aHVtYm5haWxzQ2xiKGkpO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHMucHVzaCh7XHJcbiAgICAgICAgLi4uaW5mbyxcclxuICAgICAgICBpbmRleDogaSxcclxuICAgICAgICBsb2FkZWQ6IGluZm8udHlwZT09PSd0aHVtYm5haWwtaW1hZ2UnLFxyXG4gICAgICAgIGhlYWRpbmc6IG51bGwsXHJcbiAgICAgICAgdGh1bWJuYWlsOiBudWxsLFxyXG4gICAgICAgIHRpdGxlOiBpbmZvLnRpdGxlIHx8IGlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgdXBkYXRlOiB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBuYXZpZ2F0ZTogKGUpPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBpZih0aGlzLm9uTmF2aWdhdGUpIHtcclxuICAgICAgICAgIGxldCBub2RlID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICB3aGlsZShub2RlICYmICFub2RlLmRhdGFUaHVtYm5haWwpIHtcclxuICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMub25OYXZpZ2F0ZShub2RlLmRhdGFUaHVtYm5haWwuaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRoaXMuY29udGFpbmVyLm9uKCdzY3JvbGwnLCB0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgfVxyXG5cclxuICBnZXRTaXplKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2l6ZTtcclxuICB9XHJcblxyXG4gIHNldEVuYWJsZShlbmFibGUpIHtcclxuICAgIHRoaXMuZW5hYmxlID0gZW5hYmxlO1xyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5maW5kKCdhJykub2ZmKCdjbGljaycsIHRoaXMuYmluZHMubmF2aWdhdGUpO1xyXG4gICAgdGhpcy5jb250YWluZXIub2ZmKCdzY3JvbGwnLCB0aGlzLmJpbmRzLnVwZGF0ZSk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5odG1sKCcnKTtcclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuY2FudmFzLndpZHRoID0gMDtcclxuICAgIGRlbGV0ZSB0aGlzLmNhbnZhcztcclxuICB9XHJcblxyXG4gIHNldExvYWRRdWV1ZShmaXJzdCwgbGVuKSB7XHJcbiAgICBmaXJzdCA9IE1hdGgubWluKGZpcnN0LCB0aGlzLnNpemUtMSk7XHJcbiAgICBsZW4gPSBNYXRoLm1pbihsZW4sIHRoaXMuc2l6ZS1maXJzdCk7XHJcbiAgICB0aGlzLnF1ZXVlID0ge2ZpcnN0LCBsZW59O1xyXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+IHRoaXMudXBkYXRlKCkpO1xyXG4gIH1cclxuXHJcbiAgbG9hZCh0aHVtYm5haWwpIHtcclxuICAgIHRoaXMubG9hZGluZyA9IHRydWU7XHJcbiAgICBjb25zdCB3cmFwcGVyID0gdGhpcy5pbWFnZUZhY3RvcnkuYnVpbGQodGh1bWJuYWlsLCB0aHVtYm5haWwubnVtYmVyPT09dW5kZWZpbmVkPyB0aHVtYm5haWwuaW5kZXg6IHRodW1ibmFpbC5udW1iZXIsIHRoaXMucC5rV3RvSCozMDAsIDMwMCk7XHJcbiAgICB3cmFwcGVyLm9uQ2hhbmdlID0gKGNhbnZhcyk9PiB7XHJcbiAgICAgIHRoaXMuc2V0SW1hZ2UodGh1bWJuYWlsLCBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKSk7XHJcbiAgICAgIHRodW1ibmFpbC5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICB3cmFwcGVyLmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PiB0aGlzLnVwZGF0ZSgpKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBnZXRBY3RpdmUoKSB7XHJcbiAgICBjb25zdCBmaXJzdCA9IHRoaXMuY29udGFpbmVyLnNjcm9sbFRvcCgpLCBsYXN0ID0gZmlyc3QgKyB0aGlzLmNvbnRhaW5lci5oZWlnaHQoKSwgcmVzID0gW107XHJcbiAgICBmb3IobGV0IHRodW1ibmFpbCBvZiB0aGlzLnRodW1ibmFpbHMpIHtcclxuICAgICAgaWYoTWF0aC5tYXgodGh1bWJuYWlsLmZpcnN0LCBmaXJzdCk8TWF0aC5taW4odGh1bWJuYWlsLmxhc3QsIGxhc3QpKSB7XHJcbiAgICAgICAgcmVzLnB1c2godGh1bWJuYWlsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxuICB9XHJcblxyXG4gIHVwZGF0ZSgpIHtcclxuICAgIGlmKCF0aGlzLmxvYWRpbmcgJiYgdGhpcy5jYW52YXMpIHtcclxuICAgICAgaWYodGhpcy5lbmFibGUpIHtcclxuICAgICAgICBpZighdGhpcy5idWlsdCkge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmUoKTtcclxuICAgICAgICBmb3IobGV0IHRodW1ibmFpbCBvZiBhY3RpdmUpIHtcclxuICAgICAgICAgIGlmKCF0aHVtYm5haWwubG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZCh0aHVtYm5haWwpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYoIXRoaXMubG9hZGluZykge1xyXG4gICAgICAgIGZvcihsZXQgaSA9IHRoaXMucXVldWUuZmlyc3Q7IGk8dGhpcy5xdWV1ZS5maXJzdCt0aGlzLnF1ZXVlLmxlbjsgKytpKSB7XHJcbiAgICAgICAgICBjb25zdCB0ID0gdGhpcy50aHVtYm5haWxzW2ldO1xyXG4gICAgICAgICAgaWYoIXQubG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZCh0KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRJbWFnZSh0aHVtYm5haWwsIGltZykge1xyXG4gICAgY29uc3QgdHJpZ2dlciA9IHRodW1ibmFpbC5pbWchPT1pbWc7XHJcbiAgICB0aHVtYm5haWwuaW1nID0gaW1nO1xyXG4gICAgaWYodGh1bWJuYWlsLnRodW1ibmFpbCkge1xyXG4gICAgICB0aHVtYm5haWwudGh1bWJuYWlsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIFsndXJsKFxcJycsIGltZywnXFwnKSddLmpvaW4oJycpKTtcclxuICAgICAgdGh1bWJuYWlsLnRodW1ibmFpbC5yZW1vdmVDbGFzcygnbG9hZGluZycpO1xyXG4gICAgfVxyXG4gICAgaWYodHJpZ2dlcikge1xyXG4gICAgICB0aGlzLmNvbnRhaW5lci50cmlnZ2VyKCdmYjNkLnRodW1ibmFpbHMudGh1bWJuYWlsTG9hZGVkJywgW3RodW1ibmFpbF0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgZWxlbWVudHMgPSBbJzxkaXYgY2xhc3M9XCJ0aHVtYm5haWxzXCI+J11cclxuICAgIGZvcihsZXQgaT0wOyBpPHRoaXMuc2l6ZTsgKytpKSB7XHJcbiAgICAgIGVsZW1lbnRzLnB1c2goWyc8ZGl2IGNsYXNzPVwiaXRlbVwiPjxhIGhyZWY9XCIjXCI+PGRpdiBjbGFzcz1cInRodW1ibmFpbCBsb2FkaW5nXCIgc3R5bGU9XCJwYWRkaW5nLXRvcDonK01hdGgucm91bmQoMTAwL3RoaXMucC5rV3RvSCkrJyU7XCI+PC9kaXY+PC9hPjxkaXYgY2xhc3M9XCJoZWFkaW5nXCI+PGEgaHJlZj1cIiNcIiB0aXRsZT1cIicsIGkrMSwnXCI+JywgaSsxLCAnPC9hPjwvZGl2PjwvZGl2PiddLmpvaW4oJycpKTtcclxuICAgIH1cclxuICAgIGVsZW1lbnRzLnB1c2goJzwvZGl2PicpO1xyXG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGVsZW1lbnRzLmpvaW4oJycpKTtcclxuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5jb250YWluZXIuZmluZCgnLml0ZW0nKSwgYmFzZSA9IHRoaXMuY29udGFpbmVyLmZpbmQoJy50aHVtYm5haWxzJykub2Zmc2V0KCkudG9wO1xyXG4gICAgZm9yKGxldCBpPTA7IGk8aXRlbXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgaXRlbSA9ICQoaXRlbXNbaV0pO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHNbaV0uaGVhZGluZyA9IGl0ZW0uZmluZCgnLmhlYWRpbmcnKTtcclxuICAgICAgdGhpcy50aHVtYm5haWxzW2ldLnRodW1ibmFpbCA9IGl0ZW0uZmluZCgnLnRodW1ibmFpbCcpO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHNbaV0uZmlyc3QgPSBpdGVtLm9mZnNldCgpLnRvcC1iYXNlO1xyXG4gICAgICB0aGlzLnRodW1ibmFpbHNbaV0ubGFzdCA9IHRoaXMudGh1bWJuYWlsc1tpXS5maXJzdCtpdGVtLmhlaWdodCgpO1xyXG4gICAgICBpZih0aGlzLnRodW1ibmFpbHNbaV0ubG9hZGVkKSB7XHJcbiAgICAgICAgdGhpcy5zZXRJbWFnZSh0aGlzLnRodW1ibmFpbHNbaV0sIHRoaXMudGh1bWJuYWlsc1tpXS5pbWcgfHwgdGhpcy50aHVtYm5haWxzW2ldLnNyYyk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgYXMgPSBpdGVtLmZpbmQoJ2EnKTtcclxuICAgICAgZm9yKGxldCBqPTA7IGo8YXMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICBjb25zdCBhID0gYXNbal07XHJcbiAgICAgICAgYS5kYXRhVGh1bWJuYWlsID0gdGhpcy50aHVtYm5haWxzW2ldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLmNvbnRhaW5lci5maW5kKCdhJykub24oJ2NsaWNrJywgdGhpcy5iaW5kcy5uYXZpZ2F0ZSk7XHJcbiAgICB0aGlzLmJ1aWx0ID0gdHJ1ZTtcclxuICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RodW1ibmFpbHMuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9FdmVudENvbnZlcnRlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUb3VjaENvbnZlcnRlciBleHRlbmRzIEV2ZW50Q29udmVydGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iod25kLCBkb2MsIGVsZW1lbnQpIHtcclxuICAgIHN1cGVyKHduZCwgZG9jKTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xyXG4gICAgdGhpcy5iaW5kcyA9IHtcclxuICAgICAgY29udmVydDogdGhpcy5jb252ZXJ0LmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICAkKHRoaXMuZWxlbWVudCkub24oJ3RvdWNoc3RhcnQgdG91Y2htb3ZlJywgdGhpcy5iaW5kcy5jb252ZXJ0KTtcclxuICAgICQodGhpcy5kb2MpLm9uKCd0b3VjaGVuZCcsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgJCh0aGlzLmVsZW1lbnQpLm9mZigndG91Y2hzdGFydCB0b3VjaG1vdmUnLCB0aGlzLmJpbmRzLmNvbnZlcnQpO1xyXG4gICAgJCh0aGlzLmRvYykub2ZmKCd0b3VjaGVuZCcsIHRoaXMuYmluZHMuY29udmVydCk7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1RvdWNoRXZlbnRDb252ZXJ0ZXIuanMiLCJpbXBvcnQgeyR9IGZyb20gJy4uL2xpYnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlck1lc3NhZ2VDb250cm9sbGVyIHtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlldykge1xyXG4gICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgIHRoaXMuc2hvd01lc3NhZ2UgPSBmYWxzZTtcclxuICAgIHRoaXMubWVzc2FnZSA9ICcnO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgICBkZWxldGUgdGhpcy52aWV3O1xyXG4gIH1cclxuXHJcbiAgc2V0RXJyb3IodGV4dCkge1xyXG4gICAgdGhpcy5zaG93TWVzc2FnZSA9IHRydWU7XHJcbiAgICB0aGlzLm1lc3NhZ2UgPSBbJzxkaXYgY2xhc3M9XCJ0ZXh0IGVycm9yXCI+JywgdGV4dCwgJzwvZGl2PiddLmpvaW4oJycpO1xyXG4gICAgdGhpcy51cGRhdGVWaWV3KCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVWaWV3KCkge1xyXG4gICAgaWYodGhpcy52aWV3KSB7XHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgnd2lkVXNlck1lc3NhZ2UnLCB7XHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZpc2libGU6IHRoaXMuc2hvd01lc3NhZ2UsXHJcbiAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMudmlldy5zZXRTdGF0ZSgndHh0VXNlck1lc3NhZ2UnLCB7XHJcbiAgICAgICAgdmFsdWU6IHRoaXMubWVzc2FnZSxcclxuICAgICAgICB2aXNpYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVXNlck1lc3NhZ2VDb250cm9sbGVyLmpzIiwiaW1wb3J0IHskLCB0cn0gZnJvbSAnLi4vbGlicyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWaWV3IHtcclxuXHJcbiAgc3RhdGljIGxpbmtTdGF0ZUhhbmRsZXJzID0ge1xyXG4gICAgdmlzaWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnaGlkZGVuJywgIXZhbHVlKSxcclxuICAgIGFjdGl2ZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnYWN0aXZlJywgdmFsdWUpLFxyXG4gICAgZW5hYmxlOiAoY3RybCwgdmFsdWUpPT4gVmlldy5jbGFzc1Byb3BlcnR5KGN0cmwsICdkaXNhYmxlZCcsICF2YWx1ZSlcclxuICB9O1xyXG5cclxuICBzdGF0aWMgd2lkZ2V0U3RhdGVIYW5kbGVycyA9IHtcclxuICAgIHZpc2libGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2hpZGRlbicsICF2YWx1ZSksXHJcbiAgICBhY3RpdmU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2FjdGl2ZScsIHZhbHVlKSxcclxuICAgIGVuYWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuY2xhc3NQcm9wZXJ0eShjdHJsLCAnZGlzYWJsZWQnLCAhdmFsdWUpXHJcbiAgfTtcclxuXHJcbiAgc3RhdGljIGlucHV0U3RhdGVIYW5kbGVycyA9IHtcclxuICAgIHZpc2libGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2hpZGRlbicsICF2YWx1ZSksXHJcbiAgICB2YWx1ZTogKGN0cmwsIHZhbHVlKT0+IGN0cmxbMF0udmFsdWUgPSB2YWx1ZSxcclxuICAgIGVuYWJsZTogKGN0cmwsIHZhbHVlKT0+IFZpZXcuYXR0cmlidXRlUHJvcGVydHkoY3RybCwgJ2Rpc2FibGVkJywgIXZhbHVlKVxyXG4gIH07XHJcblxyXG4gIHN0YXRpYyB0ZXh0U3RhdGVIYW5kbGVycyA9IHtcclxuICAgIHZpc2libGU6IChjdHJsLCB2YWx1ZSk9PiBWaWV3LmNsYXNzUHJvcGVydHkoY3RybCwgJ2hpZGRlbicsICF2YWx1ZSksXHJcbiAgICB2YWx1ZTogKGN0cmwsIHZhbHVlKT0+IGN0cmwuaHRtbCh2YWx1ZSlcclxuICB9O1xyXG5cclxuICBzdGF0aWMgY2xhc3NQcm9wZXJ0eShjdHJsLCBjbGFzc05hbWUsIHZhbHVlKSB7XHJcbiAgICBpZih2YWx1ZSkge1xyXG4gICAgICBjdHJsLmFkZENsYXNzKGNsYXNzTmFtZSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY3RybC5yZW1vdmVDbGFzcyhjbGFzc05hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGF0dHJpYnV0ZVByb3BlcnR5KGN0cmwsIGF0dHJpYnV0ZU5hbWUsIHZhbHVlKSB7XHJcbiAgICBpZih2YWx1ZSkge1xyXG4gICAgICBjdHJsLmF0dHIoYXR0cmlidXRlTmFtZSwgdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGN0cmwucmVtb3ZlQXR0cihhdHRyaWJ1dGVOYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBjYWxsSGFuZGxlcnMoaGFuZGxlcnMsIGlkLCBlLCBkYXRhKSB7XHJcbiAgICBmb3IobGV0IGhhbmRsZXIgb2YgaGFuZGxlcnMpIHtcclxuICAgICAgaWYoaGFuZGxlcltpZF0pIHtcclxuICAgICAgICBoYW5kbGVyW2lkXShlLCBkYXRhKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGhhbmRsZXIuaGFuZGxlRGVmYXVsdCkge1xyXG4gICAgICAgIGhhbmRsZXIuaGFuZGxlRGVmYXVsdChpZCwgZSwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBoYW5kbGVFdmVudChpZCwgZ2V0SGFuZGxlcnMsIGUsIGRhdGEpIHtcclxuICAgIFZpZXcuY2FsbEhhbmRsZXJzKGdldEhhbmRsZXJzKGlkKSwgaWQsIGUsIGRhdGEpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhhbmRsZUxpbmtFdmVudChlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpZighdGhpcy5jdHJsLmhhc0NsYXNzKCdkaXNhYmxlZCcpKSB7XHJcbiAgICAgIFZpZXcuaGFuZGxlRXZlbnQodGhpcy5pZCwgdGhpcy5nZXRIYW5kbGVycywgZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFuZGxlSW5wdXRFdmVudChlKSB7XHJcbiAgICBWaWV3LmhhbmRsZUV2ZW50KHRoaXMuaWQsIHRoaXMuZ2V0SGFuZGxlcnMsIGUsIGUudGFyZ2V0LnZhbHVlKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBoYW5kbGVGb3JtRXZlbnQoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgVmlldy5oYW5kbGVFdmVudCh0aGlzLmlkLCB0aGlzLmdldEhhbmRsZXJzLCBlKTtcclxuICB9XHJcblxyXG4gIC8vIHZpcnR1YWwgZnVuY3Rpb25zIHtcclxuICBnZXRMaW5rcygpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0V2lkZ2V0cygpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW5wdXRzKCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBnZXRUZXh0cygpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICByZXR1cm4ge307XHJcbiAgfVxyXG5cclxuICBnZXRIYW5kbGVycyhpZCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnM7XHJcbiAgfVxyXG4gIC8vIH1cclxuXHJcbiAgY2FsbExhdGVyKGhhbmRsZXJzLCBpZCwgZSwgZGF0YSwgbXMpIHtcclxuICAgIHRoaXMucGVuZGluZ3NbaWRdID0ge1xyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcbiAgICB9O1xyXG4gICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCksIHBlbmRpbmcgPSB0aGlzLnBlbmRpbmdzW2lkXTtcclxuICAgICAgaWYocGVuZGluZyAmJiB0aW1lc3RhbXAtcGVuZGluZy50aW1lc3RhbXA+PW1zKSB7XHJcbiAgICAgICAgVmlldy5jYWxsSGFuZGxlcnMoaGFuZGxlcnMsIGlkLCBlLCBkYXRhKTtcclxuICAgICAgICBkZWxldGUgdGhpcy5wZW5kaW5nc1tpZF07XHJcbiAgICAgIH1cclxuICAgIH0sIG1zKTtcclxuICB9XHJcblxyXG4gIC8vIGxvYWRGaWxlcyh1cmxzLCByZWFkeSwgZmFpbHVyZSkge1xyXG4gIC8vICAgbGV0IGRvbmUgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAvLyAgIGZvcihsZXQgdXJsIG9mIHVybHMpIHtcclxuICAvLyAgICAgZG9uZSA9IGRvbmUudGhlbigoKT0+IHtcclxuICAvLyAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XHJcbiAgLy8gICAgICAgICAkLmdldCh1cmwsIChyZXMpPT4ge1xyXG4gIC8vICAgICAgICAgICByZWFkeShyZXMsIHVybCk7XHJcbiAgLy8gICAgICAgICAgIHJlc29sdmUoKTtcclxuICAvLyAgICAgICAgIH0pLmZhaWwoKHJlcyk9PiB7XHJcbiAgLy8gICAgICAgICAgIGlmKGZhaWx1cmUgJiYgZmFpbHVyZShyZXMsIHVybCkpIHtcclxuICAvLyAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgLy8gICAgICAgICAgIH1cclxuICAvLyAgICAgICAgICAgZWxzZSB7XHJcbiAgLy8gICAgICAgICAgICAgcmVqZWN0KHJlcyk7XHJcbiAgLy8gICAgICAgICAgIH1cclxuICAvLyAgICAgICAgIH0pO1xyXG4gIC8vICAgICAgIH0pO1xyXG4gIC8vICAgICB9KTtcclxuICAvLyAgIH1cclxuICAvLyAgIHJldHVybiBkb25lO1xyXG4gIC8vIH1cclxuXHJcbiAgbG9hZEZpbGVzKHVybHMsIGZpbGVzKSB7XHJcbiAgICBjb25zdCB0YXNrcyA9IFtdO1xyXG4gICAgZm9yKGxldCBuYW1lIG9mIE9iamVjdC5rZXlzKHVybHMpKSB7XHJcbiAgICAgIGZpbGVzW25hbWVdID0gW107XHJcbiAgICAgIGZvcihsZXQgdXJsIG9mIHVybHNbbmFtZV0pIHtcclxuICAgICAgICB0YXNrcy5wdXNoKFxyXG4gICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XHJcbiAgICAgICAgICAgICQuZ2V0KHVybCwgKGRhdGEpPT4ge1xyXG4gICAgICAgICAgICAgIGZpbGVzW25hbWVdLnB1c2goe3VybCwgZGF0YX0pO1xyXG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSkuZmFpbCgocmVzKT0+IHtcclxuICAgICAgICAgICAgICByZWplY3QocmVzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLmFsbCh0YXNrcyk7XHJcbiAgfVxyXG5cclxuICB1cmxSZXNvbHZlcihiYXNlVXJsLCB1cmwpIHtcclxuICAgIHVybCA9IHVybC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XHJcbiAgICBpZih1cmwuY2hhckF0KDApIT09Jy8nICYmIHVybC50b0xvd2VyQ2FzZSgpLnNlYXJjaCgnZGF0YTonKSE9PTApIHtcclxuICAgICAgYmFzZVVybCA9IGJhc2VVcmwucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xyXG4gICAgICBjb25zdCBwID0gYmFzZVVybC5sYXN0SW5kZXhPZignLycpO1xyXG4gICAgICB1cmwgPSAofnA/IGJhc2VVcmwuc3Vic3RyKDAsIHArMSk6ICcnKSt1cmw7XHJcblxyXG4gICAgICBjb25zdCBwYXJ0cyA9IHVybC5zcGxpdCgnLycpO1xyXG4gICAgICB1cmwgPSBbXTtcclxuICAgICAgZm9yKGxldCBwYXJ0IG9mIHBhcnRzKSB7XHJcbiAgICAgICAgaWYocGFydD09PScuJykge1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHBhcnQ9PT0nLi4nKSB7XHJcbiAgICAgICAgICBpZih1cmwubGVuZ3RoICYmICEodXJsLmxlbmd0aD09PTEgJiYgdXJsWzBdPT09JycpKSB7XHJcbiAgICAgICAgICAgIHVybC5wb3AoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB1cmwucHVzaChwYXJ0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdXJsID0gdXJsLmpvaW4oJy8nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdXJsO1xyXG4gIH1cclxuXHJcbiAgb2JqVG9BdHRyc1N0cihvKSB7XHJcbiAgICBjb25zdCByZXMgPSBbXTtcclxuICAgIGZvcihsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyhvKSkge1xyXG4gICAgICByZXMucHVzaChbbmFtZSwgJz1cIicsIG9bbmFtZV0sICdcIiddLmpvaW4oJycpKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXMuam9pbignICcpO1xyXG4gIH1cclxuXHJcbiAgY2hlY2tJZnJhbWVTaXplKCkge1xyXG4gICAgaWYodGhpcy5mcmFtZSkge1xyXG4gICAgICBpZihNYXRoLmFicyh0aGlzLmZyYW1lLndpZHRoLXRoaXMucGFyZW50Q29udGFpbmVyLndpZHRoKCkpPjEgfHwgTWF0aC5hYnModGhpcy5mcmFtZS5oZWlnaHQtdGhpcy5wYXJlbnRDb250YWluZXIuaGVpZ2h0KCkpPjEpIHtcclxuICAgICAgICB0aGlzLm9uUmVzaXplKCk7XHJcbiAgICAgIH1cclxuICAgICAgc2V0VGltZW91dCh0aGlzLmNoZWNrSWZyYW1lU2l6ZS5iaW5kKHRoaXMpLCAyNTApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25SZXNpemUoKSB7XHJcbiAgICB0aGlzLmZyYW1lLndpZHRoID0gdGhpcy5wYXJlbnRDb250YWluZXIud2lkdGgoKTtcclxuICAgIHRoaXMuZnJhbWUuaGVpZ2h0ID0gdGhpcy5wYXJlbnRDb250YWluZXIuaGVpZ2h0KCk7XHJcbiAgfVxyXG5cclxuICB0cmFuc2xhdGUoaHRtbCkge1xyXG4gICAgcmV0dXJuIGh0bWwucmVwbGFjZSgvPFxcJHRyPiguKik8XFwvXFwkdHI+L2dpLCAoczAsczEpPT4gdHIoczEpKTtcclxuICB9XHJcblxyXG4gIGZpcmVMaW5rc09uTG9hZEV2ZW50KCkge1xyXG4gICAgaWYodGhpcy50ZW1wbGF0ZU9iamVjdCAmJiB0aGlzLnRlbXBsYXRlT2JqZWN0LmxpbmtMb2FkZWQpIHtcclxuICAgICAgbGV0IGxvYWRlZCA9IHRydWU7XHJcbiAgICAgIGZvcihsZXQgakxpbmsgb2YgdGhpcy5qTGlua3MpIHtcclxuICAgICAgICBjb25zdCBsaW5rID0gakxpbmtbMF07XHJcbiAgICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgaW1nLm9uZXJyb3IgPSAoKT0+IHRoaXMudGVtcGxhdGVPYmplY3QubGlua0xvYWRlZChsaW5rKTtcclxuICAgICAgICBpbWcuc3JjID0gbGluay5ocmVmO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihwYXJlbnRDb250YWluZXIsIG9uTG9hZCwgdGVtcGxhdGU9e30pIHtcclxuICAgIHRoaXMucGVuZGluZ3MgPSB7fTtcclxuICAgIHRoaXMuYmluZHMgPSB7XHJcbiAgICAgIG9uUmVzaXplOiB0aGlzLm9uUmVzaXplLmJpbmQodGhpcylcclxuICAgIH07XHJcbiAgICB0aGlzLnBhcmVudENvbnRhaW5lciA9ICQocGFyZW50Q29udGFpbmVyKTtcclxuICAgIHRoaXMuaXNJT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtO1xyXG4gICAgdGhpcy5pc1NhZmFyaSA9IC9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgfm5hdmlnYXRvci51c2VyQWdlbnQuc2VhcmNoKCdWZXJzaW9uLzE0LjEuMScpO1xyXG4gICAgY29uc3QgaW5pdFVybCA9IHRoaXMuaXNTYWZhcmk/ICh0eXBlb2YgdGVtcGxhdGU9PT0nZnVuY3Rpb24nPyB0ZW1wbGF0ZSgpOiB0ZW1wbGF0ZSkuaW5pdDogdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5wYXJlbnRDb250YWluZXIuaHRtbCgnPGlmcmFtZSBzdHlsZT1cImJvcmRlcjogMDsnKyh0aGlzLmlzSU9TPyAnJzogJyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlJykrJ1wiICcrKGluaXRVcmw/ICcgc3JjPVwiJytpbml0VXJsKydcIic6ICcnKSsnIHNjcm9sbGluZz1cIm5vXCI+PC9pZnJhbWU+Jyk7XHJcblxyXG4gICAgdGhpcy5mcmFtZSA9IHRoaXMucGFyZW50Q29udGFpbmVyLmZpbmQoJ2lmcmFtZScpWzBdO1xyXG4gICAgY29uc3QgYnVpbGQgPSAoKT0+IHtcclxuICAgICAgaWYodGhpcy5pc0lPUykge1xyXG4gICAgICAgICQodGhpcy5wYXJlbnRDb250YWluZXJbMF0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldykub24oJ3Jlc2l6ZScsIHRoaXMuYmluZHMub25SZXNpemUpO1xyXG4gICAgICAgIHRoaXMub25SZXNpemUoKTtcclxuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tJZnJhbWVTaXplLmJpbmQodGhpcyksIDI1MCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuY29udGFpbmVyID0gJCh0aGlzLmZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5KTtcclxuICAgICAgdGhpcy5jb250YWluZXIuY3NzKCdtYXJnaW4nLCAnMCcpO1xyXG4gICAgICB0aGlzLmhlYWQgPSAkKHRoaXMuZnJhbWUuY29udGVudERvY3VtZW50LmhlYWQpO1xyXG4gICAgICB0aGlzLm9uTG9hZCA9IG9uTG9hZDtcclxuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xyXG4gICAgICB0aGlzLnN0eWxlRGF0YSA9IHt9O1xyXG5cclxuICAgICAgY29uc3Qgc2NyaXB0ID0gdGVtcGxhdGUuaHRtbD8gdGVtcGxhdGUuc2NyaXB0OiB0aGlzLmdldFRlbXBsYXRlKCkuc2NyaXB0O1xyXG4gICAgICBsZXQgdXJscywgZmlsZXMsIGxpbmtzLCB0ZW1wbGF0ZU5hbWU7XHJcbiAgICAgIGlmKHR5cGVvZiB0ZW1wbGF0ZT09PSdmdW5jdGlvbicpIHtcclxuICAgICAgICB1cmxzID0ge307XHJcbiAgICAgICAgZmlsZXMgPSB0ZW1wbGF0ZSgpO1xyXG4gICAgICAgIGxpbmtzID0gW107XHJcbiAgICAgICAgdGVtcGxhdGVOYW1lID0gZmlsZXMubmFtZTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBsaW5rcyA9IHRlbXBsYXRlLmxpbmtzIHx8IHRoaXMuZ2V0VGVtcGxhdGUoKS5saW5rcztcclxuICAgICAgICB1cmxzID0ge1xyXG4gICAgICAgICAgc3R5bGVzOiB0ZW1wbGF0ZS5zdHlsZXMgfHwgdGhpcy5nZXRUZW1wbGF0ZSgpLnN0eWxlcyxcclxuICAgICAgICAgIGh0bWw6IFt0ZW1wbGF0ZS5odG1sIHx8IHRoaXMuZ2V0VGVtcGxhdGUoKS5odG1sXSxcclxuICAgICAgICAgIHNjcmlwdDogc2NyaXB0PyBbc2NyaXB0XTogW11cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRlbXBsYXRlTmFtZSA9IHRlbXBsYXRlLm5hbWU7XHJcbiAgICAgICAgZmlsZXMgPSB7fTtcclxuICAgICAgfVxyXG4gICAgICBpZih0ZW1wbGF0ZU5hbWUpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDbGFzcyh0ZW1wbGF0ZU5hbWUpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMubG9hZEZpbGVzKHVybHMsIGZpbGVzKS50aGVuKCgpPT4ge1xyXG4gICAgICAgIGZvcihsZXQgc3R5bGUgb2YgZmlsZXMuc3R5bGVzKSB7XHJcbiAgICAgICAgICBsZXQgdGV4dENzcyA9IHN0eWxlLmRhdGEsIHVybCA9IHN0eWxlLnVybDtcclxuICAgICAgICAgIHRleHRDc3MgPSB0ZXh0Q3NzLnJlcGxhY2UoL3VybFxcKFsnXCJdKC4qPylbXCInXVxcKS9nLCAociwgcjEpPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gWyd1cmwoXFwnJywgdGhpcy51cmxSZXNvbHZlcih1cmwsIHIxKSwgJ1xcJyknXS5qb2luKCcnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgJChgPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiR7dGV4dENzc308L3N0eWxlPmApLmFwcGVuZFRvKHRoaXMuaGVhZCk7XHJcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IHRleHRDc3MubWF0Y2goL1xcL1xcKmpzb24tZGF0YTooKFtcXG5cXHJdfC4pKilcXCpcXC8vKTtcclxuICAgICAgICAgIGlmKG1hdGNoKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5zdHlsZURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAuLi50aGlzLnN0eWxlRGF0YSxcclxuICAgICAgICAgICAgICAgIC4uLkpTT04ucGFyc2UobWF0Y2hbMV0pXHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuaHRtbCh0aGlzLnRyYW5zbGF0ZShmaWxlcy5odG1sWzBdLmRhdGEpKTtcclxuXHJcbiAgICAgICAgdGhpcy5qTGlua3MgPSBbXTtcclxuICAgICAgICBmb3IobGV0IGxpbmsgb2YgbGlua3MpIHtcclxuICAgICAgICAgIHRoaXMuakxpbmtzLnB1c2goJChbJzxsaW5rICcsIHRoaXMub2JqVG9BdHRyc1N0cihsaW5rKSwgJz4nXS5qb2luKCcnKSkuYXBwZW5kVG8odGhpcy5oZWFkKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZihmaWxlcy5zY3JpcHRbMF0pIHtcclxuICAgICAgICAgIGNvbnN0IGluaXQgPSBldmFsKGZpbGVzLnNjcmlwdFswXS5kYXRhKTtcclxuICAgICAgICAgIHRoaXMudGVtcGxhdGVPYmplY3QgPSBpbml0KHRoaXMuY29udGFpbmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnRlbXBsYXRlT2JqZWN0ID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpbmtDb250cm9scyA9IHt9O1xyXG4gICAgICAgIGZvcihsZXQgaWQgb2YgdGhpcy5nZXRMaW5rcygpKSB7XHJcbiAgICAgICAgICB0aGlzLmxpbmtDb250cm9sc1tpZF0gPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuJytpZCk7XHJcbiAgICAgICAgICB0aGlzLmJpbmRzW2lkXSA9IFZpZXcuaGFuZGxlTGlua0V2ZW50LmJpbmQoe2dldEhhbmRsZXJzOiB0aGlzLmdldEhhbmRsZXJzLmJpbmQodGhpcyksIGlkLCBjdHJsOiB0aGlzLmxpbmtDb250cm9sc1tpZF19KTtcclxuICAgICAgICAgIHRoaXMubGlua0NvbnRyb2xzW2lkXS5vbignY2xpY2snLCB0aGlzLmJpbmRzW2lkXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLndpZGdldENvbnRyb2xzID0ge307XHJcbiAgICAgICAgZm9yKGxldCBpZCBvZiB0aGlzLmdldFdpZGdldHMoKSkge1xyXG4gICAgICAgICAgdGhpcy53aWRnZXRDb250cm9sc1tpZF0gPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuJytpZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmlucHV0Q29udHJvbHMgPSB7fTtcclxuICAgICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0SW5wdXRzKCkpIHtcclxuICAgICAgICAgIHRoaXMuaW5wdXRDb250cm9sc1tpZF0gPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuJytpZCk7XHJcbiAgICAgICAgICB0aGlzLmJpbmRzW2lkXSA9IFZpZXcuaGFuZGxlSW5wdXRFdmVudC5iaW5kKHtnZXRIYW5kbGVyczogdGhpcy5nZXRIYW5kbGVycy5iaW5kKHRoaXMpLCBpZCwgY3RybDogdGhpcy5pbnB1dENvbnRyb2xzW2lkXX0pO1xyXG4gICAgICAgICAgdGhpcy5pbnB1dENvbnRyb2xzW2lkXS5vbigna2V5dXAnLCB0aGlzLmJpbmRzW2lkXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmZvcm1Db250cm9scyA9IHt9O1xyXG4gICAgICAgIGZvcihsZXQgaWQgb2YgdGhpcy5nZXRGb3JtcygpKSB7XHJcbiAgICAgICAgICB0aGlzLmZvcm1Db250cm9sc1tpZF0gPSB0aGlzLmNvbnRhaW5lci5maW5kKCcuJytpZCk7XHJcbiAgICAgICAgICB0aGlzLmJpbmRzW2lkXSA9IFZpZXcuaGFuZGxlRm9ybUV2ZW50LmJpbmQoe2dldEhhbmRsZXJzOiB0aGlzLmdldEhhbmRsZXJzLmJpbmQodGhpcyksIGlkLCBjdHJsOiB0aGlzLmZvcm1Db250cm9sc1tpZF19KTtcclxuICAgICAgICAgIHRoaXMuZm9ybUNvbnRyb2xzW2lkXS5vbignc3VibWl0JywgdGhpcy5iaW5kc1tpZF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50ZXh0Q29udHJvbHMgPSB7fTtcclxuICAgICAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0VGV4dHMoKSkge1xyXG4gICAgICAgICAgdGhpcy50ZXh0Q29udHJvbHNbaWRdID0gdGhpcy5jb250YWluZXIuZmluZCgnLicraWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZVNldHRlcnMgPSBbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG1hcDogdGhpcy5saW5rQ29udHJvbHMsXHJcbiAgICAgICAgICAgIHNldHRlcjogdGhpcy5zZXRMaW5rQ29udHJvbFN0YXRlLmJpbmQodGhpcylcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG1hcDogdGhpcy53aWRnZXRDb250cm9scyxcclxuICAgICAgICAgICAgc2V0dGVyOiB0aGlzLnNldFdpZGdldENvbnRyb2xTdGF0ZS5iaW5kKHRoaXMpXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBtYXA6IHRoaXMuaW5wdXRDb250cm9scyxcclxuICAgICAgICAgICAgc2V0dGVyOiB0aGlzLnNldElucHV0Q29udHJvbFN0YXRlLmJpbmQodGhpcylcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG1hcDogdGhpcy50ZXh0Q29udHJvbHMsXHJcbiAgICAgICAgICAgIHNldHRlcjogdGhpcy5zZXRUZXh0Q29udHJvbFN0YXRlLmJpbmQodGhpcylcclxuICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRWaWV3KCk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMub25Mb2FkKSB7XHJcbiAgICAgICAgICB0aGlzLm9uTG9hZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5maXJlTGlua3NPbkxvYWRFdmVudCgpO1xyXG4gICAgICB9KS5cclxuICAgICAgY2F0Y2goKHJlcyk9PiBjb25zb2xlLmVycm9yKHJlcykpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmKGluaXRVcmwpIHtcclxuICAgICAgJCh0aGlzLmZyYW1lLmNvbnRlbnRXaW5kb3cpLm9uKCdsb2FkJywgYnVpbGQpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGlmKHRoaXMuZnJhbWUuY29udGVudFdpbmRvdy5zdG9wKSB7XHJcbiAgICAgICAgdGhpcy5mcmFtZS5jb250ZW50V2luZG93LnN0b3AoKTtcclxuICAgICAgfVxyXG4gICAgICBidWlsZCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIGRlbGV0ZSB0aGlzLnRleHRDb250cm9scztcclxuICAgIGZvcihsZXQgaWQgb2YgdGhpcy5nZXRMaW5rcygpKSB7XHJcbiAgICAgIHRoaXMubGlua0NvbnRyb2xzW2lkXS5vZmYoJ2NsaWNrJywgdGhpcy5iaW5kc1tpZF0pO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMubGlua0NvbnRyb2xzO1xyXG4gICAgZGVsZXRlIHRoaXMud2lkZ2V0Q29udHJvbHM7XHJcbiAgICBmb3IobGV0IGlkIG9mIHRoaXMuZ2V0SW5wdXRzKCkpIHtcclxuICAgICAgdGhpcy5pbnB1dENvbnRyb2xzW2lkXS5vZmYoJ2tleXVwJywgdGhpcy5iaW5kc1tpZF0pO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlIHRoaXMuaW5wdXRDb250cm9scztcclxuICAgIGZvcihsZXQgaWQgb2YgdGhpcy5nZXRGb3JtcygpKSB7XHJcbiAgICAgIHRoaXMuZm9ybUNvbnRyb2xzW2lkXS5vZmYoJ3N1Ym1pdCcsIHRoaXMuYmluZHNbaWRdKTtcclxuICAgIH1cclxuICAgIGRlbGV0ZSB0aGlzLmZvcm1Db250cm9scztcclxuXHJcbiAgICAhdGhpcy50ZW1wbGF0ZU9iamVjdC5kaXNwb3NlIHx8IHRoaXMudGVtcGxhdGVPYmplY3QuZGlzcG9zZSgpO1xyXG4gICAgZGVsZXRlIHRoaXMudGVtcGxhdGVPYmplY3Q7XHJcblxyXG4gICAgaWYodGhpcy5pc0lPUykge1xyXG4gICAgICAkKHRoaXMucGFyZW50Q29udGFpbmVyWzBdLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcpLm9mZigncmVzaXplJywgdGhpcy5iaW5kcy5vblJlc2l6ZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnBhcmVudENvbnRhaW5lci5odG1sKCcnKTtcclxuICAgIGRlbGV0ZSB0aGlzLmZyYW1lO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3R5bGVEYXRhKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3R5bGVEYXRhO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q29udGFpbmVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyWzBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFyZW50Q29udGFpbmVyKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyZW50Q29udGFpbmVyWzBdO1xyXG4gIH1cclxuXHJcbiAgYWRkSGFuZGxlcihoYW5kbGVyKSB7XHJcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goaGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBpbml0VmlldygpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0Q29udHJvbFN0YXRlKGN0cmwsIGRlZmF1bHRzLCBzdGF0ZSwgc3RhdGVIYW5kbGVycykge1xyXG4gICAgaWYoY3RybCAmJiBjdHJsWzBdKSB7XHJcbiAgICAgIGNvbnN0IHN0ID0ge1xyXG4gICAgICAgIC4uLmRlZmF1bHRzLFxyXG4gICAgICAgIC4uLnN0YXRlXHJcbiAgICAgIH07XHJcbiAgICAgIGZvcihsZXQgbmFtZSBpbiBzdCkge1xyXG4gICAgICAgIGlmKHN0Lmhhc093blByb3BlcnR5KG5hbWUpICYmIHN0YXRlSGFuZGxlcnNbbmFtZV0pIHtcclxuICAgICAgICAgIHN0YXRlSGFuZGxlcnNbbmFtZV0oY3RybCwgc3RbbmFtZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0TGlua0NvbnRyb2xTdGF0ZShpZCwgc3RhdGUpIHtcclxuICAgIFZpZXcuc2V0Q29udHJvbFN0YXRlKFxyXG4gICAgICB0aGlzLmxpbmtDb250cm9sc1tpZF0sXHJcbiAgICAgIHtcclxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXHJcbiAgICAgICAgZW5hYmxlOiB0cnVlXHJcbiAgICAgIH0sXHJcbiAgICAgIHN0YXRlLFxyXG4gICAgICBWaWV3LmxpbmtTdGF0ZUhhbmRsZXJzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0V2lkZ2V0Q29udHJvbFN0YXRlKGlkLCBzdGF0ZSkge1xyXG4gICAgVmlldy5zZXRDb250cm9sU3RhdGUoXHJcbiAgICAgIHRoaXMud2lkZ2V0Q29udHJvbHNbaWRdLFxyXG4gICAgICB7XHJcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIGVuYWJsZTogdHJ1ZVxyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy53aWRnZXRTdGF0ZUhhbmRsZXJzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2V0SW5wdXRDb250cm9sU3RhdGUoaWQsIHN0YXRlKSB7XHJcbiAgICBWaWV3LnNldENvbnRyb2xTdGF0ZShcclxuICAgICAgdGhpcy5pbnB1dENvbnRyb2xzW2lkXSxcclxuICAgICAge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgZW5hYmxlOiB0cnVlLFxyXG4gICAgICAgIHZhbHVlOiAnJ1xyXG4gICAgICB9LFxyXG4gICAgICBzdGF0ZSxcclxuICAgICAgVmlldy5pbnB1dFN0YXRlSGFuZGxlcnNcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzZXRUZXh0Q29udHJvbFN0YXRlKGlkLCBzdGF0ZSkge1xyXG4gICAgVmlldy5zZXRDb250cm9sU3RhdGUoXHJcbiAgICAgIHRoaXMudGV4dENvbnRyb2xzW2lkXSxcclxuICAgICAge1xyXG4gICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgdmFsdWU6ICcnXHJcbiAgICAgIH0sXHJcbiAgICAgIHN0YXRlLFxyXG4gICAgICBWaWV3LnRleHRTdGF0ZUhhbmRsZXJzXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgb25JdGVtU3RhdGVDaGFuZ2VkKCkge1xyXG5cclxuICB9XHJcblxyXG4gIHNldFN0YXRlKGlkLCBzdGF0ZSkge1xyXG4gICAgZm9yKGxldCBpdGVtIG9mIHRoaXMuc3RhdGVTZXR0ZXJzKSB7XHJcbiAgICAgIGlmKGl0ZW0ubWFwW2lkXSkge1xyXG4gICAgICAgIGl0ZW0uc2V0dGVyKGlkLCBzdGF0ZSk7XHJcbiAgICAgICAgdGhpcy5vbkl0ZW1TdGF0ZUNoYW5nZWQoaWQsIHN0YXRlKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVmlldy5qcyIsImltcG9ydCB7JCwgVEhSRUV9IGZyb20gJy4uL2xpYnMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscyc7XHJcbmltcG9ydCBPcmJpdCBmcm9tICcuL09yYml0JztcclxuaW1wb3J0IFRocmVlTW91c2VFdmVudENvbnZlcnRlciBmcm9tICcuL1RocmVlTW91c2VFdmVudENvbnZlcnRlcic7XHJcbmltcG9ydCBUaHJlZVRvdWNoRXZlbnRDb252ZXJ0ZXIgZnJvbSAnLi9UaHJlZVRvdWNoRXZlbnRDb252ZXJ0ZXInO1xyXG5pbXBvcnQgRHJhZyBmcm9tICcuL0RyYWcnO1xyXG5pbXBvcnQgQ1NTM0RSZW5kZXJlciBmcm9tICcuL0NTUzNEUmVuZGVyZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlzdWFsV29ybGQgZXh0ZW5kcyBUSFJFRS5FdmVudERpc3BhdGNoZXIge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih3bmQsIGRvYywgY29udGFpbmVyLCB1c2VIZWxwZXJzPWZhbHNlKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5jaGVja1VwZGF0ZUZsYWcgPSB0cnVlO1xyXG4gICAgdGhpcy53bmQgPSB3bmQ7XHJcbiAgICB0aGlzLmRvYyA9IGRvYztcclxuICAgIHRoaXMuakNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzID0gW107XHJcbiAgICB0aGlzLmRpYWcgPSB0aGlzLmdldERpYWcoKTtcclxuXHJcbiAgICB0aGlzLmNsb2NrID0gbmV3IFRIUkVFLkNsb2NrKCk7XHJcblxyXG4gICAgdGhpcy5yYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XHJcblxyXG4gICAgdGhpcy5zY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgdGhpcy5jc3NTY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuICAgIHRoaXMuY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDMwLCB0aGlzLndpZHRoKCkvdGhpcy5oZWlnaHQoKSwgMC4yLCAyMDAwKTtcclxuICAgIGNvbnN0IHNjYWxlID0gMTtcclxuXHJcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi54ID0gMDtcclxuICAgIHRoaXMuY2FtZXJhLnBvc2l0aW9uLnkgPSA1LjUqc2NhbGU7XHJcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gMDtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe2FscGhhOiB0cnVlLCBwcmVjaXNpb246IFZpc3VhbFdvcmxkLmdldFByZWNpc2lvbigpLCBhbnRpYWxpYXM6IHRydWV9KTtcclxuICAgIHRoaXMucmVuZGVyZXIuc2V0Q2xlYXJDb2xvcigweDAwMDAwMCwgMCk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8odGhpcy53bmQuZGV2aWNlUGl4ZWxSYXRpbyk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpemUodGhpcy53aWR0aCgpLCB0aGlzLmhlaWdodCgpKTtcclxuXHJcbiAgICB0aGlzLmpDb250YWluZXIuYXBwZW5kKHRoaXMucmVuZGVyZXIuZG9tRWxlbWVudCk7XHJcblxyXG4gICAgdGhpcy5jc3NSZW5kZXJlclx0PSBuZXcgQ1NTM0RSZW5kZXJlcigpO1xyXG4gICAgdGhpcy5jc3NSZW5kZXJlci5zZXRTaXplKHRoaXMud2lkdGgoKSwgdGhpcy5oZWlnaHQoKSk7XHJcbiAgICAkKHRoaXMuY3NzUmVuZGVyZXIuZG9tRWxlbWVudCkuY3NzKHtcclxuICBcdFx0cG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgXHRcdHRvcDogMCxcclxuICBcdFx0bWFyZ2luOiAwLFxyXG4gIFx0XHRwYWRkaW5nOiAwXHJcblx0ICB9KTtcclxuICAgIHRoaXMuakNvbnRhaW5lci5hcHBlbmQodGhpcy5jc3NSZW5kZXJlci5kb21FbGVtZW50KTtcclxuXHJcbiAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLmNzc1JlbmRlcmVyLmRvbUVsZW1lbnQ7XHJcblxyXG4gICAgdGhpcy50ZXh0dXJlTG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoKTtcclxuXHJcbiAgICB0aGlzLmFtYmllbnRMaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhEMEQwRDApOy8vMHhDMEMwQzBcclxuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMuYW1iaWVudExpZ2h0KTtcclxuXHJcbiAgICB0aGlzLmxpZ2h0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQoMHg0MDQwNDAsIDEpO1xyXG4gICAgdGhpcy5saWdodC5wb3NpdGlvbi5zZXQoMCwgNipzY2FsZSwgMCk7XHJcbiAgICB0aGlzLmxpZ2h0LmNhc3RTaGFkb3cgPSBmYWxzZTtcclxuICAgIC8vIGNvbnN0IGQgPSAyMCpzY2FsZTtcclxuICAgIC8vIHRoaXMubGlnaHQuc2hhZG93LmNhbWVyYS5sZWZ0ID0gLWQ7XHJcbiAgICAvLyB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEucmlnaHQgPSBkO1xyXG4gICAgLy8gdGhpcy5saWdodC5zaGFkb3cuY2FtZXJhLnRvcCA9IGQ7XHJcbiAgICAvLyB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEuYm90dG9tID0gLWQ7XHJcbiAgICAvLyB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IDEqc2NhbGU7XHJcbiAgICAvLyB0aGlzLmxpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyID0gMjUqc2NhbGU7XHJcbiAgICAvLyB0aGlzLmxpZ2h0LnNoYWRvdy5tYXBTaXplLnggPSAxMDI0O1xyXG4gICAgLy8gdGhpcy5saWdodC5zaGFkb3cubWFwU2l6ZS55ID0gMTAyNDtcclxuICAgIHRoaXMuc2NlbmUuYWRkKHRoaXMubGlnaHQpO1xyXG5cclxuICAgIHRoaXMuY29udHJvbHMgPSBuZXcgT3JiaXQodGhpcy5jYW1lcmEsIHRoaXMuZWxlbWVudCk7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnRhcmdldC55ID0gMC41O1xyXG5cclxuICAgIGNvbnN0IGNzc1NjZW5lID0gJCh0aGlzLmNzc1JlbmRlcmVyLmRvbUVsZW1lbnQpLmZpbmQoJ2RpdicpLCB0bXBWZWN0b3IgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG4gICAgdGhpcy5jb250cm9scy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKT0+IHtcclxuICAgICAgdGhpcy5jYW1lcmEuZ2V0V29ybGREaXJlY3Rpb24odG1wVmVjdG9yKTtcclxuICAgICAgY3NzU2NlbmUuY3NzKCdkaXNwbGF5JywgdG1wVmVjdG9yLnktdGhpcy5jYW1lcmEucG9zaXRpb24ueT4wPyAnbm9uZSc6ICdibG9jaycpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRocmVlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZih1c2VIZWxwZXJzKSB7XHJcbiAgICAgIHRoaXMuc2NlbmUuYWRkKG5ldyBUSFJFRS5BeGlzSGVscGVyKDUpKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmJpbmRzID0ge1xyXG4gICAgICBvbldpbmRvd1Jlc2l6ZTogdGhpcy5vbldpbmRvd1Jlc2l6ZS5iaW5kKHRoaXMpLFxyXG4gICAgICBhbmltYXRlOiB0aGlzLmFuaW1hdGUuYmluZCh0aGlzKVxyXG4gICAgfTtcclxuXHJcbiAgICAkKHRoaXMud25kKS5vbigncmVzaXplJywgdGhpcy5iaW5kcy5vbldpbmRvd1Jlc2l6ZSk7XHJcblxyXG4gICAgdGhpcy5tb3VzZUV2ZW50cyA9IG5ldyBUaHJlZU1vdXNlRXZlbnRDb252ZXJ0ZXIodGhpcy53bmQsIHRoaXMuZG9jLCB0aGlzKTtcclxuICAgIHRoaXMudG91Y2hFdmVudHMgPSBuZXcgVGhyZWVUb3VjaEV2ZW50Q29udmVydGVyKHRoaXMud25kLCB0aGlzLmRvYywgdGhpcyk7XHJcbiAgICBjb25zdCBmaWx0ZXJEYXRhID0ge3R5cGU6ICdtb3VzZW1vdmUnfTtcclxuICAgIHRoaXMubW91c2VFdmVudHMuZmlsdGVyID0gKGVsZW1lbnQsIGUpPT4ge1xyXG4gICAgICBjb25zdCB0eXBlcyA9IFsnbW91c2VlbnRlcicsICdtb3VzZW92ZXInLCAnbW91c2VsZWF2ZScsICdtb3VzZW91dCddLCBjb250YWlucyA9IChwLCBjKT0+IHA9PT1jIHx8ICQuY29udGFpbnMocCwgYyk7XHJcbiAgICAgIGlmKGUudHlwZT09PSdtb3VzZW1vdmUnKSB7XHJcbiAgICAgICAgZmlsdGVyRGF0YS5wYWdlWCA9IGUucGFnZVg7XHJcbiAgICAgICAgZmlsdGVyRGF0YS5wYWdlWSA9IGUucGFnZVk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGUucmVsYXRlZFRhcmdldCAmJiB+dHlwZXMuaW5kZXhPZihlLnR5cGUpICYmIGNvbnRhaW5zKGVsZW1lbnQsIGUudGFyZ2V0KSAmJiBjb250YWlucyhlbGVtZW50LCBlLnJlbGF0ZWRUYXJnZXQpPyB7Li4uZSwgLi4uZmlsdGVyRGF0YX06IGU7XHJcbiAgICB9O1xyXG4gICAgdGhpcy5kcmFnID0gbmV3IERyYWcodGhpcy53bmQsIHRoaXMuZG9jLCB0aGlzKTtcclxuXHJcbiAgICB0aGlzLm9uV2luZG93UmVzaXplKCk7XHJcbiAgICB0aGlzLmFuaW1hdGUoKTtcclxuICB9XHJcblxyXG4gIGdldERpYWcoKSB7XHJcbiAgICBjb25zdCB0ZXN0ID0gJCgnPGRpdiBzdHlsZT1cImhlaWdodDogMWluOyB3aWR0aDogMWluOyBkaXNwbGF5OiBub25lO1wiPjwvZGl2PicpLmFwcGVuZFRvKHRoaXMuakNvbnRhaW5lciksXHJcbiAgICByID0gbmV3IFRIUkVFLlZlY3RvcjIoc2NyZWVuLndpZHRoL3Rlc3Qud2lkdGgoKSwgc2NyZWVuLmhlaWdodC90ZXN0LmhlaWdodCgpKTtcclxuICAgIHRlc3QucmVtb3ZlKCk7XHJcbiAgICByZXR1cm4gci5sZW5ndGgoKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZVRocmVlKCkge1xyXG4gICAgdGhpcy5saWdodC51c2VyRGF0YS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgZGVsZXRlIHRoaXMuYmluZHMuYW5pbWF0ZTtcclxuICAgICQodGhpcy53bmQpLm9mZigncmVzaXplJywgdGhpcy5iaW5kcy5vbldpbmRvd1Jlc2l6ZSk7XHJcbiAgICB0aGlzLm1vdXNlRXZlbnRzLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMudG91Y2hFdmVudHMuZGlzcG9zZSgpO1xyXG4gICAgdGhpcy5kcmFnLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMuY29udHJvbHMuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgd2lkdGgoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qQ29udGFpbmVyLndpZHRoKCk7XHJcbiAgfVxyXG5cclxuICBoZWlnaHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qQ29udGFpbmVyLmhlaWdodCgpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXh0cmFMaWdodGluZyh2KSB7XHJcbiAgICB0aGlzLmxpZ2h0LmludGVuc2l0eSA9IHY7XHJcbiAgfVxyXG5cclxuICBpc01vYmlsZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmRpYWc8VXRpbHMuTU9CSUxFX0RJQUc7XHJcbiAgfVxyXG5cclxuICBnZXRPcmJpdCgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRyb2xzO1xyXG4gIH1cclxuXHJcbiAgc2V0Q29udHJvbHNTdGF0ZShzdGF0ZSkge1xyXG4gICAgdGhpcy5jb250cm9scy5lbmFibGVkID0gc3RhdGU7XHJcbiAgfVxyXG5cclxuICBnZXRDb250cm9sc1N0YXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbHMuZW5hYmxlZDtcclxuICB9XHJcblxyXG4gIG9uV2luZG93UmVzaXplKCkge1xyXG4gICAgaWYodGhpcy53aWR0aCgpPjEgJiYgdGhpcy5oZWlnaHQoKT4xKSB7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZUNhbWVyYSA9IChjYW1lcmEpPT4ge1xyXG4gICAgICAgIGNhbWVyYS5hc3BlY3QgPSB0aGlzLndpZHRoKCkvdGhpcy5oZWlnaHQoKTtcclxuICAgICAgICBjYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xyXG4gICAgICB9LFxyXG4gICAgICB1cGRhdGVSZW5kZXJlciA9IChyZW5kZXJlcik9PiB7XHJcbiAgICAgICAgcmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoKCksIHRoaXMuaGVpZ2h0KCkpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdXBkYXRlQ2FtZXJhKHRoaXMuY2FtZXJhKTtcclxuICAgICAgdXBkYXRlUmVuZGVyZXIodGhpcy5yZW5kZXJlcik7XHJcbiAgICAgIHVwZGF0ZVJlbmRlcmVyKHRoaXMuY3NzUmVuZGVyZXIpO1xyXG4gICAgICB0aGlzLnVwZGF0ZVRocmVlKCk7XHJcblxyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdyZXNpemUnfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2V0VGltZW91dCgoKT0+IHtcclxuICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplKCk7XHJcbiAgICAgIH0sIDI1MCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLnNjZW5lLmFkZChvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgYWRkQ3NzT2JqZWN0KG9iamVjdCkge1xyXG4gICAgdGhpcy5jc3NTY2VuZS5hZGQob2JqZWN0KTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNzc09iamVjdChvYmplY3QpIHtcclxuICAgIHRoaXMuY3NzU2NlbmUucmVtb3ZlKG9iamVjdCk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVPYmplY3Qob2JqZWN0KSB7XHJcbiAgICB0aGlzLnNjZW5lLnJlbW92ZShvYmplY3QpO1xyXG4gIH1cclxuXHJcbiAgYW5pbWF0ZSgpIHtcclxuICAgIGlmKHRoaXMuYmluZHMuYW5pbWF0ZSkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5iaW5kcy5hbmltYXRlKTtcclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICBhZGRSZW5kZXJDYWxsYmFjayhjbGIpIHtcclxuICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzLnB1c2goY2xiKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVJlbmRlckNhbGxiYWNrKGNsYikge1xyXG4gICAgY29uc3QgaSA9IHRoaXMucmVuZGVyQ2FsbGJhY2tzLmluZGV4T2YoY2xiKTtcclxuICAgIGlmKH5pKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyQ2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGRlbHRhVGltZSA9IE1hdGgubWluKHRoaXMuY2xvY2suZ2V0RGVsdGEoKSwgMC4wMTcqMik7XHJcbiAgICB0aGlzLmNvbnRyb2xzLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgZm9yKGxldCBjbGIgb2YgdGhpcy5yZW5kZXJDYWxsYmFja3MpIHtcclxuICAgICAgY2xiKGRlbHRhVGltZSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmNzc1JlbmRlcmVyLnJlbmRlcih0aGlzLmNzc1NjZW5lLCB0aGlzLmNhbWVyYSk7XHJcbiAgICBsZXQgcmVuZGVyID0gdHJ1ZTtcclxuICAgIGlmKHRoaXMuY2hlY2tVcGRhdGVGbGFnKSB7XHJcbiAgICAgIHJlbmRlciA9IGZhbHNlO1xyXG4gICAgICBmb3IobGV0IG8gb2YgdGhpcy5zY2VuZS5jaGlsZHJlbikge1xyXG4gICAgICAgIHJlbmRlciA9IHJlbmRlciB8fCBvLnVzZXJEYXRhLm5lZWRzVXBkYXRlO1xyXG4gICAgICAgIG8udXNlckRhdGEubmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYocmVuZGVyKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRQcmVjaXNpb24oKSB7XHJcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG4gICAgc2NlbmUuYWRkKG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoMHhmZmZmZmYpKTtcclxuXHJcbiAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoMzAsIDEsIDEsIDEwMCk7XHJcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEpO1xyXG4gICAgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcclxuXHJcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XHJcbiAgICByZW5kZXJlci5zZXRDbGVhckNvbG9yKDB4ZmZmZmZmKTtcclxuICAgIHJlbmRlcmVyLnNldFNpemUoMSwgMSk7XHJcblxyXG4gICAgY29uc3QgYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpLCBjdHggPSBjLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjLndpZHRoID0gYy5oZWlnaHQgPSAxO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9ICcjZmYwMDAwJztcclxuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjLndpZHRoLCBjLmhlaWdodCk7XHJcbiAgICBjb25zdCB0ID0gbmV3IFRIUkVFLlRleHR1cmUoYyk7XHJcbiAgICB0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHJcbiAgICBzY2VuZS5hZGQobmV3IFRIUkVFLk1lc2goXHJcbiAgICAgIG5ldyBUSFJFRS5QbGFuZUdlb21ldHJ5KDEsIDEsIDEsIDEpLFxyXG4gICAgICBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoe21hcDogdH0pXHJcbiAgICApKTtcclxuXHJcbiAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0UGl4ZWwoYywgeCwgeSkge1xyXG4gICAgICBjb25zdCBwcyA9IG5ldyBVaW50OEFycmF5KDQpO1xyXG4gICAgICBjLnJlYWRQaXhlbHMoeCwgeSwgMSwgMSwgYy5SR0JBLCBjLlVOU0lHTkVEX0JZVEUsIHBzKTtcclxuICAgICAgcmV0dXJuIHBzO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcCA9IGdldFBpeGVsKHJlbmRlcmVyLmRvbUVsZW1lbnQuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCByZW5kZXJlci5kb21FbGVtZW50LmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpLCAwLCAwKTtcclxuICAgIHJldHVybiBwWzBdPT09MjU1JiZwWzFdPT09MCYmcFsyXT09PTA/ICdoaWdocCc6ICdtZWRpdW1wJztcclxuICB9XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vY29tbW9uL2NsYXNzZXMvVmlzdWFsV29ybGQuanMiLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWW91VHViZUFwaSB7XHJcbiAgc3RhdGljIGluaXQoKSB7XHJcbiAgICBpZighWW91VHViZUFwaS50YXNrKSB7XHJcbiAgICAgIFlvdVR1YmVBcGkudGFzayA9IG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcclxuICAgICAgICBpZighd2luZG93WydZVCddKSB7XHJcbiAgICAgICAgICB3aW5kb3dbJ1lUJ10gPSB7XHJcbiAgICAgICAgICAgIGxvYWRpbmc6IDAsXHJcbiAgICAgICAgICAgIGxvYWRlZDogMFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXdpbmRvd1snWVRDb25maWcnXSkge1xyXG4gICAgICAgICAgd2luZG93WydZVENvbmZpZyddID0ge1xyXG4gICAgICAgICAgICAnaG9zdCc6ICdodHRwOi8vd3d3LnlvdXR1YmUuY29tJ1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIVlULmxvYWRpbmcpIHtcclxuICAgICAgICAgIFlULmxvYWRpbmcgPSAxO1xyXG4gICAgICAgICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgbCA9IFtdO1xyXG4gICAgICAgICAgICBZVC5yZWFkeSA9IGZ1bmN0aW9uKGYpIHtcclxuICAgICAgICAgICAgICBpZihZVC5sb2FkZWQpIHtcclxuICAgICAgICAgICAgICAgIGYoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB3aW5kb3cub25ZVFJlYWR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgWVQubG9hZGVkID0gMTtcclxuICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgbFtpXSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgWVQuc2V0Q29uZmlnID0gZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgICAgIGZvcih2YXIgayBpbiBjKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjLmhhc093blByb3BlcnR5KGspKSB7XHJcbiAgICAgICAgICAgICAgICAgIFlUQ29uZmlnW2tdID0gY1trXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgICAgICAgIGEudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gICAgICAgICAgICBhLmlkID0gJ3d3dy13aWRnZXRhcGktc2NyaXB0JztcclxuICAgICAgICAgICAgYS5zcmMgPSAnaHR0cHM6Ly9zLnl0aW1nLmNvbS95dHMvanNiaW4vd3d3LXdpZGdldGFwaS12ZmxkbjFqUk0vd3d3LXdpZGdldGFwaS5qcyc7XHJcbiAgICAgICAgICAgIGEuYXN5bmMgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0O1xyXG4gICAgICAgICAgICBpZihjKSB7XHJcbiAgICAgICAgICAgICAgdmFyIG4gPSBjLm5vbmNlIHx8IGMuZ2V0QXR0cmlidXRlKCdub25jZScpO1xyXG4gICAgICAgICAgICAgIGlmKG4pIHtcclxuICAgICAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCdub25jZScsIG4pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTtcclxuICAgICAgICAgICAgYi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBiKTtcclxuICAgICAgICAgIH0pKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBZb3VUdWJlQXBpLnRhc2s7XHJcbiAgfVxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2NvbW1vbi9jbGFzc2VzL1lvdVR1YmVBcGkuanMiLCJpbXBvcnQgVGFyZ2V0IGZyb20gJy4vVGFyZ2V0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpcmNsZVRhcmdldCBleHRlbmRzIFRhcmdldCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHgsIHksIHIpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnAgPSB7XHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIHJcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB0ZXN0SW50ZXJzZWN0aW9uKGUsIGRhdGEpIHtcclxuICAgIGxldCByZXM7XHJcbiAgICBjb25zdCB7eCwgeX0gPSBkYXRhLCBwID0gdGhpcy5wO1xyXG4gICAgaWYoKHgtcC54KSooeC1wLngpKyh5LXAueSkqKHktcC55KTw9cC5yKnAucikge1xyXG4gICAgICByZXMgPSB7XHJcbiAgICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICAgIGRhdGFcclxuICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL0NpcmNsZVRhcmdldC5qcyIsImltcG9ydCBUYXJnZXQgZnJvbSAnLi9UYXJnZXQnO1xyXG5pbXBvcnQgQmFzZU1hdGhVdGlscyBmcm9tICcuLi9CYXNlTWF0aFV0aWxzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvbHlUYXJnZXQgZXh0ZW5kcyBUYXJnZXQge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwb2x5KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5wb2x5ID0gcG9seTtcclxuICB9XHJcblxyXG4gIHRlc3RJbnRlcnNlY3Rpb24oZSwgcCkge1xyXG4gICAgcmV0dXJuIEJhc2VNYXRoVXRpbHMuaXNJbnNpZGVQb2x5KHRoaXMucG9seSwgcCk/IHtcclxuICAgICAgdGFyZ2V0OiB0aGlzLFxyXG4gICAgICBkYXRhOiBwXHJcbiAgICB9OiB1bmRlZmluZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9jb21tb24vY2xhc3Nlcy90YXJnZXRzL1BvbHlUYXJnZXQuanMiLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbi8qIVxuICogalF1ZXJ5IE1vdXNld2hlZWwgMy4xLjEzXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICovXG5cbihmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgIGlmICggdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kICkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbJ2pxdWVyeSddLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBOb2RlL0NvbW1vbkpTIHN0eWxlIGZvciBCcm93c2VyaWZ5XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cbn0oZnVuY3Rpb24gKCQpIHtcblxuICAgIHZhciB0b0ZpeCAgPSBbJ3doZWVsJywgJ21vdXNld2hlZWwnLCAnRE9NTW91c2VTY3JvbGwnLCAnTW96TW91c2VQaXhlbFNjcm9sbCddLFxuICAgICAgICB0b0JpbmQgPSAoICdvbndoZWVsJyBpbiBkb2N1bWVudCB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPj0gOSApID9cbiAgICAgICAgICAgICAgICAgICAgWyd3aGVlbCddIDogWydtb3VzZXdoZWVsJywgJ0RvbU1vdXNlU2Nyb2xsJywgJ01vek1vdXNlUGl4ZWxTY3JvbGwnXSxcbiAgICAgICAgc2xpY2UgID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLFxuICAgICAgICBudWxsTG93ZXN0RGVsdGFUaW1lb3V0LCBsb3dlc3REZWx0YTtcblxuICAgIGlmICggJC5ldmVudC5maXhIb29rcyApIHtcbiAgICAgICAgZm9yICggdmFyIGkgPSB0b0ZpeC5sZW5ndGg7IGk7ICkge1xuICAgICAgICAgICAgJC5ldmVudC5maXhIb29rc1sgdG9GaXhbLS1pXSBdID0gJC5ldmVudC5tb3VzZUhvb2tzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNwZWNpYWwgPSAkLmV2ZW50LnNwZWNpYWwubW91c2V3aGVlbCA9IHtcbiAgICAgICAgdmVyc2lvbjogJzMuMS4xMicsXG5cbiAgICAgICAgc2V0dXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSB0b0JpbmQubGVuZ3RoOyBpOyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCB0b0JpbmRbLS1pXSwgaGFuZGxlciwgZmFsc2UgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub25tb3VzZXdoZWVsID0gaGFuZGxlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBsaW5lIGhlaWdodCBhbmQgcGFnZSBoZWlnaHQgZm9yIHRoaXMgcGFydGljdWxhciBlbGVtZW50XG4gICAgICAgICAgICAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtbGluZS1oZWlnaHQnLCBzcGVjaWFsLmdldExpbmVIZWlnaHQodGhpcykpO1xuICAgICAgICAgICAgJC5kYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jywgc3BlY2lhbC5nZXRQYWdlSGVpZ2h0KHRoaXMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICB0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IHRvQmluZC5sZW5ndGg7IGk7ICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHRvQmluZFstLWldLCBoYW5kbGVyLCBmYWxzZSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbm1vdXNld2hlZWwgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgdGhlIGRhdGEgd2UgYWRkZWQgdG8gdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICQucmVtb3ZlRGF0YSh0aGlzLCAnbW91c2V3aGVlbC1saW5lLWhlaWdodCcpO1xuICAgICAgICAgICAgJC5yZW1vdmVEYXRhKHRoaXMsICdtb3VzZXdoZWVsLXBhZ2UtaGVpZ2h0Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0TGluZUhlaWdodDogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgICAgdmFyICRlbGVtID0gJChlbGVtKSxcbiAgICAgICAgICAgICAgICAkcGFyZW50ID0gJGVsZW1bJ29mZnNldFBhcmVudCcgaW4gJC5mbiA/ICdvZmZzZXRQYXJlbnQnIDogJ3BhcmVudCddKCk7XG4gICAgICAgICAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgJHBhcmVudCA9ICQoJ2JvZHknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludCgkcGFyZW50LmNzcygnZm9udFNpemUnKSwgMTApIHx8IHBhcnNlSW50KCRlbGVtLmNzcygnZm9udFNpemUnKSwgMTApIHx8IDE2O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFBhZ2VIZWlnaHQ6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgICAgIHJldHVybiAkKGVsZW0pLmhlaWdodCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICBhZGp1c3RPbGREZWx0YXM6IHRydWUsIC8vIHNlZSBzaG91bGRBZGp1c3RPbGREZWx0YXMoKSBiZWxvd1xuICAgICAgICAgICAgbm9ybWFsaXplT2Zmc2V0OiB0cnVlICAvLyBjYWxscyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZm9yIGVhY2ggZXZlbnRcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAkLmZuLmV4dGVuZCh7XG4gICAgICAgIG1vdXNld2hlZWw6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4gPyB0aGlzLmJpbmQoJ21vdXNld2hlZWwnLCBmbikgOiB0aGlzLnRyaWdnZXIoJ21vdXNld2hlZWwnKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1bm1vdXNld2hlZWw6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bmJpbmQoJ21vdXNld2hlZWwnLCBmbik7XG4gICAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgICAgICB2YXIgb3JnRXZlbnQgICA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudCxcbiAgICAgICAgICAgIGFyZ3MgICAgICAgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBkZWx0YSAgICAgID0gMCxcbiAgICAgICAgICAgIGRlbHRhWCAgICAgPSAwLFxuICAgICAgICAgICAgZGVsdGFZICAgICA9IDAsXG4gICAgICAgICAgICBhYnNEZWx0YSAgID0gMCxcbiAgICAgICAgICAgIG9mZnNldFggICAgPSAwLFxuICAgICAgICAgICAgb2Zmc2V0WSAgICA9IDA7XG4gICAgICAgIGV2ZW50ID0gJC5ldmVudC5maXgob3JnRXZlbnQpO1xuICAgICAgICBldmVudC50eXBlID0gJ21vdXNld2hlZWwnO1xuXG4gICAgICAgIC8vIE9sZCBzY2hvb2wgc2Nyb2xsd2hlZWwgZGVsdGFcbiAgICAgICAgaWYgKCAnZGV0YWlsJyAgICAgIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVkgPSBvcmdFdmVudC5kZXRhaWwgKiAtMTsgICAgICB9XG4gICAgICAgIGlmICggJ3doZWVsRGVsdGEnICBpbiBvcmdFdmVudCApIHsgZGVsdGFZID0gb3JnRXZlbnQud2hlZWxEZWx0YTsgICAgICAgfVxuICAgICAgICBpZiAoICd3aGVlbERlbHRhWScgaW4gb3JnRXZlbnQgKSB7IGRlbHRhWSA9IG9yZ0V2ZW50LndoZWVsRGVsdGFZOyAgICAgIH1cbiAgICAgICAgaWYgKCAnd2hlZWxEZWx0YVgnIGluIG9yZ0V2ZW50ICkgeyBkZWx0YVggPSBvcmdFdmVudC53aGVlbERlbHRhWCAqIC0xOyB9XG5cbiAgICAgICAgLy8gRmlyZWZveCA8IDE3IGhvcml6b250YWwgc2Nyb2xsaW5nIHJlbGF0ZWQgdG8gRE9NTW91c2VTY3JvbGwgZXZlbnRcbiAgICAgICAgaWYgKCAnYXhpcycgaW4gb3JnRXZlbnQgJiYgb3JnRXZlbnQuYXhpcyA9PT0gb3JnRXZlbnQuSE9SSVpPTlRBTF9BWElTICkge1xuICAgICAgICAgICAgZGVsdGFYID0gZGVsdGFZICogLTE7XG4gICAgICAgICAgICBkZWx0YVkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IGRlbHRhIHRvIGJlIGRlbHRhWSBvciBkZWx0YVggaWYgZGVsdGFZIGlzIDAgZm9yIGJhY2t3YXJkcyBjb21wYXRhYmlsaXRpeVxuICAgICAgICBkZWx0YSA9IGRlbHRhWSA9PT0gMCA/IGRlbHRhWCA6IGRlbHRhWTtcblxuICAgICAgICAvLyBOZXcgc2Nob29sIHdoZWVsIGRlbHRhICh3aGVlbCBldmVudClcbiAgICAgICAgaWYgKCAnZGVsdGFZJyBpbiBvcmdFdmVudCApIHtcbiAgICAgICAgICAgIGRlbHRhWSA9IG9yZ0V2ZW50LmRlbHRhWSAqIC0xO1xuICAgICAgICAgICAgZGVsdGEgID0gZGVsdGFZO1xuICAgICAgICB9XG4gICAgICAgIGlmICggJ2RlbHRhWCcgaW4gb3JnRXZlbnQgKSB7XG4gICAgICAgICAgICBkZWx0YVggPSBvcmdFdmVudC5kZWx0YVg7XG4gICAgICAgICAgICBpZiAoIGRlbHRhWSA9PT0gMCApIHsgZGVsdGEgID0gZGVsdGFYICogLTE7IH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE5vIGNoYW5nZSBhY3R1YWxseSBoYXBwZW5lZCwgbm8gcmVhc29uIHRvIGdvIGFueSBmdXJ0aGVyXG4gICAgICAgIGlmICggZGVsdGFZID09PSAwICYmIGRlbHRhWCA9PT0gMCApIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgLy8gTmVlZCB0byBjb252ZXJ0IGxpbmVzIGFuZCBwYWdlcyB0byBwaXhlbHMgaWYgd2UgYXJlbid0IGFscmVhZHkgaW4gcGl4ZWxzXG4gICAgICAgIC8vIFRoZXJlIGFyZSB0aHJlZSBkZWx0YSBtb2RlczpcbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAwIGlzIGJ5IHBpeGVscywgbm90aGluZyB0byBkb1xuICAgICAgICAvLyAgICogZGVsdGFNb2RlIDEgaXMgYnkgbGluZXNcbiAgICAgICAgLy8gICAqIGRlbHRhTW9kZSAyIGlzIGJ5IHBhZ2VzXG4gICAgICAgIGlmICggb3JnRXZlbnQuZGVsdGFNb2RlID09PSAxICkge1xuICAgICAgICAgICAgdmFyIGxpbmVIZWlnaHQgPSAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtbGluZS1oZWlnaHQnKTtcbiAgICAgICAgICAgIGRlbHRhICAqPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFZICo9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVggKj0gbGluZUhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmICggb3JnRXZlbnQuZGVsdGFNb2RlID09PSAyICkge1xuICAgICAgICAgICAgdmFyIHBhZ2VIZWlnaHQgPSAkLmRhdGEodGhpcywgJ21vdXNld2hlZWwtcGFnZS1oZWlnaHQnKTtcbiAgICAgICAgICAgIGRlbHRhICAqPSBwYWdlSGVpZ2h0O1xuICAgICAgICAgICAgZGVsdGFZICo9IHBhZ2VIZWlnaHQ7XG4gICAgICAgICAgICBkZWx0YVggKj0gcGFnZUhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIGxvd2VzdCBhYnNvbHV0ZSBkZWx0YSB0byBub3JtYWxpemUgdGhlIGRlbHRhIHZhbHVlc1xuICAgICAgICBhYnNEZWx0YSA9IE1hdGgubWF4KCBNYXRoLmFicyhkZWx0YVkpLCBNYXRoLmFicyhkZWx0YVgpICk7XG5cbiAgICAgICAgaWYgKCAhbG93ZXN0RGVsdGEgfHwgYWJzRGVsdGEgPCBsb3dlc3REZWx0YSApIHtcbiAgICAgICAgICAgIGxvd2VzdERlbHRhID0gYWJzRGVsdGE7XG5cbiAgICAgICAgICAgIC8vIEFkanVzdCBvbGRlciBkZWx0YXMgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAoIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpICkge1xuICAgICAgICAgICAgICAgIGxvd2VzdERlbHRhIC89IDQwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRqdXN0IG9sZGVyIGRlbHRhcyBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKCBzaG91bGRBZGp1c3RPbGREZWx0YXMob3JnRXZlbnQsIGFic0RlbHRhKSApIHtcbiAgICAgICAgICAgIC8vIERpdmlkZSBhbGwgdGhlIHRoaW5ncyBieSA0MCFcbiAgICAgICAgICAgIGRlbHRhICAvPSA0MDtcbiAgICAgICAgICAgIGRlbHRhWCAvPSA0MDtcbiAgICAgICAgICAgIGRlbHRhWSAvPSA0MDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBhIHdob2xlLCBub3JtYWxpemVkIHZhbHVlIGZvciB0aGUgZGVsdGFzXG4gICAgICAgIGRlbHRhICA9IE1hdGhbIGRlbHRhICA+PSAxID8gJ2Zsb29yJyA6ICdjZWlsJyBdKGRlbHRhICAvIGxvd2VzdERlbHRhKTtcbiAgICAgICAgZGVsdGFYID0gTWF0aFsgZGVsdGFYID49IDEgPyAnZmxvb3InIDogJ2NlaWwnIF0oZGVsdGFYIC8gbG93ZXN0RGVsdGEpO1xuICAgICAgICBkZWx0YVkgPSBNYXRoWyBkZWx0YVkgPj0gMSA/ICdmbG9vcicgOiAnY2VpbCcgXShkZWx0YVkgLyBsb3dlc3REZWx0YSk7XG5cbiAgICAgICAgLy8gTm9ybWFsaXNlIG9mZnNldFggYW5kIG9mZnNldFkgcHJvcGVydGllc1xuICAgICAgICBpZiAoIHNwZWNpYWwuc2V0dGluZ3Mubm9ybWFsaXplT2Zmc2V0ICYmIHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICkge1xuICAgICAgICAgICAgdmFyIGJvdW5kaW5nUmVjdCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBvZmZzZXRYID0gZXZlbnQuY2xpZW50WCAtIGJvdW5kaW5nUmVjdC5sZWZ0O1xuICAgICAgICAgICAgb2Zmc2V0WSA9IGV2ZW50LmNsaWVudFkgLSBib3VuZGluZ1JlY3QudG9wO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGluZm9ybWF0aW9uIHRvIHRoZSBldmVudCBvYmplY3RcbiAgICAgICAgZXZlbnQuZGVsdGFYID0gZGVsdGFYO1xuICAgICAgICBldmVudC5kZWx0YVkgPSBkZWx0YVk7XG4gICAgICAgIGV2ZW50LmRlbHRhRmFjdG9yID0gbG93ZXN0RGVsdGE7XG4gICAgICAgIGV2ZW50Lm9mZnNldFggPSBvZmZzZXRYO1xuICAgICAgICBldmVudC5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICAgICAgLy8gR28gYWhlYWQgYW5kIHNldCBkZWx0YU1vZGUgdG8gMCBzaW5jZSB3ZSBjb252ZXJ0ZWQgdG8gcGl4ZWxzXG4gICAgICAgIC8vIEFsdGhvdWdoIHRoaXMgaXMgYSBsaXR0bGUgb2RkIHNpbmNlIHdlIG92ZXJ3cml0ZSB0aGUgZGVsdGFYL1lcbiAgICAgICAgLy8gcHJvcGVydGllcyB3aXRoIG5vcm1hbGl6ZWQgZGVsdGFzLlxuICAgICAgICBldmVudC5kZWx0YU1vZGUgPSAwO1xuXG4gICAgICAgIC8vIEFkZCBldmVudCBhbmQgZGVsdGEgdG8gdGhlIGZyb250IG9mIHRoZSBhcmd1bWVudHNcbiAgICAgICAgYXJncy51bnNoaWZ0KGV2ZW50LCBkZWx0YSwgZGVsdGFYLCBkZWx0YVkpO1xuXG4gICAgICAgIC8vIENsZWFyb3V0IGxvd2VzdERlbHRhIGFmdGVyIHNvbWV0aW1lIHRvIGJldHRlclxuICAgICAgICAvLyBoYW5kbGUgbXVsdGlwbGUgZGV2aWNlIHR5cGVzIHRoYXQgZ2l2ZSBkaWZmZXJlbnRcbiAgICAgICAgLy8gYSBkaWZmZXJlbnQgbG93ZXN0RGVsdGFcbiAgICAgICAgLy8gRXg6IHRyYWNrcGFkID0gMyBhbmQgbW91c2Ugd2hlZWwgPSAxMjBcbiAgICAgICAgaWYgKG51bGxMb3dlc3REZWx0YVRpbWVvdXQpIHsgY2xlYXJUaW1lb3V0KG51bGxMb3dlc3REZWx0YVRpbWVvdXQpOyB9XG4gICAgICAgIG51bGxMb3dlc3REZWx0YVRpbWVvdXQgPSBzZXRUaW1lb3V0KG51bGxMb3dlc3REZWx0YSwgMjAwKTtcblxuICAgICAgICByZXR1cm4gKCQuZXZlbnQuZGlzcGF0Y2ggfHwgJC5ldmVudC5oYW5kbGUpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG51bGxMb3dlc3REZWx0YSgpIHtcbiAgICAgICAgbG93ZXN0RGVsdGEgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNob3VsZEFkanVzdE9sZERlbHRhcyhvcmdFdmVudCwgYWJzRGVsdGEpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbiBvbGRlciBldmVudCBhbmQgdGhlIGRlbHRhIGlzIGRpdmlzYWJsZSBieSAxMjAsXG4gICAgICAgIC8vIHRoZW4gd2UgYXJlIGFzc3VtaW5nIHRoYXQgdGhlIGJyb3dzZXIgaXMgdHJlYXRpbmcgdGhpcyBhcyBhblxuICAgICAgICAvLyBvbGRlciBtb3VzZSB3aGVlbCBldmVudCBhbmQgdGhhdCB3ZSBzaG91bGQgZGl2aWRlIHRoZSBkZWx0YXNcbiAgICAgICAgLy8gYnkgNDAgdG8gdHJ5IGFuZCBnZXQgYSBtb3JlIHVzYWJsZSBkZWx0YUZhY3Rvci5cbiAgICAgICAgLy8gU2lkZSBub3RlLCB0aGlzIGFjdHVhbGx5IGltcGFjdHMgdGhlIHJlcG9ydGVkIHNjcm9sbCBkaXN0YW5jZVxuICAgICAgICAvLyBpbiBvbGRlciBicm93c2VycyBhbmQgY2FuIGNhdXNlIHNjcm9sbGluZyB0byBiZSBzbG93ZXIgdGhhbiBuYXRpdmUuXG4gICAgICAgIC8vIFR1cm4gdGhpcyBvZmYgYnkgc2V0dGluZyAkLmV2ZW50LnNwZWNpYWwubW91c2V3aGVlbC5zZXR0aW5ncy5hZGp1c3RPbGREZWx0YXMgdG8gZmFsc2UuXG4gICAgICAgIHJldHVybiBzcGVjaWFsLnNldHRpbmdzLmFkanVzdE9sZERlbHRhcyAmJiBvcmdFdmVudC50eXBlID09PSAnbW91c2V3aGVlbCcgJiYgYWJzRGVsdGEgJSAxMjAgPT09IDA7XG4gICAgfVxuXG59KSk7XG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vaW1wb3J0cy1sb2FkZXI/ZGVmaW5lPT5mYWxzZSEuLi9+L2pxdWVyeS1tb3VzZXdoZWVsL2pxdWVyeS5tb3VzZXdoZWVsLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBzdGF0cy5qcyAtIGh0dHA6Ly9naXRodWIuY29tL21yZG9vYi9zdGF0cy5qc1xuKGZ1bmN0aW9uKGYsZSl7XCJvYmplY3RcIj09PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoZSk6Zi5TdGF0cz1lKCl9KSh0aGlzLGZ1bmN0aW9uKCl7dmFyIGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGEpe2MuYXBwZW5kQ2hpbGQoYS5kb20pO3JldHVybiBhfWZ1bmN0aW9uIHUoYSl7Zm9yKHZhciBkPTA7ZDxjLmNoaWxkcmVuLmxlbmd0aDtkKyspYy5jaGlsZHJlbltkXS5zdHlsZS5kaXNwbGF5PWQ9PT1hP1wiYmxvY2tcIjpcIm5vbmVcIjtsPWF9dmFyIGw9MCxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7Yy5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO2N1cnNvcjpwb2ludGVyO29wYWNpdHk6MC45O3otaW5kZXg6MTAwMDBcIjtjLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGZ1bmN0aW9uKGEpe2EucHJldmVudERlZmF1bHQoKTtcbnUoKytsJWMuY2hpbGRyZW4ubGVuZ3RoKX0sITEpO3ZhciBrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCksZz1rLGE9MCxyPWUobmV3IGYuUGFuZWwoXCJGUFNcIixcIiMwZmZcIixcIiMwMDJcIikpLGg9ZShuZXcgZi5QYW5lbChcIk1TXCIsXCIjMGYwXCIsXCIjMDIwXCIpKTtpZihzZWxmLnBlcmZvcm1hbmNlJiZzZWxmLnBlcmZvcm1hbmNlLm1lbW9yeSl2YXIgdD1lKG5ldyBmLlBhbmVsKFwiTUJcIixcIiNmMDhcIixcIiMyMDFcIikpO3UoMCk7cmV0dXJue1JFVklTSU9OOjE2LGRvbTpjLGFkZFBhbmVsOmUsc2hvd1BhbmVsOnUsYmVnaW46ZnVuY3Rpb24oKXtrPShwZXJmb3JtYW5jZXx8RGF0ZSkubm93KCl9LGVuZDpmdW5jdGlvbigpe2ErKzt2YXIgYz0ocGVyZm9ybWFuY2V8fERhdGUpLm5vdygpO2gudXBkYXRlKGMtaywyMDApO2lmKGM+ZysxRTMmJihyLnVwZGF0ZSgxRTMqYS8oYy1nKSwxMDApLGc9YyxhPTAsdCkpe3ZhciBkPXBlcmZvcm1hbmNlLm1lbW9yeTt0LnVwZGF0ZShkLnVzZWRKU0hlYXBTaXplL1xuMTA0ODU3NixkLmpzSGVhcFNpemVMaW1pdC8xMDQ4NTc2KX1yZXR1cm4gY30sdXBkYXRlOmZ1bmN0aW9uKCl7az10aGlzLmVuZCgpfSxkb21FbGVtZW50OmMsc2V0TW9kZTp1fX07Zi5QYW5lbD1mdW5jdGlvbihlLGYsbCl7dmFyIGM9SW5maW5pdHksaz0wLGc9TWF0aC5yb3VuZCxhPWcod2luZG93LmRldmljZVBpeGVsUmF0aW98fDEpLHI9ODAqYSxoPTQ4KmEsdD0zKmEsdj0yKmEsZD0zKmEsbT0xNSphLG49NzQqYSxwPTMwKmEscT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Eud2lkdGg9cjtxLmhlaWdodD1oO3Euc3R5bGUuY3NzVGV4dD1cIndpZHRoOjgwcHg7aGVpZ2h0OjQ4cHhcIjt2YXIgYj1xLmdldENvbnRleHQoXCIyZFwiKTtiLmZvbnQ9XCJib2xkIFwiKzkqYStcInB4IEhlbHZldGljYSxBcmlhbCxzYW5zLXNlcmlmXCI7Yi50ZXh0QmFzZWxpbmU9XCJ0b3BcIjtiLmZpbGxTdHlsZT1sO2IuZmlsbFJlY3QoMCwwLHIsaCk7Yi5maWxsU3R5bGU9ZjtiLmZpbGxUZXh0KGUsdCx2KTtcbmIuZmlsbFJlY3QoZCxtLG4scCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCxtLG4scCk7cmV0dXJue2RvbTpxLHVwZGF0ZTpmdW5jdGlvbihoLHcpe2M9TWF0aC5taW4oYyxoKTtrPU1hdGgubWF4KGssaCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPTE7Yi5maWxsUmVjdCgwLDAscixtKTtiLmZpbGxTdHlsZT1mO2IuZmlsbFRleHQoZyhoKStcIiBcIitlK1wiIChcIitnKGMpK1wiLVwiK2coaykrXCIpXCIsdCx2KTtiLmRyYXdJbWFnZShxLGQrYSxtLG4tYSxwLGQsbSxuLWEscCk7Yi5maWxsUmVjdChkK24tYSxtLGEscCk7Yi5maWxsU3R5bGU9bDtiLmdsb2JhbEFscGhhPS45O2IuZmlsbFJlY3QoZCtuLWEsbSxhLGcoKDEtaC93KSpwKSl9fX07cmV0dXJuIGZ9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL34vc3RhdHMuanMvYnVpbGQvc3RhdHMubWluLmpzXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9